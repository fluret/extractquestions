#----------------------------------------#
Question:
Create a List of Squares of numbers from 1 to 10

Sample Output

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


Hints: 

Explication:
The code you provided is written in Python and uses a list comprehension to create a list called squares that contains the squares of numbers from 1 to 10. Here's a step-by-step explanation of the code:

    squares = [x**2 for x in range(1, 11)]: This line of code initializes a variable named squares and assigns it the result of a list comprehension.
        for x in range(1, 11): This part sets up a loop that iterates through numbers from 1 to 10 (inclusive). The range(1, 11) function generates a sequence of numbers starting from 1 and ending at 10.
        x**2: For each value of x in the range, this expression calculates the square of x.
        [x**2 for x in range(1, 11)]: This is the list comprehension itself. It iterates through the numbers in the specified range (1 to 10) and, for each number, calculates its square. The resulting squares are collected into a new list.
    print(squares): This line of code simply prints the squares list to the console.


Solution:
squares = [x**2 for x in range(1, 11)]
print(squares)
#----------------------------------------#
Question:
Create a List of Even numbers from 1 to 20

Sample Output

[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]


Hints: 

Explication:
This Python code creates a list called evens using a list comprehension, which contains even numbers from 1 to 20. Here's a breakdown of how the code works:

    evens = [x for x in range(1, 21) if x % 2 == 0]: This line of code initializes a variable named evens and assigns it the result of a list comprehension.
        for x in range(1, 21): This part sets up a loop that iterates through numbers from 1 to 20 (inclusive). The range(1, 21) function generates a sequence of numbers starting from 1 and ending at 20.
        if x % 2 == 0: This is a condition that filters the numbers. It checks if the current value of x is even. The % operator calculates the remainder when x is divided by 2. If the remainder is 0, it means x is even.
        [x for x in range(1, 21) if x % 2 == 0]: This is the list comprehension itself. It iterates through the numbers in the specified range (1 to 20) and, for each number, checks if it's even. If the number is even, it includes it in the new list.
    print(evens): This line of code prints the evens list to the console.


Solution:
evens = [x for x in range(1, 21) if x % 2 == 0]
print(evens)
#----------------------------------------#
Question:
Generate a list of characters from a string

Sample Output

['H', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']


Hints: 

Explication:
This Python code creates a list called chars using a list comprehension to extract alphabetic characters from the given string "Hello, world!". Here's how the code works:

    string = "Hello, world!": This line initializes a variable named string and assigns it the value "Hello, world!", which is a string containing letters, spaces, and punctuation.
    chars = [char for char in string if char.isalpha()]: This line of code initializes a variable named chars and assigns it the result of a list comprehension.
        for char in string: This part sets up a loop that iterates through each character (char) in the string.
        if char.isalpha(): This is a condition that checks if the current character char is alphabetic. The .isalpha() method is a string method that returns True if the character is an alphabet letter and False if it's not.
        [char for char in string if char.isalpha()]: This is the list comprehension itself. It iterates through each character in the string and, for each character that is alphabetic, includes it in the new list.
    print(chars): This line of code prints the chars list to the console.


Solution:
string = "Hello, world!"
chars = [char for char in string if char.isalpha()]
print(chars)
#----------------------------------------#
Question:
Create a list of lengths of words in a sentence

Sample Output

This is a sample sentence.

[4, 2, 1, 6, 9]


Hints: 

Explication:
This Python code analyzes a sentence and creates a list called word_lengths using a list comprehension to store the lengths of each word in the sentence. Here's how the code works:

    sentence = "This is a sample sentence.": This line initializes a variable named sentence and assigns it the value "This is a sample sentence."
    word_lengths = [len(word) for word in sentence.split()]: This line of code initializes a variable named word_lengths and assigns it the result of a list comprehension.
        sentence.split(): This part of the code splits the sentence into a list of words. By default, it splits the sentence on whitespace, so it separates the words.
        for word in sentence.split(): This part sets up a loop that iterates through each word in the list of words.
        len(word): For each word in the list, this expression calculates the length of the word using the len() function.
        [len(word) for word in sentence.split()]: This is the list comprehension itself. It iterates through the list of words and, for each word, calculates its length and includes it in the new list.
    print(sentence): This line of code prints the original sentence to the console.
    print(word_lengths): This line of code prints the word_lengths list to the console.


Solution:
sentence = "This is a sample sentence."
word_lengths = [len(word) for word in sentence.split()]
print(sentence)
print(word_lengths)
#----------------------------------------#
Question:
Generate a list of tuples containing a number and its square

Sample Output

[(1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]


Hints: 

Explication:
This Python code creates a list called num_squares using a list comprehension to generate pairs of numbers and their squares for values of x ranging from 1 to 5. Here's how the code works:

    num_squares = [(x, x**2) for x in range(1, 6)]: This line of code initializes a variable named num_squares and assigns it the result of a list comprehension.
        for x in range(1, 6): This part sets up a loop that iterates through values of x from 1 to 5 (inclusive). The range(1, 6) function generates a sequence of numbers starting from 1 and ending at 5.
        (x, x**2): For each value of x in the range, this expression creates a tuple containing two elements: the original value x and its square x**2.
        [(x, x**2) for x in range(1, 6)]: This is the list comprehension itself. It iterates through the values of x in the specified range (1 to 5) and, for each value, generates a tuple containing x and x**2. These tuples are collected into a new list.
    print(num_squares): This line of code prints the num_squares list to the console.


Solution:
num_squares = [(x, x**2) for x in range(1, 6)]
print(num_squares)
#----------------------------------------#
Question:
Create a list of lowercase letters

Sample Output

['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']


Hints: 

Explication:
This Python code creates a list called lowercase_letters using a list comprehension to generate lowercase letters of the English alphabet. Here's how the code works:

    lowercase_letters = [chr(x) for x in range(ord('a'), ord('z')+1)] : This line of code initializes a variable named lowercase_letters and assigns it the result of a list comprehension.
        range(ord('a'), ord('z')+1): This part of the code generates a range of integer values that correspond to the Unicode code points of lowercase letters in the English alphabet. ord('a') returns the Unicode code point of the letter 'a', and ord('z') returns the Unicode code point of the letter 'z'. Adding 1 ensures that 'z' is included in the range.
        chr(x): For each integer x in the range, this expression converts it back to a character using the chr() function. chr(x) returns the character that corresponds to the Unicode code point x.
        [chr(x) for x in range(ord('a'), ord('z')+1)]: This is the list comprehension itself. It iterates through the range of Unicode code points for lowercase letters and converts each code point back to its corresponding character. These characters (lowercase letters) are collected into a new list.
    print(lowercase_letters): This line of code prints the lowercase_letters list to the console.


Solution:
lowercase_letters = [chr(x) for x in range(ord('a'), ord('z')+1)]
print(lowercase_letters)
#----------------------------------------#
Question:
Generate a list of uppercase letters

Sample Output

['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']


Hints: 

Explication:
This Python code creates a list called uppercase_letters using a list comprehension to generate uppercase letters of the English alphabet. Here's how the code works:

    uppercase_letters = [chr(x) for x in range(ord('A'), ord('Z')+1)] : This line of code initializes a variable named uppercase_letters and assigns it the result of a list comprehension.
        range(ord('A'), ord('Z')+1): This part of the code generates a range of integer values that correspond to the Unicode code points of uppercase letters in the English alphabet. ord('A') returns the Unicode code point of the letter 'A', and ord('Z') returns the Unicode code point of the letter 'Z'. Adding 1 ensures that 'Z' is included in the range.
        chr(x): For each integer x in the range, this expression converts it back to a character using the chr() function. chr(x) returns the character that corresponds to the Unicode code point x.
        [chr(x) for x in range(ord('A'), ord('Z')+1)]: This is the list comprehension itself. It iterates through the range of Unicode code points for uppercase letters and converts each code point back to its corresponding character. These characters (uppercase letters) are collected into a new list.
    print(uppercase_letters): This line of code prints the uppercase_letters list to the console.


Solution:
uppercase_letters = [chr(x) for x in range(ord('A'), ord('Z')+1)]
print(uppercase_letters)
#----------------------------------------#
Question:
Create a list of even numbers squared and odd numbers cubed from 1 to 10

Sample Output

[1, 4, 27, 16, 125, 36, 343, 64, 729, 100]


Hints: 

Explication:
This Python code creates a list called result using a list comprehension to calculate either the square or the cube of numbers from 1 to 10 based on whether they are even or odd. Here's how the code works:

    result = [x**2 if x % 2 == 0 else x**3 for x in range(1, 11)] : This line of code initializes a variable named result and assigns it the result of a list comprehension.
        for x in range(1, 11): This part sets up a loop that iterates through numbers from 1 to 10 (inclusive). The range(1, 11) function generates a sequence of numbers starting from 1 and ending at 10.
        x**2 if x % 2 == 0 else x**3: For each value of x in the range, this expression calculates either the square (x**2) or the cube (x**3) of the number based on whether x is even (x % 2 == 0). If x is even, it calculates the square; otherwise, it calculates the cube.
        [x**2 if x % 2 == 0 else x**3 for x in range(1, 11)]: This is the list comprehension itself. It iterates through the numbers in the specified range (1 to 10) and, for each number, calculates either its square or cube based on whether it's even or odd. The results are collected into a new list.
    print(result): This line of code prints the result list to the console.


Solution:
result = [x**2 if x % 2 == 0 else x**3 for x in range(1, 11)]
print(result)
#----------------------------------------#
Question:
Generate a list of common multiples of 3 and 5 up to 100

Sample Output

[15, 30, 45, 60, 75, 90]


Hints: 

Explication:
This Python code creates a list called common_multiples using a list comprehension to find and store the numbers from 1 to 100 that are multiples of both 3 and 5. Here's how the code works:

    common_multiples = [x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0]: This line of code initializes a variable named common_multiples and assigns it the result of a list comprehension.
        for x in range(1, 101): This part sets up a loop that iterates through numbers from 1 to 100 (inclusive). The range(1, 101) function generates a sequence of numbers starting from 1 and ending at 100.
        if x % 3 == 0 and x % 5 == 0: This is a condition that checks whether the current value of x is a multiple of both 3 and 5. The % operator calculates the remainder when x is divided by 3 and 5. If the remainder is 0 for both divisions, it means x is a multiple of both 3 and 5.
        [x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0] : This is the list comprehension itself. It iterates through the numbers in the specified range (1 to 100) and, for each number that is a multiple of both 3 and 5, includes it in the new list.
    print(common_multiples): This line of code prints the common_multiples list to the console.


Solution:
common_multiples = [x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0]
print(common_multiples)
#----------------------------------------#
Question:
Create a list of reversed strings from another list

Sample Output

['apple', 'banana', 'cherry']

['elppa', 'ananab', 'yrrehc']


Hints: 

Explication:
This Python code takes a list of words, reverses each word in the list, and stores the reversed words in a new list called reversed_words. Here's how the code works:

    words = ["apple", "banana", "cherry"]: This line initializes a variable named words and assigns it a list containing three words: "apple," "banana," and "cherry."
    reversed_words = [word[::-1] for word in words]: This line of code initializes a variable named reversed_words and assigns it the result of a list comprehension.
        for word in words: This part sets up a loop that iterates through each word in the words list.
        word[::-1]: For each word in the list, this expression uses slicing ([::-1]) to reverse the characters in the word. The [::-1] slice notation reverses the order of characters in a string.
        [word[::-1] for word in words]: This is the list comprehension itself. It iterates through the words in the words list and, for each word, reverses it and includes the reversed word in the new list.
    print(words): This line of code prints the original words list to the console.
    print(reversed_words): This line of code prints the reversed_words list to the console.


Solution:
words = ["apple", "banana", "cherry"]
reversed_words = [word[::-1] for word in words]
print(words)
print(reversed_words)
#----------------------------------------#
Question:
Generate a list of prime numbers from 1 to 50

Sample Output

[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]


Hints: 

Explication:
The provided Python code defines a function is_prime(n) that checks whether a given integer n is a prime number or not. It then creates a list called prime_numbers using a list comprehension to find and store prime numbers between 1 and 50. Here's how the code works:

    def is_prime(n): This line defines a function named is_prime that takes an integer n as an argument.
        if n <= 1:: This line checks if n is less than or equal to 1. If n is 1 or less, it returns False, as 1 and any negative number are not prime.
        for i in range(2, int(n**0.5) + 1):: This line sets up a loop that iterates from 2 to the square root of n (inclusive) using the range() function. Checking up to the square root is an optimization to reduce the number of divisions needed to determine primality.
        if n % i == 0:: Inside the loop, this line checks if n is divisible by the current value of i. If it is, it means n is not prime, so the function returns False.
        If none of the conditions above are met, it means n is not divisible by any number in the range, so the function returns True, indicating that n is a prime number.
    prime_numbers = [x for x in range(1, 51) if is_prime(x)]: This line of code initializes a variable named prime_numbers and assigns it the result of a list comprehension.
        for x in range(1, 51): This part sets up a loop that iterates through numbers from 1 to 50 (inclusive). The range(1, 51) function generates a sequence of numbers starting from 1 and ending at 50.
        if is_prime(x): This condition checks if the current value of x is a prime number by calling the is_prime() function. If it is prime, it includes it in the prime_numbers list.
    print(prime_numbers): This line of code prints the prime_numbers list to the console.


Solution:
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
 
prime_numbers = [x for x in range(1, 51) if is_prime(x)]
print(prime_numbers)
#----------------------------------------#
Question:
Create a list of squares of even numbers and cubes of odd numbers from -5 to 5

Sample Output

[-125, 16, -27, 4, -1, 0, 1, 4, 27, 16, 125]


Hints: 

Explication:
This Python code creates a list called result using a list comprehension to calculate the square of even numbers and the cube of odd numbers in the range from -5 to 5. Here's how the code works:

    result = [x**2 if x % 2 == 0 else x**3 for x in range(-5, 6)] : This line of code initializes a variable named result and assigns it the result of a list comprehension.
        for x in range(-5, 6): This part sets up a loop that iterates through numbers from -5 to 5 (inclusive). The range(-5, 6) function generates a sequence of numbers starting from -5 and ending at 5.
        x**2 if x % 2 == 0 else x**3: For each value of x in the range, this expression calculates either the square (x**2) or the cube (x**3) of the number based on whether x is even (x % 2 == 0) or odd.
        [x**2 if x % 2 == 0 else x**3 for x in range(-5, 6)]: This is the list comprehension itself. It iterates through the numbers in the specified range (-5 to 5) and, for each number, calculates either its square or cube based on whether it's even or odd. The results are collected into a new list.
    print(result): This line of code prints the result list to the console.


Solution:
result = [x**2 if x % 2 == 0 else x**3 for x in range(-5, 6)]
print(result)
#----------------------------------------#
Question:
Generate a list of strings with their lengths from another list

Sample Output

['apple', 'banana', 'cherry']

[('apple', 5), ('banana', 6), ('cherry', 6)]


Hints: 

Explication:
This Python code creates a list called word_lengths using a list comprehension to pair each word from the words list with its corresponding length (number of characters). Here's how the code works:

    words = ["apple", "banana", "cherry"]: This line initializes a variable named words and assigns it a list containing three words: "apple," "banana," and "cherry."
    word_lengths = [(word, len(word)) for word in words]: This line of code initializes a variable named word_lengths and assigns it the result of a list comprehension.
        for word in words: This part sets up a loop that iterates through each word in the words list.
        (word, len(word)): For each word in the list, this expression creates a tuple containing two elements: the original word word and the length of the word len(word).
        [(word, len(word)) for word in words]: This is the list comprehension itself. It iterates through the words in the words list and, for each word, pairs it with its length and includes this pair (tuple) in the new list.
    print(words): This line of code prints the original words list to the console.
    print(word_lengths): This line of code prints the word_lengths list to the console.


Solution:
words = ["apple", "banana", "cherry"]
word_lengths = [(word, len(word)) for word in words]
print(words)
print(word_lengths)
#----------------------------------------#
Question:
Create a list of first characters from a list of words

Sample Output

['apple', 'banana', 'cherry']

['a', 'b', 'c']


Hints: 

Explication:
This Python code creates a list called first_chars using a list comprehension to extract the first character of each word from the words list. Here's how the code works:

    words = ["apple", "banana", "cherry"]: This line initializes a variable named words and assigns it a list containing three words: "apple," "banana," and "cherry."
    first_chars = [word[0] for word in words]: This line of code initializes a variable named first_chars and assigns it the result of a list comprehension.
        for word in words: This part sets up a loop that iterates through each word in the words list.
        word[0]: For each word in the list, this expression retrieves the first character of the word using indexing [0]. This indexing extracts the character at position 0 in the string, which is the first character.
        [word[0] for word in words]: This is the list comprehension itself. It iterates through the words in the words list and, for each word, extracts its first character and includes it in the new list.
    print(words): This line of code prints the original words list to the console.
    print(first_chars): This line of code prints the first_chars list to the console.


Solution:
words = ["apple", "banana", "cherry"]
first_chars = [word[0] for word in words]
print(words)
print(first_chars)
#----------------------------------------#
Question:
Generate a list of numbers with their squares if the number is even

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

[4, 16, 36, 64, 100]


Hints: 

Explication:
This Python code creates a list called squared_evens using a list comprehension to calculate the square of even numbers from the numbers list. Here's how the code works:

    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: This line initializes a variable named numbers and assigns it a list containing numbers from 1 to 10.
    squared_evens = [x**2 for x in numbers if x % 2 == 0]: This line of code initializes a variable named squared_evens and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number in the numbers list.
        if x % 2 == 0: This condition checks whether the current number x is even. If it is even (i.e., its remainder when divided by 2 is 0), it proceeds to the next part.
        x**2: For each even number, this expression calculates its square (x**2).
        [x**2 for x in numbers if x % 2 == 0]: This is the list comprehension itself. It iterates through the numbers in the numbers list and, for each even number, calculates its square and includes it in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(squared_evens): This line of code prints the squared_evens list to the console.


Solution:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
squared_evens = [x**2 for x in numbers if x % 2 == 0]
print(numbers)
print(squared_evens)
#----------------------------------------#
Question:
Create a list of uppercase words from a sentence

Sample Output

This is a sample sentence.

['THIS', 'IS', 'A', 'SAMPLE', 'SENTENCE.']


Hints: 

Explication:
This Python code takes a sentence, splits it into words, and converts each word to uppercase using a list comprehension. Here's how the code works:

    sentence = "This is a sample sentence.": This line initializes a variable named sentence and assigns it the value "This is a sample sentence."
    uppercase_words = [word.upper() for word in sentence.split()]: This line of code initializes a variable named uppercase_words and assigns it the result of a list comprehension.
        sentence.split(): This part of the code splits the sentence into a list of words. By default, it splits the sentence on whitespace, so it separates the words.
        for word in sentence.split(): This part sets up a loop that iterates through each word in the list of words.
        word.upper(): For each word in the list, this expression converts it to uppercase using the .upper() method. This method changes all the characters in the string to uppercase.
        [word.upper() for word in sentence.split()]: This is the list comprehension itself. It iterates through the list of words, converts each word to uppercase, and includes the uppercase word in the new list.
    print(sentence): This line of code prints the original sentence to the console.
    print(uppercase_words): This line of code prints the uppercase_words list to the console.


Solution:
sentence = "This is a sample sentence."
uppercase_words = [word.upper() for word in sentence.split()]
print(sentence)
print(uppercase_words)
#----------------------------------------#
Question:
Generate a list of strings with vowels removed

Sample Output

['apple', 'banana', 'cherry']

['ppl', 'bnn', 'chrry']


Hints: 

Explication:
This Python code takes a list of strings, removes vowels from each string, and stores the modified strings in a new list called no_vowels. Here's how the code works:

    strings = ["apple", "banana", "cherry"]: This line initializes a variable named strings and assigns it a list containing three words: "apple," "banana," and "cherry."
    no_vowels = [''.join([char for char in word if char.lower() not in 'aeiou']) for word in strings]: This line of code initializes a variable named no_vowels and assigns it the result of a list comprehension.
        for word in strings: This part sets up a loop that iterates through each word in the strings list.
        for char in word if char.lower() not in 'aeiou': This inner loop iterates through each character (char) in the current word, but only if the lowercase version of char is not in the string 'aeiou' (i.e., it filters out vowels). The .lower() method is used to handle both uppercase and lowercase vowels.
        ''.join(...): This part joins the filtered characters back together to form a modified word with vowels removed. ''.join(...) is used to concatenate the characters without any spaces or separators.
        [''.join([char for char in word if char.lower() not in 'aeiou']) for word in strings]: This is the list comprehension itself. It iterates through the words in the strings list, removes vowels from each word, and includes the modified words in the new list.
    print(strings): This line of code prints the original strings list to the console.
    print(no_vowels): This line of code prints the no_vowels list to the console.


Solution:
strings = ["apple", "banana", "cherry"]
no_vowels = [''.join([char for char in word if char.lower() not in 'aeiou']) for word in strings]
print(strings)
print(no_vowels)
#----------------------------------------#
Question:
Create a list of numbers that are divisible by both 3 and 5 from 1 to 100

Sample Output

[15, 30, 45, 60, 75, 90]


Hints: 

Explication:
This Python code creates a list called divisible_by_3_and_5 using a list comprehension to find and store the numbers between 1 and 100 that are divisible by both 3 and 5. Here's how the code works:

    divisible_by_3_and_5 = [x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0]: This line of code initializes a variable named divisible_by_3_and_5 and assigns it the result of a list comprehension.
        for x in range(1, 101): This part sets up a loop that iterates through numbers from 1 to 100 (inclusive). The range(1, 101) function generates a sequence of numbers starting from 1 and ending at 100.
        if x % 3 == 0 and x % 5 == 0: This is a condition that checks whether the current value of x is divisible by both 3 and 5. The % operator calculates the remainder when x is divided by 3 and 5. If the remainder is 0 for both divisions, it means x is divisible by both 3 and 5.
        [x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0] : This is the list comprehension itself. It iterates through the numbers in the specified range (1 to 100) and, for each number that is divisible by both 3 and 5, includes it in the new list.
    print(divisible_by_3_and_5): This line of code prints the divisible_by_3_and_5 list to the console.


Solution:
divisible_by_3_and_5 = [x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0]
print(divisible_by_3_and_5)
#----------------------------------------#
Question:
Generate a list of numbers with their signs reversed

Sample Output

[-2, 3, -5, 7, -11]

[2, -3, 5, -7, 11]


Hints: 

Explication:
This Python code takes a list of numbers, negates each number (changes its sign to the opposite), and stores the negated numbers in a new list called opposite_signs. Here's how the code works:

    numbers = [-2, 3, -5, 7, -11]: This line initializes a variable named numbers and assigns it a list containing five numbers, some of which are negative.
    opposite_signs = [-x for x in numbers]: This line of code initializes a variable named opposite_signs and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number x in the numbers list.
        -x: For each number in the list, this expression negates it by putting a minus sign in front of it. This effectively changes the sign of each number to the opposite.
        [-x for x in numbers]: This is the list comprehension itself. It iterates through the numbers in the numbers list and, for each number, negates it and includes the negated number in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(opposite_signs): This line of code prints the opposite_signs list to the console.


Solution:
numbers = [-2, 3, -5, 7, -11]
opposite_signs = [-x for x in numbers]
print(numbers)
print(opposite_signs)
#----------------------------------------#
Question:
Create a list of words with their lengths from a sentence

Sample Output

This is a sample sentence.

[('This', 4), ('is', 2), ('a', 1), ('sample', 6), ('sentence.', 9)]


Hints: 

Explication:
This Python code takes a sentence, splits it into words, and pairs each word with its corresponding length (number of characters). It then stores these pairs in a new list called word_lengths. Here's how the code works:

    sentence = "This is a sample sentence.": This line initializes a variable named sentence and assigns it the value "This is a sample sentence."
    word_lengths = [(word, len(word)) for word in sentence.split()]: This line of code initializes a variable named word_lengths and assigns it the result of a list comprehension.
        sentence.split(): This part of the code splits the sentence into a list of words. By default, it splits the sentence on whitespace, so it separates the words.
        for word in sentence.split(): This part sets up a loop that iterates through each word in the list of words.
        (word, len(word)): For each word in the list, this expression creates a tuple containing two elements: the original word word and the length of the word len(word) .
        [(word, len(word)) for word in sentence.split()]: This is the list comprehension itself. It iterates through the words in the sentence list, pairs each word with its length, and includes these pairs (tuples) in the new list.
    print(sentence): This line of code prints the original sentence to the console.
    print(word_lengths): This line of code prints the word_lengths list to the console.


Solution:
sentence = "This is a sample sentence."
word_lengths = [(word, len(word)) for word in sentence.split()]
print(sentence)
print(word_lengths)
#----------------------------------------#
Question:
Generate a list of positive numbers from another list

Sample Output

[1, -2, 3, -4, 5, -6]

[1, 3, 5]


Hints: 

Explication:
This Python code takes a list of numbers, filters out the positive numbers, and stores them in a new list called positive_numbers. Here's how the code works:

    numbers = [1, -2, 3, -4, 5, -6]: This line initializes a variable named numbers and assigns it a list containing six numbers, some of which are negative.
    positive_numbers = [x for x in numbers if x > 0]: This line of code initializes a variable named positive_numbers and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number x in the numbers list.
        if x > 0: This condition checks whether the current number x is greater than 0. If x is positive, it proceeds to the next part.
        [x for x in numbers if x > 0]: This is the list comprehension itself. It iterates through the numbers in the numbers list and, for each positive number, includes it in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(positive_numbers): This line of code prints the positive_numbers list to the console.


Solution:
numbers = [1, -2, 3, -4, 5, -6]
positive_numbers = [x for x in numbers if x > 0]
print(numbers)
print(positive_numbers)
#----------------------------------------#
Question:
Generate a list of numbers that are perfect squares from 1 to 100

Sample Output

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


Hints: 

Explication:
This Python code creates a list called perfect_squares using a list comprehension to find and store perfect square numbers between 1 and 100. Here's how the code works:

    perfect_squares = [x for x in range(1, 101) if int(x**0.5)**2 == x] : This line of code initializes a variable named perfect_squares and assigns it the result of a list comprehension.
        for x in range(1, 101): This part sets up a loop that iterates through numbers from 1 to 100 (inclusive). The range(1, 101) function generates a sequence of numbers starting from 1 and ending at 100.
        if int(x**0.5)**2 == x: This is a condition that checks whether the current value of x is a perfect square. To determine if x is a perfect square, it calculates the square root of x using x**0.5, rounds it down to the nearest integer using int(), squares the result, and compares it to the original x. If they are equal, it means x is a perfect square.
        [x for x in range(1, 101) if int(x**0.5)**2 == x]: This is the list comprehension itself. It iterates through the numbers in the specified range (1 to 100) and, for each number that is a perfect square, includes it in the new list.
    print(perfect_squares): This line of code prints the perfect_squares list to the console.


Solution:
perfect_squares = [x for x in range(1, 101) if int(x**0.5)**2 == x]
print(perfect_squares)
#----------------------------------------#
Question:
Create a list of numbers with their absolute values

Sample Output

[-2, 3, -5, 7, -11]

[2, 3, 5, 7, 11]


Hints: 

Explication:
This Python code takes a list of numbers, calculates their absolute values, and stores the absolute values in a new list called absolute_values. Here's how the code works:

    numbers = [-2, 3, -5, 7, -11]: This line initializes a variable named numbers and assigns it a list containing five numbers, some of which are negative.
    absolute_values = [abs(x) for x in numbers]: This line of code initializes a variable named absolute_values and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number x in the numbers list.
        abs(x): For each number in the list, this expression calculates its absolute value using the abs() function. The abs() function returns the magnitude (positive value) of a number, effectively removing the negative sign if the number is negative.
        [abs(x) for x in numbers]: This is the list comprehension itself. It iterates through the numbers in the numbers list and, for each number, calculates its absolute value and includes it in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(absolute_values): This line of code prints the absolute_values list to the console.


Solution:
numbers = [-2, 3, -5, 7, -11]
absolute_values = [abs(x) for x in numbers]
print(numbers)
print(absolute_values)
#----------------------------------------#
Question:
Generate a list of uppercase letters using ASCII values

Sample Output

['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']


Hints: 

Explication:
This Python code generates a list called uppercase_letters using a list comprehension to create uppercase letters of the English alphabet. It does this by using the chr() function to convert ASCII values to characters. Here's how the code works:

    uppercase_letters = [chr(code) for code in range(65, 91)]: This line initializes a variable named uppercase_letters and assigns it the result of a list comprehension.
        for code in range(65, 91): This part sets up a loop that iterates through ASCII values ranging from 65 to 90 (inclusive). In the ASCII table, these values correspond to uppercase letters 'A' to 'Z'.
        chr(code): For each ASCII value in the specified range, this expression uses the chr() function to convert it into the corresponding character. chr() takes an ASCII value as input and returns the character associated with that value.
        [chr(code) for code in range(65, 91)]: This is the list comprehension itself. It iterates through the ASCII values for uppercase letters and includes the corresponding characters in the new list.
    print(uppercase_letters): This line of code prints the uppercase_letters list to the console.


Solution:
uppercase_letters = [chr(code) for code in range(65, 91)]
print(uppercase_letters)
#----------------------------------------#
Question:
Create a list of words with their lengths greater than 3 from a sentence

Sample Output

This is a sample sentence.

['This', 'sample', 'sentence.']


Hints: 

Explication:
This Python code takes a sentence, splits it into words, and creates a new list called long_words containing only words with more than 3 characters. Here's how the code works:

    sentence = "This is a sample sentence.": This line initializes a variable named sentence and assigns it the value "This is a sample sentence."
    long_words = [word for word in sentence.split() if len(word) > 3] : This line of code initializes a variable named long_words and assigns it the result of a list comprehension.
        sentence.split(): This part of the code splits the sentence into a list of words. By default, it splits the sentence on whitespace, so it separates the words.
        for word in sentence.split(): This part sets up a loop that iterates through each word in the list of words.
        if len(word) > 3: This is a condition that checks whether the length (number of characters) of the current word word is greater than 3.
        [word for word in sentence.split() if len(word) > 3]: This is the list comprehension itself. It iterates through the words in the sentence list, includes only those words with a length greater than 3, and includes them in the new list.
    print(sentence): This line of code prints the original sentence to the console.
    print(long_words): This line of code prints the long_words list to the console.


Solution:
sentence = "This is a sample sentence."
long_words = [word for word in sentence.split() if len(word) > 3]
print(sentence)
print(long_words)
#----------------------------------------#
Question:
Generate a list of squares of even numbers from 1 to 20

Sample Output

[4, 16, 36, 64, 100, 144, 196, 256, 324, 400]


Hints: 

Explication:
This Python code creates a list called even_squares using a list comprehension to calculate the square of even numbers from 2 to 20. Here's how the code works:

    even_squares = [x**2 for x in range(2, 21, 2)]: This line of code initializes a variable named even_squares and assigns it the result of a list comprehension.
        for x in range(2, 21, 2): This part sets up a loop that iterates through even numbers from 2 to 20 (inclusive). The range(2, 21, 2) function generates a sequence of even numbers starting from 2 and ending at 20, with a step size of 2.
        x**2: For each even number, this expression calculates its square (x**2).
        [x**2 for x in range(2, 21, 2)]: This is the list comprehension itself. It iterates through the even numbers in the specified range and, for each even number, calculates its square and includes it in the new list.
    print(even_squares): This line of code prints the even_squares list to the console.


Solution:
even_squares = [x**2 for x in range(2, 21, 2)]
print(even_squares)
#----------------------------------------#
Question:
Create a list of characters and their ASCII values

Sample Output

Hello, world!

[('H', 72), ('e', 101), ('l', 108), ('l', 108), ('o', 111), (',', 44), (' ', 32), ('w', 119), ('o', 111), ('r', 114), ('l', 108), ('d', 100), ('!', 33)]


Hints: 

Explication:
This Python code takes a string, iterates through its characters, and pairs each character with its ASCII value using a list comprehension. Here's how the code works:

    string = "Hello, world!": This line initializes a variable named string and assigns it the value "Hello, world!".
    char_ascii = [(char, ord(char)) for char in string]: This line of code initializes a variable named char_ascii and assigns it the result of a list comprehension.
        for char in string: This part sets up a loop that iterates through each character char in the string.
        (char, ord(char)): For each character in the string, this expression creates a tuple containing two elements: the original character char and its ASCII value obtained using the ord() function. The ord() function takes a character as input and returns its corresponding ASCII value.
        [(char, ord(char)) for char in string]: This is the list comprehension itself. It iterates through the characters in the string, pairs each character with its ASCII value, and includes these pairs (tuples) in the new list.
    print(string): This line of code prints the original string to the console.
    print(char_ascii): This line of code prints the char_ascii list to the console.


Solution:
string = "Hello, world!"
char_ascii = [(char, ord(char)) for char in string]
print(string)
print(char_ascii)
#----------------------------------------#
Question:
Generate a list of tuples containing two numbers whose sum is even

Sample Output

[(1, 1), (1, 3), (1, 5), (1, 7), (1, 9), (2, 2), (2, 4), (2, 6), (2, 8), (2, 10), (3, 1), (3, 3), (3, 5), (3, 7), (3, 9), (4, 2), (4, 4), (4, 6), (4, 8), (4, 10), (5, 1), (5, 3), (5, 5), (5, 7), (5, 9), (6, 2), (6, 4), (6, 6), (6, 8), (6, 10), (7, 1), (7, 3), (7, 5), (7, 7), (7, 9), (8, 2), (8, 4), (8, 6), (8, 8), (8, 10), (9, 1), (9, 3), (9, 5), (9, 7), (9, 9), (10, 2), (10, 4), (10, 6), (10, 8), (10, 10)]


Hints: 

Explication:
This Python code creates a list called even_sum_tuples using a nested list comprehension to generate tuples of pairs of numbers between 1 and 10 whose sum is even. Here's how the code works:

    even_sum_tuples = [(x, y) for x in range(1, 11) for y in range(1, 11) if (x + y) % 2 == 0]: This line of code initializes a variable named even_sum_tuples and assigns it the result of a list comprehension.
        for x in range(1, 11): This part of the code sets up the outer loop, which iterates through numbers from 1 to 10 (inclusive). It generates values for x.
        for y in range(1, 11): This part sets up the inner loop, which also iterates through numbers from 1 to 10 (inclusive). It generates values for y.
        if (x + y) % 2 == 0: This is a condition that checks whether the sum of x and y is even. If the sum is even (i.e., the remainder when divided by 2 is 0), it proceeds to the next part.
        [(x, y) for x in range(1, 11) for y in range(1, 11) if (x + y) % 2 == 0]: This is the list comprehension itself. It iterates through all possible pairs of numbers (x, y) from 1 to 10 and includes pairs in the new list where the sum of x and y is even.
    print(even_sum_tuples): This line of code prints the even_sum_tuples list to the console.


Solution:
even_sum_tuples = [(x, y) for x in range(1, 11) for y in range(1, 11) if (x + y) % 2 == 0]
print(even_sum_tuples)
#----------------------------------------#
Question:
Generate a list of pairs of numbers where the sum of each pair is prime

Sample Output

[(1, 1), (1, 2), (1, 4), (1, 6), (1, 10), (2, 1), (2, 3), (2, 5), (2, 9), (3, 2), (3, 4), (3, 8), (3, 10), (4, 1), (4, 3), (4, 7), (4, 9), (5, 2), (5, 6), (5, 8), (6, 1), (6, 5), (6, 7), (7, 4), (7, 6), (7, 10), (8, 3), (8, 5), (8, 9), (9, 2), (9, 4), (9, 8), (9, 10), (10, 1), (10, 3), (10, 7), (10, 9)]


Hints: 

Explication:
This Python code defines a function is_prime(n) to check if a given number n is prime or not. Then, it creates a list called prime_sum_pairs using a nested list comprehension to generate pairs of numbers between 1 and 10 such that their sum is a prime number. Here's how the code works:

    def is_prime(n): This line defines a function named is_prime that takes an integer n as input and returns True if n is prime and False otherwise. The function first checks if n is less than or equal to 1 and returns False in such cases. It then iterates through numbers from 2 to the square root of n and checks if n is divisible by any of those numbers. If it finds a divisor, it returns False. If no divisors are found, it returns True, indicating that n is prime.
    prime_sum_pairs = [(x, y) for x in range(1, 11) for y in range(1, 11) if is_prime(x + y)]: This line of code initializes a variable named prime_sum_pairs and assigns it the result of a nested list comprehension.
        for x in range(1, 11): This part of the code sets up the outer loop, which iterates through numbers from 1 to 10 (inclusive). It generates values for x.
        for y in range(1, 11): This part sets up the inner loop, which also iterates through numbers from 1 to 10 (inclusive). It generates values for y.
        if is_prime(x + y): This is a condition that checks whether the sum of x and y is prime by calling the is_prime function with x + y as an argument.
        [(x, y) for x in range(1, 11) for y in range(1, 11) if is_prime(x + y)]: This is the nested list comprehension itself. It iterates through all possible pairs of numbers (x, y) from 1 to 10 and includes pairs in the new list where the sum of x and y is prime.
    print(prime_sum_pairs): This line of code prints the prime_sum_pairs list to the console.


Solution:
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
 
prime_sum_pairs = [(x, y) for x in range(1, 11) for y in range(1, 11) if is_prime(x + y)]
 
print(prime_sum_pairs)
#----------------------------------------#
Question:
Create a list of strings with uppercase first letters

Sample Output

['apple', 'banana', 'cherry']

['Apple', 'Banana', 'Cherry']


Hints: 

Explication:
This Python code takes a list of strings, capitalizes the first letter of each word in each string, and stores the capitalized words in a new list called capitalized_words. Here's how the code works:

    strings = ["apple", "banana", "cherry"]: This line initializes a variable named strings and assigns it a list containing three strings.
    capitalized_words = [word.capitalize() for word in strings]: This line of code initializes a variable named capitalized_words and assigns it the result of a list comprehension.
        for word in strings: This part sets up a loop that iterates through each string word in the strings list.
        word.capitalize(): For each string in the list, this expression uses the capitalize() method to capitalize the first letter of the string. The capitalize() method makes the first character of the string uppercase while making all other characters in the string lowercase.
        [word.capitalize() for word in strings]: This is the list comprehension itself. It iterates through the strings in the strings list, capitalizes the first letter of each word in each string, and includes the capitalized words in the new list.
    print(strings): This line of code prints the original strings list to the console.
    print(capitalized_words): This line of code prints the capitalized_words list to the console.


Solution:
strings = ["apple", "banana", "cherry"]
capitalized_words = [word.capitalize() for word in strings]
print(strings)
print(capitalized_words)
#----------------------------------------#
Question:
Generate a list of tuples containing numbers and their squares

Sample Output

[(1, 1), (2, 4), (3, 9), (4, 16), (5, 25), (6, 36), (7, 49), (8, 64), (9, 81), (10, 100)]


Hints: 

Explication:
This Python code creates a list called num_squares using a list comprehension to generate pairs of numbers and their squares. Here's how the code works:

    num_squares = [(x, x**2) for x in range(1, 11)]: This line of code initializes a variable named num_squares and assigns it the result of a list comprehension.
        for x in range(1, 11): This part sets up a loop that iterates through numbers from 1 to 10 (inclusive). It generates values for x.
        (x, x**2): For each value of x, this expression creates a tuple containing two elements: the original value x and its square, calculated as x**2.
        [(x, x**2) for x in range(1, 11)]: This is the list comprehension itself. It iterates through the numbers in the specified range (1 to 10) and pairs each number with its square, including these pairs (tuples) in the new list.
    print(num_squares): This line of code prints the num_squares list to the console.


Solution:
num_squares = [(x, x**2) for x in range(1, 11)]
print(num_squares)
#----------------------------------------#
Question:
Create a list of numbers where each number is doubled

Sample Output

[1, 2, 3, 4, 5]

[2, 4, 6, 8, 10]


Hints: 

Explication:
This Python code takes a list of numbers, multiplies each number by 2, and stores the doubled numbers in a new list called doubled_numbers. Here's how the code works:

    numbers = [1, 2, 3, 4, 5]: This line initializes a variable named numbers and assigns it a list containing five numbers.
    doubled_numbers = [x * 2 for x in numbers]: This line of code initializes a variable named doubled_numbers and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number x in the numbers list.
        x * 2: For each number in the list, this expression calculates its double by multiplying x by 2.
        [x * 2 for x in numbers]: This is the list comprehension itself. It iterates through the numbers in the numbers list, doubles each number, and includes the doubled numbers in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(doubled_numbers): This line of code prints the doubled_numbers list to the console.


Solution:
numbers = [1, 2, 3, 4, 5]
doubled_numbers = [x * 2 for x in numbers]
print(numbers)
print(doubled_numbers)
#----------------------------------------#
Question:
Create a list of characters that are not alphanumeric from a string

Sample Output

Hello, world!

[',', ' ', '!']


Hints: 

Explication:
This Python code takes a string, iterates through its characters, and creates a new list called non_alphanumeric containing characters that are not alphanumeric (neither letters nor numbers). Here's how the code works:

    string = "Hello, world!": This line initializes a variable named string and assigns it the value "Hello, world!".
    non_alphanumeric = [char for char in string if not char.isalnum()]: This line of code initializes a variable named non_alphanumeric and assigns it the result of a list comprehension.
        for char in string: This part sets up a loop that iterates through each character char in the string.
        if not char.isalnum(): This is a condition that checks whether the current character char is not alphanumeric. The char.isalnum() method returns True if char is an alphanumeric character (a letter or a number) and False otherwise. The not keyword negates this condition, so it selects characters that are not alphanumeric.
        [char for char in string if not char.isalnum()]: This is the list comprehension itself. It iterates through the characters in the string, includes only those characters that are not alphanumeric, and includes them in the new list.
    print(string): This line of code prints the original string to the console.
    print(non_alphanumeric): This line of code prints the non_alphanumeric list to the console.


Solution:
string = "Hello, world!"
non_alphanumeric = [char for char in string if not char.isalnum()]
print(string)
print(non_alphanumeric)
#----------------------------------------#
Question:
Generate a list of numbers that are powers of 2 from 1 to 10

Sample Output

[2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]


Hints: 

Explication:
This Python code generates a list called powers_of_2 using a list comprehension to calculate the powers of 2 from 2^1 to 2^10. Here's how the code works:

    powers_of_2 = [2**x for x in range(1, 11)]: This line of code initializes a variable named powers_of_2 and assigns it the result of a list comprehension.
        for x in range(1, 11): This part sets up a loop that iterates through numbers from 1 to 10 (inclusive). It generates values for x.
        2**x: For each value of x, this expression calculates 2 raised to the power of x, which is equivalent to 2^x.
        [2**x for x in range(1, 11)]: This is the list comprehension itself. It iterates through the values of x in the specified range (1 to 10) and calculates 2^x for each value, including the results in the new list.
    print(powers_of_2): This line of code prints the powers_of_2 list to the console.


Solution:
powers_of_2 = [2**x for x in range(1, 11)]
print(powers_of_2)
#----------------------------------------#
Question:
Create a list of strings with characters in uppercase

Sample Output

['apple', 'banana', 'cherry']

['APPLE', 'BANANA', 'CHERRY']


Hints: 

Explication:
This Python code takes a list of strings and creates a new list called uppercase_strings using a list comprehension. The new list contains the same words, but each word is converted to uppercase using the upper() method. Here's how the code works:

    strings = ["apple", "banana", "cherry"]: This line initializes a variable named strings and assigns it a list containing three strings.
    uppercase_strings = [word.upper() for word in strings]: This line of code initializes a variable named uppercase_strings and assigns it the result of a list comprehension.
        for word in strings: This part sets up a loop that iterates through each string word in the strings list.
        word.upper(): For each string in the list, this expression uses the upper() method to convert the entire string to uppercase. The upper() method changes all lowercase characters in the string to their uppercase equivalents.
        [word.upper() for word in strings]: This is the list comprehension itself. It iterates through the strings in the strings list, converts each string to uppercase, and includes the uppercase strings in the new list.
    print(strings): This line of code prints the original strings list to the console.
    print(uppercase_strings): This line of code prints the uppercase_strings list to the console.


Solution:
strings = ["apple", "banana", "cherry"]
uppercase_strings = [word.upper() for word in strings]
print(strings)
print(uppercase_strings)
#----------------------------------------#
Question:
Generate a list of tuples containing even and odd numbers from 1 to 10

Sample Output

[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]


Hints: 

Explication:
This Python code creates a list called even_odd_pairs using a list comprehension to generate pairs of consecutive numbers where one is even and the other is odd. Here's how the code works:

    even_odd_pairs = [(x, x + 1) for x in range(1, 11, 2)]: This line of code initializes a variable named even_odd_pairs and assigns it the result of a list comprehension.
        for x in range(1, 11, 2): This part sets up a loop that iterates through odd numbers from 1 to 10 (inclusive) with a step size of 2. It generates values for x.
        (x, x + 1): For each odd number x, this expression creates a tuple containing two elements: the original odd number x and the next consecutive number x + 1.
        [(x, x + 1) for x in range(1, 11, 2)]: This is the list comprehension itself. It iterates through the odd numbers in the specified range (1 to 10) and pairs each odd number with its consecutive even number, including these pairs (tuples) in the new list.
    print(even_odd_pairs): This line of code prints the even_odd_pairs list to the console.


Solution:
even_odd_pairs = [(x, x + 1) for x in range(1, 11, 2)]
print(even_odd_pairs)
#----------------------------------------#
Question:
Create a list of words with their lengths from another list

Sample Output

['apple', 'banana', 'cherry']

[5, 6, 6]


Hints: 

Explication:
This Python code takes a list of words and creates a new list called word_lengths using a list comprehension. The new list contains the lengths of the words in the original list. Here's how the code works:

    words = ["apple", "banana", "cherry"]: This line initializes a variable named words and assigns it a list containing three words.
    word_lengths = [len(word) for word in words]: This line of code initializes a variable named word_lengths and assigns it the result of a list comprehension.
        for word in words: This part sets up a loop that iterates through each word word in the words list.
        len(word): For each word in the list, this expression calculates the length of the word using the len() function. The len() function returns the number of characters (letters) in a string.
        [len(word) for word in words]: This is the list comprehension itself. It iterates through the words in the words list, calculates the length of each word, and includes these lengths in the new list.
    print(words): This line of code prints the original words list to the console.
    print(word_lengths): This line of code prints the word_lengths list to the console.


Solution:
words = ["apple", "banana", "cherry"]
word_lengths = [len(word) for word in words]
print(words)
print(word_lengths)
#----------------------------------------#
Question:
Generate a list of tuples containing numbers and their signs

Sample Output

[-2, 3, -5, 7, -11]

[(-2, 'negative'), (3, 'positive'), (-5, 'negative'), (7, 'positive'), (-11, 'negative')]


Hints: 

Explication:
This Python code takes a list of numbers and creates a new list called num_signs using a list comprehension. The new list contains pairs of numbers and their associated sign ('positive' or 'negative') based on whether the number is greater than zero or not. Here's how the code works:

    numbers = [-2, 3, -5, 7, -11]: This line initializes a variable named numbers and assigns it a list containing five numbers, some of which are negative.
    num_signs = [(x, 'positive') if x > 0 else (x, 'negative') for x in numbers]: This line of code initializes a variable named num_signs and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number x in the numbers list.
        (x, 'positive') if x > 0 else (x, 'negative'): For each number in the list, this expression checks if x is greater than 0. If x is greater than 0, it creates a tuple containing the number x and the string 'positive'. If x is not greater than 0 (i.e., it's zero or negative), it creates a tuple containing the number x and the string 'negative'.
        [(x, 'positive') if x > 0 else (x, 'negative') for x in numbers] : This is the list comprehension itself. It iterates through the numbers in the numbers list, determines the sign of each number, and pairs each number with its associated sign, including these pairs (tuples) in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(num_signs): This line of code prints the num_signs list to the console.


Solution:
numbers = [-2, 3, -5, 7, -11]
num_signs = [(x, 'positive') if x > 0 else (x, 'negative') for x in numbers]
print(numbers)
print(num_signs)
#----------------------------------------#
Question:
Create a list of strings with vowels replaced by asterisks

Sample Output

['apple', 'banana', 'cherry']

['*ppl*', 'b*n*n*', 'ch*rry']


Hints: 

ExplThis Python code takes a list of strings and creates a new list called vowel_replaced using a list comprehension. The new list contains the same words as the original list, but with vowels replaced by asterisks ('*'). Here's how the code works:

    strings = ["apple", "banana", "cherry"]: This line initializes a variable named strings and assigns it a list containing three words.
    vowel_replaced = [''.join(['*' if char.lower() in 'aeiou' else char for char in word]) for word in strings]: This line of code initializes a variable named vowel_replaced and assigns it the result of a nested list comprehension.
        for word in strings: This part sets up an outer loop that iterates through each word word in the strings list.
        [ '*' if char.lower() in 'aeiou' else char for char in word] : For each word in the list, this inner list comprehension sets up an inner loop that iterates through each character char in the word
            ' *' if char.lower() in 'aeiou' else char: For each character in the word, this expression checks if char (converted to lowercase) is a vowel (i.e., it checks if it's in the string 'aeiou'). If char is a vowel, it replaces it with an asterisk ('*'), otherwise, it keeps the character as is.
        ''.join(['*' if char.lower() in 'aeiou' else char for char in word]): This expression joins the characters in the inner list (either vowels replaced with '*', or the original characters) back together to form a new word.
        [''.join(['*' if char.lower() in 'aeiou' else char for char in word]) for word in strings]: This is the outer list comprehension itself. It iterates through the words in the strings list, processes each word by replacing vowels with asterisks, and includes the processed words in the new list.
    print(strings): This line of code prints the original strings list to the console.
    print(vowel_replaced): This line of code prints the vowel_replaced list to the console.


Solution:
strings = ["apple", "banana", "cherry"]
vowel_replaced = [''.join(['*' if char.lower() in 'aeiou' else char for char in word]) for word in strings]
print(strings)
print(vowel_replaced)
#----------------------------------------#
Question:
Generate a list of strings with their first letters removed

Sample Output

['apple', 'banana', 'cherry']

['pple', 'anana', 'herry']


Hints: 

Explication:
This Python code takes a list of strings and creates a new list called without_first_letters using a list comprehension. The new list contains the same words as the original list, but with their first letters removed. Here's how the code works:

    strings = ["apple", "banana", "cherry"]: This line initializes a variable named strings and assigns it a list containing three words.
    without_first_letters = [word[1:] for word in strings]: This line of code initializes a variable named without_first_letters and assigns it the result of a list comprehension.
        for word in strings: This part sets up a loop that iterates through each word word in the strings list.
        word[1:]: For each word in the list, this expression slices the word starting from the second character (index 1) and includes all characters after the first one.
        [word[1:] for word in strings]: This is the list comprehension itself. It iterates through the words in the strings list, removes the first letter from each word, and includes the modified words in the new list.
    print(strings): This line of code prints the original strings list to the console.
    print(without_first_letters): This line of code prints the without_first_letters list to the console.


Solution:
strings = ["apple", "banana", "cherry"]
without_first_letters = [word[1:] for word in strings]
print(strings)
print(without_first_letters)
#----------------------------------------#
Question:
Create a list of numbers with their reciprocal values

Sample Output

[2, 3, 4, 5, 6]

[0.5, 0.3333333333333333, 0.25, 0.2, 0.16666666666666666]


Hints: 

Explication:
This Python code takes a list of numbers and creates a new list called reciprocal_values using a list comprehension. The new list contains the reciprocal (inverse) values of the numbers in the original list. Here's how the code works:

    numbers = [2, 3, 4, 5, 6]: This line initializes a variable named numbers and assigns it a list containing five numbers.
    reciprocal_values = [1/x for x in numbers]: This line of code initializes a variable named reciprocal_values and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number x in the numbers list.
        1/x: For each number in the list, this expression calculates the reciprocal (inverse) value by dividing 1 by x.
        [1/x for x in numbers]: This is the list comprehension itself. It iterates through the numbers in the numbers list, calculates the reciprocal value for each number, and includes these reciprocal values in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(reciprocal_values): This line of code prints the reciprocal_values list to the console.


Solution:
numbers = [2, 3, 4, 5, 6]
reciprocal_values = [1/x for x in numbers]
print(numbers)
print(reciprocal_values)
#----------------------------------------#
Question:
Generate a list of tuples containing numbers and their squares if the number is prime

Sample Output

[(2, 4), (3, 9), (5, 25), (7, 49)]


Hints: 

Explication:
This Python code defines a function is_prime(n) that checks whether a given number n is prime or not. Then, it uses a list comprehension to generate pairs of prime numbers and their squares within a specified range. Here's how the code works:

    def is_prime(n): This line defines a function named is_prime that takes a single argument n and returns True if n is prime and False otherwise.
        if n <= 1:: This line checks if n is less than or equal to 1. If it is, the function immediately returns False because 1 and all negative numbers are not prime by definition.
        for i in range(2, int(n**0.5) + 1): This line sets up a loop that iterates through the numbers from 2 up to the square root of n (inclusive).
        if n % i == 0:: Inside the loop, it checks if n is divisible by i (i.e., if n modulo i equals 0). If it is, the function immediately returns False because n is not prime if it has a divisor other than 1 and itself.
        If the loop completes without finding any divisors other than 1 and n, the function returns True, indicating that n is prime.
    prime_num_squares = [(x, x**2) for x in range(1, 11) if is_prime(x)] : This line of code initializes a variable named prime_num_squares and assigns it the result of a list comprehension.
        for x in range(1, 11): This part sets up a loop that iterates through numbers from 1 to 10 (inclusive). It generates values for x.
        (x, x**2): For each value of x, this expression creates a tuple containing two elements: the original value x and its square, calculated as x**2.
        if is_prime(x): This condition checks if the current value of x is prime by calling the is_prime function. If x is prime, the pair (x, x^2) is included in the new list.
    print(prime_num_squares): This line of code prints the prime_num_squares list to the console.


Solution:
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
 
prime_num_squares = [(x, x**2) for x in range(1, 11) if is_prime(x)]
print(prime_num_squares)
#----------------------------------------#
Question:
Create a list of words with their characters sorted

Sample Output

['apple', 'banana', 'cherry']

['aelpp', 'aaabnn', 'cehrry']


Hints: 

Explication:
This Python code takes a list of words and creates a new list called sorted_chars using a list comprehension. The new list contains the same words as the original list, but with their characters sorted in alphabetical order. Here's how the code works:

    words = ["apple", "banana", "cherry"]: This line initializes a variable named words and assigns it a list containing three words.
    sorted_chars = [''.join(sorted(word)) for word in words]: This line of code initializes a variable named sorted_chars and assigns it the result of a list comprehension.
        for word in words: This part sets up a loop that iterates through each word word in the words list.
        sorted(word): For each word in the list, this expression sorts its characters in alphabetical order using the sorted() function. The sorted() function returns a list of sorted characters.
        ''.join(sorted(word)): This part joins the sorted characters back together into a single string by using the join() method. The result is a word with its characters sorted alphabetically.
        [''.join(sorted(word)) for word in words]: This is the list comprehension itself. It iterates through the words in the words list, sorts the characters of each word, and includes the sorted words in the new list.
    print(words): This line of code prints the original words list to the console.
    print(sorted_chars): This line of code prints the sorted_chars list to the console.


Solution:
words = ["apple", "banana", "cherry"]
sorted_chars = [''.join(sorted(word)) for word in words]
print(words)
print(sorted_chars)
#----------------------------------------#
Question:
Generate a list of tuples containing numbers and their cubes

Sample Output

[(1, 1), (2, 8), (3, 27), (4, 64), (5, 125), (6, 216), (7, 343), (8, 512), (9, 729), (10, 1000)]


Hints: 

Explication:
This Python code uses a list comprehension to generate pairs of numbers and their cubes for values of x ranging from 1 to 10. Here's how the code works:

    num_cubes = [(x, x**3) for x in range(1, 11)]: This line of code initializes a variable named num_cubes and assigns it the result of a list comprehension.
        for x in range(1, 11): This part sets up a loop that iterates through numbers from 1 to 10 (inclusive). It generates values for x.
        (x, x**3): For each value of x, this expression creates a tuple containing two elements: the original value x and its cube, calculated as x**3.
        [(x, x**3) for x in range(1, 11)]: This is the list comprehension itself. It iterates through the values of x in the specified range (1 to 10) and pairs each value with its cube, including these pairs (tuples) in the new list.
    print(num_cubes): This line of code prints the num_cubes list to the console.


Solution:
num_cubes = [(x, x**3) for x in range(1, 11)]
print(num_cubes)
#----------------------------------------#
Question:
Create a list of lowercase vowels from a string

Sample Output

Hello, world!

['e', 'o', 'o']


Hints: 

Explication:
This Python code takes a string and creates a new list called vowels using a list comprehension. The new list contains all the vowels (both lowercase and uppercase) from the original string. Here's how the code works:

    string = "Hello, world!": This line initializes a variable named string and assigns it a string containing the text "Hello, world!"
    vowels = [char for char in string if char.lower() in 'aeiou']: This line of code initializes a variable named vowels and assigns it the result of a list comprehension.
        for char in string: This part sets up a loop that iterates through each character char in the string.
        char.lower() in 'aeiou': For each character in the string, this expression first converts the character to lowercase using the lower() method to ensure case insensitivity. It then checks if the lowercase character is in the string 'aeiou', which contains all lowercase vowels.
        [char for char in string if char.lower() in 'aeiou']: This is the list comprehension itself. It iterates through the characters in the string, checks if each character is a lowercase vowel, and includes the vowels in the new list.
    print(string): This line of code prints the original string to the console.
    print(vowels): This line of code prints the vowels list to the console.


Solution:
string = "Hello, world!"
vowels = [char for char in string if char.lower() in 'aeiou']
print(string)
print(vowels)
#----------------------------------------#
Question:
Create a list of numbers with their square roots

Sample Output

[1, 4, 9, 16, 25]

[1.0, 2.0, 3.0, 4.0, 5.0]


Hints: 

Explication:
This Python code calculates the square root of each number in a list using the math.sqrt() function and stores the results in a new list. Here's how the code works:

    import math: This line imports the math module, which contains various mathematical functions and constants, including the sqrt() function for calculating square roots.
    numbers = [1, 4, 9, 16, 25]: This line initializes a variable named numbers and assigns it a list containing five numbers.
    square_roots = [math.sqrt(x) for x in numbers]: This line of code initializes a variable named square_roots and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number x in the numbers list.
        math.sqrt(x): For each number in the list, this expression calculates the square root of x using the math.sqrt() function from the math module.
        [math.sqrt(x) for x in numbers]: This is the list comprehension itself. It iterates through the numbers in the numbers list, calculates the square root of each number, and includes these square roots in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(square_roots): This line of code prints the square_roots list to the console.


Solution:
import math
numbers = [1, 4, 9, 16, 25]
square_roots = [math.sqrt(x) for x in numbers]
print(numbers)
print(square_roots)
#----------------------------------------#
Question:
Generate a list of numbers that are palindromes from 1 to 100

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99]


Hints: 

Explication:
This Python code generates a list called palindromes using a list comprehension. The list contains numbers from 1 to 100 that are palindromes when their digits are reversed. Here's how the code works:

    palindromes = [x for x in range(1, 101) if str(x) == str(x)[::-1]] : This line of code initializes a variable named palindromes and assigns it the result of a list comprehension.
        for x in range(1, 101): This part sets up a loop that iterates through numbers from 1 to 100 (inclusive). It generates values for x.
        str(x) == str(x)[::-1]: For each number in the range, this expression converts x to a string using str(x) , then checks if the string representation of x is equal to its reverse, achieved by str(x)[::-1]. This comparison determines whether x is a palindrome or not.
        [x for x in range(1, 101) if str(x) == str(x)[::-1]]: This is the list comprehension itself. It iterates through the numbers in the specified range (1 to 100), checks if each number is a palindrome, and includes palindromic numbers in the new list.
    print(palindromes): This line of code prints the palindromes list to the console.


Solution:
palindromes = [x for x in range(1, 101) if str(x) == str(x)[::-1]]
print(palindromes)
#----------------------------------------#
Question:
Create a list of numbers with their factorial values

Sample Output

[2, 3, 4, 5]

[2, 6, 24, 120]


Hints: 

Explication:
This Python code calculates the factorial of each number in a list using the math.factorial() function from the math module and stores the results in a new list. Here's how the code works:

    import math: This line imports the math module, which contains various mathematical functions, including the factorial() function for calculating factorials.
    numbers = [2, 3, 4, 5]: This line initializes a variable named numbers and assigns it a list containing four numbers.
    factorials = [math.factorial(x) for x in numbers]: This line of code initializes a variable named factorials and assigns it the result of a list comprehension.
        for x in numbers: This part sets up a loop that iterates through each number x in the numbers list.
        math.factorial(x): For each number in the list, this expression calculates its factorial using the math.factorial() function from the math module.
        [math.factorial(x) for x in numbers]: This is the list comprehension itself. It iterates through the numbers in the numbers list, calculates the factorial of each number, and includes these factorials in the new list.
    print(numbers): This line of code prints the original numbers list to the console.
    print(factorials): This line of code prints the factorials list to the console.


Solution:
import math
numbers = [2, 3, 4, 5]
factorials = [math.factorial(x) for x in numbers]
print(numbers)
print(factorials)
#----------------------------------------#
Question:
Generate a list of strings with vowels removed from a sentence

Sample Output

This is a sample sentence with some vowels.

['Ths', 's', '', 'smpl', 'sntnc', 'wth', 'sm', 'vwls.']


Hints: 

Explication:
This Python code takes a sentence, splits it into words, and creates a new sentence where all the vowels (both lowercase and uppercase) are removed from each word. Here's how the code works:

    sentence = "This is a sample sentence with some vowels.": This line initializes a variable named sentence and assigns it a string containing the input sentence.
    no_vowels = [''.join([char for char in word if char.lower() not in 'aeiou']) for word in sentence.split()]: This line of code initializes a variable named no_vowels and assigns it the result of a list comprehension.
        for word in sentence.split(): This part sets up a loop that iterates through each word word in the sentence. It splits the sentence into words using sentence.split().
        [char for char in word if char.lower() not in 'aeiou']: For each word in the list, this expression iterates through each character char in the word and includes the character in a new list only if it's not a vowel. It checks if the lowercase version of the character is not in the string 'aeiou'.
        ''.join([char for char in word if char.lower() not in 'aeiou']) : This part joins the characters in the list (without vowels) back together into a single string, forming a word with the vowels removed.
        [''.join([char for char in word if char.lower() not in 'aeiou']) for word in sentence.split()]: This is the list comprehension itself. It iterates through the words in the sentence, removes the vowels from each word, and includes the modified words in the new list.
    print(sentence): This line of code prints the original sentence to the console.
    print(no_vowels): This line of code prints the no_vowels list (which contains the modified words) to the console.


Solution:
sentence = "This is a sample sentence with some vowels."
no_vowels = [''.join([char for char in word if char.lower() not in 'aeiou']) for word in sentence.split()]
print(sentence)
print(no_vowels)
#----------------------------------------#
Question:
Create a list of characters that are digits from a string

Sample Output

12345Hello67890

['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']


Hints: 

Explication:
This Python code takes a string and creates a new list called digits using a list comprehension. The new list contains only the digits from the original string. Here's how the code works:

    string = "12345Hello67890": This line initializes a variable named string and assigns it a string containing a mix of digits and non-digit characters.
    digits = [char for char in string if char.isdigit()]: This line of code initializes a variable named digits and assigns it the result of a list comprehension.
        for char in string: This part sets up a loop that iterates through each character char in the string.
        char.isdigit(): For each character in the string, this expression checks if the character is a digit using the isdigit() method, which returns True if the character is a digit and False otherwise.
        [char for char in string if char.isdigit()]: This is the list comprehension itself. It iterates through the characters in the string, includes only the characters that are digits in the new list.
    print(string): This line of code prints the original string to the console.
    print(digits): This line of code prints the digits list (which contains the digit characters) to the console.


Solution:
string = "12345Hello67890"
digits = [char for char in string if char.isdigit()]
print(string)
print(digits)
#----------------------------------------#
Question:
List of elements with their frequency in a list

Sample Output

[1, 2, 2, 3, 4, 4, 4, 5]

{1: 1, 2: 2, 3: 1, 4: 3, 5: 1}


Hints: 

Explication:
This Python code calculates the frequency of each element in a list and stores the results in a dictionary called element_frequencies. Here's how the code works:

    numbers = [1, 2, 2, 3, 4, 4, 4, 5]: This line initializes a variable named numbers and assigns it a list containing several numbers, including some duplicates.
    element_frequencies = {num: numbers.count(num) for num in set(numbers)}: This line of code initializes a variable named element_frequencies and assigns it the result of a dictionary comprehension.
        set(numbers): This part converts the list numbers into a set, which removes duplicate elements and retains only the unique elements. This step ensures that each unique element is counted only once.
        {num: numbers.count(num) for num in set(numbers)} : This is the dictionary comprehension itself. It iterates through the unique elements in the set and, for each element (num), counts how many times it appears in the original list numbers using the numbers.count(num) method. The result is a key-value pair in the dictionary, where the key is the element, and the value is its frequency.
    print(numbers): This line of code prints the original numbers list to the console.
    print(element_frequencies): This line of code prints the element_frequencies dictionary (which contains the frequencies of elements) to the console.


Solution:
numbers = [1, 2, 2, 3, 4, 4, 4, 5]
element_frequencies = {num: numbers.count(num) for num in set(numbers)}
print(numbers)
print(element_frequencies)
#----------------------------------------#
Question:
List of words with their first and last letter swapped

Sample Output

['apple', 'banana', 'cherry', 'date']

['eppla', 'aananb', 'yherrc', 'eatd']


Hints: 

Explication:
This Python code takes a list of words and creates a new list called swapped_words using a list comprehension. In the new list, each word has its first and last letters swapped. Here's how the code works:

    words = ["apple", "banana", "cherry", "date"]: This line initializes a variable named words and assigns it a list containing four words.
    swapped_words = [word[-1] + word[1:-1] + word[0] for word in words]: This line of code initializes a variable named swapped_words and assigns it the result of a list comprehension.
        for word in words: This part sets up a loop that iterates through each word word in the words list.
        word[-1]: This part extracts the last character of the word using negative indexing (-1).
        word[1:-1]: This part extracts the characters in the word from the second character (index 1) up to, but not including, the last character (index -1).
        word[0]: This part extracts the first character of the word using indexing (0).
        word[-1] + word[1:-1] + word[0]: These parts combine the last character, the middle characters, and the first character to form a new word with the first and last letters swapped.
        [word[-1] + word[1:-1] + word[0] for word in words]: This is the list comprehension itself. It iterates through the words in the words list and creates new words with their first and last letters swapped, including these modified words in the new list.
    print(words): This line of code prints the original words list to the console.
    print(swapped_words): This line of code prints the swapped_words list (which contains the modified words) to the console.


Solution:
words = ["apple", "banana", "cherry", "date"]
swapped_words = [word[-1] + word[1:-1] + word[0] for word in words]
print(words)
print(swapped_words)
#----------------------------------------#
Question:
List of numbers with their divisors

Sample Output

[10, 15, 20, 25]

{10: [1, 2, 5, 10], 15: [1, 3, 5, 15], 20: [1, 2, 4, 5, 10, 20], 25: [1, 5, 25]}


Hints: 

Explication:
This Python code creates a dictionary called divisors where each key-value pair represents a number from the numbers list and its divisors. Here's how the code works:

    numbers = [10, 15, 20, 25]: This line initializes a variable named numbers and assigns it a list containing four numbers.
    divisors = {num: [x for x in range(1, num+1) if num % x == 0] for num in numbers}: This line of code initializes a variable named divisors and assigns it the result of a dictionary comprehension.
        for num in numbers: This part sets up a loop that iterates through each number num in the numbers list.
        range(1, num+1): This creates a range of numbers from 1 to num (inclusive). These are the potential divisors of num.
        [x for x in range(1, num+1) if num % x == 0] : This list comprehension iterates through the numbers in the range and includes only those numbers that are divisors of num. It checks if num is divisible by x (i.e., num % x == 0).
        {num: [x for x in range(1, num+1) if num % x == 0] for num in numbers}: This is the dictionary comprehension itself. It iterates through the numbers in the numbers list, calculates the divisors for each number, and stores them as key-value pairs in the divisors dictionary.
    print(numbers): This line of code prints the original numbers list to the console.
    print(divisors): This line of code prints the divisors dictionary (which contains the divisors of each number) to the console.


Solution:
numbers = [10, 15, 20, 25]
divisors = {num: [x for x in range(1, num+1) if num % x == 0] for num in numbers}
print(numbers)
print(divisors)
#----------------------------------------#
Question:
List of characters that are vowels or consonants

Sample Output

['a', 'b', 'c', 'e', 'f', 'i', 'o']

['a', 'e', 'i', 'o']

['b', 'c', 'f']


Hints: 

Explication:
This Python code takes a list of characters and separates them into two lists: one containing vowels and the other containing consonants. Here's how the code works:

    characters = ['a', 'b', 'c', 'e', 'f', 'i', 'o'] : This line initializes a variable named characters and assigns it a list containing several characters, including both vowels and consonants.
    vowels = [char for char in characters if char.lower() in 'aeiou']: This line of code initializes a variable named vowels and assigns it the result of a list comprehension.
        for char in characters: This part sets up a loop that iterates through each character char in the characters list.
        char.lower() in 'aeiou': For each character in the list, this expression converts char to lowercase using char.lower() to ensure case insensitivity and checks if the lowercase character is in the string 'aeiou', which contains all lowercase vowels.
        [char for char in characters if char.lower() in 'aeiou']: This is the list comprehension itself. It iterates through the characters in the characters list, includes only the characters that are vowels in the new list.
    consonants = [char for char in characters if char.lower() not in 'aeiou']: This line of code initializes a variable named consonants and assigns it the result of a list comprehension.
        for char in characters: This part sets up a loop that iterates through each character char in the characters list.
        char.lower() not in 'aeiou': For each character in the list, this expression converts char to lowercase using char.lower() to ensure case insensitivity and checks if the lowercase character is not in the string 'aeiou', which contains all lowercase vowels.
        [char for char in characters if char.lower() not in 'aeiou']: This is the list comprehension itself. It iterates through the characters in the characters list, includes only the characters that are not vowels in the new list.
    print(characters): This line of code prints the original characters list to the console.
    print(vowels): This line of code prints the vowels list (which contains the vowels) to the console.
    print(consonants): This line of code prints the consonants list (which contains the consonants) to the console.


Solution:
characters = ['a', 'b', 'c', 'e', 'f', 'i', 'o']
vowels = [char for char in characters if char.lower() in 'aeiou']
consonants = [char for char in characters if char.lower() not in 'aeiou']
print(characters)
print(vowels)
print(consonants)
#----------------------------------------#
Question:
Removing whitespace from strings in a list

Sample Output

[' hello ', ' world ', ' python ']

['hello', 'world', 'python']

Hints: 

Explication:
This Python code takes a list of strings and creates a new list called trimmed, where leading and trailing whitespace (including spaces, tabs, and newline characters) is removed from each string. Here's how the code works:

    strings = [" hello ", " world ", " python "]: This line initializes a variable named strings and assigns it a list containing three strings, each of which has leading and trailing whitespace.
    trimmed = [string.strip() for string in strings] : This line of code initializes a variable named trimmed and assigns it the result of a list comprehension.
        for string in strings: This part sets up a loop that iterates through each string string in the strings list.
        string.strip(): For each string in the list, the strip() method is called to remove leading and trailing whitespace from the string. The result is a string with whitespace removed.
        [string.strip() for string in strings]: This is the list comprehension itself. It iterates through the strings in the strings list, removes whitespace from each string, and includes the modified strings in the new list.
    print(strings): This line of code prints the original strings list to the console.
    print(trimmed): This line of code prints the trimmed list (which contains the modified strings with leading and trailing whitespace removed) to the console.


Solution:
strings = ["  hello  ", "  world  ", "  python  "]
trimmed = [string.strip() for string in strings]
print(strings)
print(trimmed)

#----------------------------------------#
Question:
Create a list of characters that are not vowels from a string

Sample Output

Hello, world!

['H', 'l', 'l', ',', ' ', 'w', 'r', 'l', 'd', '!']

Hints: 

Explication:
This Python code takes a string and creates a new list called non_vowels, which contains all the characters from the original string that are not vowels (both lowercase and uppercase vowels are considered). Here's how the code works:

    string = "Hello, world!": This line initializes a variable named string and assigns it a string containing a sentence.
    non_vowels = [char for char in string if char.lower() not in 'aeiou']: This line of code initializes a variable named non_vowels and assigns it the result of a list comprehension.
        for char in string: This part sets up a loop that iterates through each character char in the string.
        char.lower() not in 'aeiou': For each character in the string, this expression converts char to lowercase using char.lower() to ensure case insensitivity and checks if the lowercase character is not in the string 'aeiou', which contains all lowercase vowels.
        [char for char in string if char.lower() not in 'aeiou']: This is the list comprehension itself. It iterates through the characters in the string, includes only the characters that are not vowels (both lowercase and uppercase) in the new list.
    print(string): This line of code prints the original string to the console.
    print(non_vowels) : This line of code prints the non_vowels list (which contains the characters that are not vowels) to the console.

Solution:
string = "Hello, world!"
non_vowels = [char for char in string if char.lower() not in 'aeiou']
print(string)
print(non_vowels)
#----------------------------------------#
Question:
DEBUT DES tuples
Squares of numbers from 1 to 10 as tuples

Sample Output

(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)

Hints: 

Explication:
This Python code generates a tuple called squares using a generator expression. The tuple contains the squares of numbers from 1 to 10. Here's how the code works:

    squares = tuple(x**2 for x in range(1, 11)): This line of code initializes a variable named squares and assigns it a tuple created using a generator expression.
        x**2 for x in range(1, 11): This part of the code uses a generator expression to generate the squares of numbers from 1 to 10.
            for x in range(1, 11): This sets up a loop that iterates through numbers from 1 to 10 using the range(1, 11) iterable.
            x**2: For each value of x in the range, it calculates the square of x using the x**2 expression.
        tuple(...): This surrounds the generator expression and converts the generated values into a tuple.
    print(squares): This line of code prints the squares tuple to the console.

Solution:
squares = tuple(x**2 for x in range(1, 11))
print(squares)

#----------------------------------------#
Question:
Even numbers from 1 to 20 as tuples

Sample Output

(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)

Hints: 

Explication:
This Python code generates a tuple called evens using a generator expression. The tuple contains even numbers from 1 to 20. Here's how the code works:

    evens = tuple(x for x in range(1, 21) if x % 2 == 0): This line of code initializes a variable named evens and assigns it a tuple created using a generator expression.
        x for x in range(1, 21) if x % 2 == 0: This part of the code uses a generator expression to generate even numbers from 1 to 20.
            for x in range(1, 21): This sets up a loop that iterates through numbers from 1 to 20 using the range(1, 21) iterable.
            if x % 2 == 0: For each value of x in the range, it checks if x is even by evaluating x % 2 == 0, which is True for even numbers and False for odd numbers.
        tuple(...): This surrounds the generator expression and converts the generated values (even numbers) into a tuple.
    print(evens): This line of code prints the evens tuple to the console.

Solution:
evens = tuple(x for x in range(1, 21) if x % 2 == 0)
print(evens)

#----------------------------------------#
Question:
Tuple of characters in a string

Sample Output

hello

('h', 'e', 'l', 'l', 'o')

Hints: 

Explication:
This Python code converts a string into a tuple called char_tuple, where each element of the tuple corresponds to a character in the original string. Here's how the code works:

    string = "hello": This line initializes a variable named string and assigns it the string "hello."
    char_tuple = tuple(char for char in string): This line of code initializes a variable named char_tuple and assigns it a tuple created using a generator expression.
        char for char in string: This part of the code uses a generator expression to iterate through each character char in the string.
        tuple(...): This surrounds the generator expression and converts the generated characters into a tuple.
    print(string): This line of code prints the original string to the console.
    print(char_tuple): This line of code prints the char_tuple tuple (which contains the individual characters from the string) to the console.

Solution:
string = "hello"
char_tuple = tuple(char for char in string)
print(string)
print(char_tuple)

#----------------------------------------#
Question:
Length of words in a sentence as tuples

Sample Output

This is a sample sentence

(4, 2, 1, 6, 8)

Hints: 

Explication:
This Python code splits a sentence into words and creates a tuple called word_lengths, where each element of the tuple corresponds to the length of a word in the sentence. Here's how the code works:

    sentence = "This is a sample sentence": This line initializes a variable named sentence and assigns it the string "This is a sample sentence."
    word_lengths = tuple(len(word) for word in sentence.split()): This line of code initializes a variable named word_lengths and assigns it a tuple created using a generator expression.
        for word in sentence.split(): This part of the code uses a generator expression to iterate through each word word in the sentence. It does this by splitting the sentence into words using sentence.split(), which splits the sentence based on spaces (the default separator).
        len(word): For each word in the sentence, it calculates the length of the word using the len() function.
        tuple(...): This surrounds the generator expression and converts the generated word lengths into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(word_lengths): This line of code prints the word_lengths tuple (which contains the lengths of the words in the sentence) to the console.

Solution:
sentence = "This is a sample sentence"
word_lengths = tuple(len(word) for word in sentence.split())
print(sentence)
print(word_lengths)

#----------------------------------------#
Question:
Vowels in a sentence as tuples

Sample Output

Hello, how are you?

('e', 'o', 'o', 'a', 'e', 'o', 'u')

Hints: 

Explication:
This Python code takes a sentence and creates a tuple called vowels, which contains all the vowel characters from the original sentence (both lowercase and uppercase vowels are considered). Here's how the code works:

    sentence = "Hello, how are you?": This line initializes a variable named sentence and assigns it the string "Hello, how are you?"
    vowels = tuple(char for char in sentence if char.lower() in 'aeiou'): This line of code initializes a variable named vowels and assigns it a tuple created using a generator expression.
        for char in sentence: This part sets up a loop that iterates through each character char in the sentence.
        char.lower() in 'aeiou': For each character in the sentence, this expression converts char to lowercase using char.lower() to ensure case insensitivity and checks if the lowercase character is in the string 'aeiou', which contains all lowercase vowels.
        tuple(...): This surrounds the generator expression and converts the generated vowel characters into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(vowels): This line of code prints the vowels tuple (which contains the vowel characters from the sentence) to the console.

Solution:
sentence = "Hello, how are you?"
vowels = tuple(char for char in sentence if char.lower() in 'aeiou')
print(sentence)
print(vowels)

#----------------------------------------#
Question:
Tuple of distinct prime factors of numbers in a list

Sample Output

[10, 15, 20, 25]

(2, 5, 3, 5, 2, 5, 5)

Hints: 

Explication:
This Python code calculates and creates a tuple called prime_factors, which contains the prime factors of each number in the numbers list. Here's how the code works:

    numbers = [10, 15, 20, 25]: This line initializes a variable named numbers and assigns it a list containing four numbers.
    prime_factors = tuple(factor for num in numbers for factor in range(2, num+1) if num % factor == 0 and all(factor % divisor != 0 for divisor in range(2, factor))): This line of code initializes a variable named prime_factors and assigns it a tuple created using a nested generator expression.
        for num in numbers: This outer part of the code sets up a loop that iterates through each number num in the numbers list.
        for factor in range(2, num+1): This inner part of the code sets up a nested loop that iterates through each number factor from 2 up to num (inclusive).
        if num % factor == 0: Within the nested loop, it checks if num is divisible by factor by evaluating num % factor == 0.
        all(factor % divisor != 0 for divisor in range(2, factor)) : Inside the condition, it uses all() to check if factor is a prime number. It does this by iterating through all numbers from 2 to factor - 1 (inclusive) and checking if factor is not divisible by any of them (i.e., factor % divisor != 0 for all divisor in that range).
        factor: If all the conditions are met (i.e., num is divisible by factor and factor is a prime number), factor is included in the generator expression.
        tuple(...): This surrounds the nested generator expression and converts the generated prime factors into a tuple.
    print(numbers): This line of code prints the original numbers list to the console.
    print(prime_factors): This line of code prints the prime_factors tuple (which contains the prime factors of the numbers) to the console.

Solution:
numbers = [10, 15, 20, 25]
prime_factors = tuple(factor for num in numbers for factor in range(2, num+1) if num % factor == 0 and all(factor % divisor != 0 for divisor in range(2, factor)))
print(numbers)
print(prime_factors)

#----------------------------------------#
Question:
Tuple of distinct characters in a list of strings

Sample Output

['apple', 'banana', 'cherry']

('a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a', 'c', 'h', 'e', 'r', 'r', 'y')

Hints: 

Explication:
This Python code creates a tuple called distinct_chars, which contains all the distinct characters from the strings in the strings list. Here's how the code works:

    strings = ["apple", "banana", "cherry"]: This line initializes a variable named strings and assigns it a list containing three strings.
    distinct_chars = tuple(char for string in strings for char in string): This line of code initializes a variable named distinct_chars and assigns it a tuple created using a nested generator expression.
        for string in strings: This outer part of the code sets up a loop that iterates through each string string in the strings list.
        for char in string: This inner part of the code sets up a nested loop that iterates through each character char in the current string.
        char: For each character in each string, it includes the character in the generator expression.
        tuple(...): This surrounds the nested generator expression and converts the generated characters into a tuple.
    print(strings): This line of code prints the original strings list to the console.
    print(distinct_chars): This line of code prints the distinct_chars tuple (which contains the distinct characters from the strings) to the console.

Solution:
strings = ["apple", "banana", "cherry"]
distinct_chars = tuple(char for string in strings for char in string)
print(strings)
print(distinct_chars)

#----------------------------------------#
Question:
Tuple of ASCII values for characters in a string

Sample Output

hello

(104, 101, 108, 108, 111)

Hints: 

Explication:
This Python code creates a tuple called ascii_values, which contains the ASCII values (ordinal values) of each character in the string string. Here's how the code works:

    string = "hello": This line initializes a variable named string and assigns it the string "hello."
    ascii_values = tuple(ord(char) for char in string): This line of code initializes a variable named ascii_values and assigns it a tuple created using a generator expression.
        for char in string: This part of the code sets up a loop that iterates through each character char in the string.
        ord(char): For each character in the string, it uses the ord() function to get its ASCII value (ordinal value).
        tuple(...): This surrounds the generator expression and converts the generated ASCII values into a tuple.
    print(string): This line of code prints the original string to the console.
    print(ascii_values): This line of code prints the ascii_values tuple (which contains the ASCII values of the characters in the string) to the console.

Solution:
string = "hello"
ascii_values = tuple(ord(char) for char in string)
print(string)
print(ascii_values)

#----------------------------------------#
Question:
Tuple of common letters between two words

Sample Output

apple

banana

('a',)

Hints: 

Explication:
This Python code creates a tuple called common_letters, which contains the characters that are common between the two words, word1 and word2. Here's how the code works:

    word1 = "apple": This line initializes a variable named word1 and assigns it the string "apple."
    word2 = "banana": This line initializes a variable named word2 and assigns it the string "banana."
    common_letters = tuple(char for char in word1 if char in word2) : This line of code initializes a variable named common_letters and assigns it a tuple created using a generator expression.
        for char in word1: This part of the code sets up a loop that iterates through each character char in word1.
        if char in word2: For each character in word1, it checks if the character is also present in word2.
        char: If a character is found in both word1 and word2, it is included in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated common characters into a tuple.
    print(word1): This line of code prints the original word1 to the console.
    print(word2): This line of code prints the original word2 to the console.
    print(common_letters): This line of code prints the common_letters tuple (which contains the common characters between the two words) to the console.

Solution:
word1 = "apple"
word2 = "banana"
common_letters = tuple(char for char in word1 if char in word2)
print(word1)
print(word2)
print(common_letters)

#----------------------------------------#
Question:
Tuple of even squares up to 100

Sample Output

(0, 4, 16, 36, 64, 100)

Hints: 

Explication:
This Python code creates a tuple called even_squares, which contains the squares of even numbers from 0 to 10 (inclusive). Here's how the code works:

    even_squares = tuple(x**2 for x in range(11) if x**2 % 2 == 0) : This line of code initializes a variable named even_squares and assigns it a tuple created using a generator expression.
        for x in range(11): This part of the code sets up a loop that iterates through numbers from 0 to 10 using the range(11) iterable.
        if x**2 % 2 == 0: For each value of x in the range, it calculates the square of x using x**2 and checks if the square is an even number by evaluating x**2 % 2 == 0.
        x**2: If the square of x is even, it includes the square in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated even squares into a tuple.
    print(even_squares): This line of code prints the even_squares tuple (which contains the even squares of numbers from 0 to 10) to the console.

Solution:
even_squares = tuple(x**2 for x in range(11) if x**2 % 2 == 0)
print(even_squares)

#----------------------------------------#
Question:
Tuple of positive numbers from a list

Sample Output

[-5, 10, -15, 20, -25]

(10, 20)

Hints: 

Explication:
This Python code creates a tuple called positive, which contains all the non-negative (i.e., positive or zero) numbers from the numbers list. Here's how the code works:

    numbers = [-5, 10, -15, 20, -25]: This line initializes a variable named numbers and assigns it a list containing five numbers, some of which are negative.
    positive = tuple(x for x in numbers if x >= 0): This line of code initializes a variable named positive and assigns it a tuple created using a generator expression.
        for x in numbers: This part of the code sets up a loop that iterates through each number x in the numbers list.
        if x >= 0: For each number in the list, it checks if x is greater than or equal to zero by evaluating x >= 0.
        x: If the number is non-negative (positive or zero), it includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated non-negative numbers into a tuple.
    print(numbers): This line of code prints the original numbers list to the console.
    print(positive): This line of code prints the positive tuple (which contains the non-negative numbers from the list) to the console.

Solution:
numbers = [-5, 10, -15, 20, -25]
positive = tuple(x for x in numbers if x >= 0)
print(numbers)
print(positive)

#----------------------------------------#
Question:
Tuple of distinct consonants in a sentence

Sample Output

Hello, how are you?

('h', 'l', 'l', 'h', 'w', 'r', 'y')

Hints: 

Explication:
This Python code creates a tuple called consonants, which contains all the lowercase consonant characters from the sentence string. Here's how the code works:

    sentence = "Hello, how are you?": This line initializes a variable named sentence and assigns it the string "Hello, how are you?"
    consonants = tuple(char.lower() for char in sentence if char.lower() not in 'aeiou' and char.isalpha()): This line of code initializes a variable named consonants and assigns it a tuple created using a generator expression.
        for char in sentence: This part of the code sets up a loop that iterates through each character char in the sentence.
        if char.lower() not in 'aeiou': For each character in the string, it checks if the lowercase version of char is not in the string 'aeiou', effectively identifying consonants.
        and char.isalpha(): It also checks if the character is an alphabet letter (i.e., not a punctuation mark or space) using the char.isalpha() method.
        char.lower(): If the character meets both conditions (is a consonant and is an alphabet letter), it converts char to lowercase using char.lower() and includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated lowercase consonants into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(consonants): This line of code prints the consonants tuple (which contains the lowercase consonant characters from the sentence) to the console.

Solution:
sentence = "Hello, how are you?"
consonants = tuple(char.lower() for char in sentence if char.lower() not in 'aeiou' and char.isalpha())
print(sentence)
print(consonants)

#----------------------------------------#
Question:
Tuple of common elements between two lists

Sample Output

[1, 2, 3, 4, 5]

[4, 5, 6, 7, 8]

(4, 5)

Hints: 

Explication:
This Python code creates a tuple called common, which contains the elements that are common between list1 and list2. Here's how the code works:

    list1 = [1, 2, 3, 4, 5]: This line initializes a variable named list1 and assigns it a list containing five numbers.
    list2 = [4, 5, 6, 7, 8]: This line initializes a variable named list2 and assigns it a list containing five numbers.
    common = tuple(x for x in list1 if x in list2): This line of code initializes a variable named common and assigns it a tuple created using a generator expression.
        for x in list1: This part of the code sets up a loop that iterates through each element x in list1.
        if x in list2: For each element in list1, it checks if the element is also present in list2 by evaluating x in list2.
        x: If an element is found in both list1 and list2, it includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated common elements into a tuple.
    print(list1): This line of code prints the original list1 to the console.
    print(list2): This line of code prints the original list2 to the console.
    print(common): This line of code prints the common tuple (which contains the common elements between list1 and list2) to the console.

Solution:
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
common = tuple(x for x in list1 if x in list2)
print(list1)
print(list2)
print(common)

#----------------------------------------#
Question:
Tuple of distinct vowels in a list of words

Sample Output

['apple', 'banana', 'cherry', 'date']

('a', 'e', 'a', 'a', 'a', 'e', 'a', 'e')

Hints: 

Explication:
This Python code creates a tuple called distinct_vowels, which contains all the distinct lowercase vowel characters from the words in the words list. Here's how the code works:

    words = ["apple", "banana", "cherry", "date"]: This line initializes a variable named words and assigns it a list containing four words.
    distinct_vowels = tuple(char.lower() for word in words for char in word if char.lower() in 'aeiou'): This line of code initializes a variable named distinct_vowels and assigns it a tuple created using a generator expression.
        for word in words: This part of the code sets up the outermost loop that iterates through each word word in the words list.
        for char in word: Within the outer loop, it sets up a nested loop that iterates through each character char in the current word.
        if char.lower() in 'aeiou': For each character in each word, it checks if the lowercase version of char is in the string 'aeiou', effectively identifying lowercase vowels.
        char.lower(): If a lowercase vowel character is found, it includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated lowercase vowel characters into a tuple.
    print(words): This line of code prints the original words list to the console.
    print(distinct_vowels): This line of code prints the distinct_vowels tuple (which contains the distinct lowercase vowel characters from the words) to the console.

Solution:
words = ["apple", "banana", "cherry", "date"]
distinct_vowels = tuple(char.lower() for word in words for char in word if char.lower() in 'aeiou')
print(words)
print(distinct_vowels)

#----------------------------------------#
Question:
Tuple of distinct words starting with vowels in a sentence

Sample Output

Hello, how are you?

('are',)

Hints: 

Explication:
This Python code creates a tuple called vowel_start_words, which contains words from the sentence string that start with a lowercase vowel. Here's how the code works:

    sentence = "Hello, how are you?": This line initializes a variable named sentence and assigns it the string "Hello, how are you?"
    vowel_start_words = tuple(word for word in sentence.split() if word[0].lower() in 'aeiou'): This line of code initializes a variable named vowel_start_words and assigns it a tuple created using a generator expression.
        for word in sentence.split(): This part of the code sets up a loop that iterates through each word word in the sentence, split by spaces using sentence.split().
        if word[0].lower() in 'aeiou': For each word in the split sentence, it checks if the lowercase version of the first character of the word, obtained using word[0].lower(), is in the string 'aeiou', effectively identifying words that start with a lowercase vowel.
        word: If a word starts with a lowercase vowel, it includes the word in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated words into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(vowel_start_words): This line of code prints the vowel_start_words tuple (which contains words that start with a lowercase vowel) to the console.

Solution:
sentence = "Hello, how are you?"
vowel_start_words = tuple(word for word in sentence.split() if word[0].lower() in 'aeiou')
print(sentence)
print(vowel_start_words)

#----------------------------------------#
Question:
Tuple of sums of digits in numbers

Sample Output

[123, 456, 789]

(6, 15, 24)

Hints: 

Explication:
This Python code creates a tuple called digit_sums, which contains the sum of digits for each number in the numbers list. Here's how the code works:

    numbers = [123, 456, 789]: This line initializes a variable named numbers and assigns it a list containing three numbers.
    digit_sums = tuple(sum(int(digit) for digit in str(num)) for num in numbers): This line of code initializes a variable named digit_sums and assigns it a tuple created using a generator expression.
        for num in numbers: This part of the code sets up a loop that iterates through each number num in the numbers list.
        str(num): It converts each number to a string using str(num) so that we can work with individual digits.
        for digit in str(num): Within the loop, it sets up a nested loop that iterates through each digit digit in the string representation of the number.
        int(digit): For each digit, it converts it back to an integer using int(digit) so that we can sum them.
        sum(...): This calculates the sum of the digits for each number.
        tuple(...): This surrounds the generator expression and converts the generated sums into a tuple.
    print(numbers): This line of code prints the original numbers list to the console.
    print(digit_sums): This line of code prints the digit_sums tuple (which contains the sum of digits for each number in the list) to the console.

Solution:
numbers = [123, 456, 789]
digit_sums = tuple(sum(int(digit) for digit in str(num)) for num in numbers)
print(numbers)
print(digit_sums)

#----------------------------------------#
Question:
Tuple of words with length greater than 3 in a sentence

Sample Output

This is a sample sentence

('This', 'sample', 'sentence')

Hints: 

Explication:
This Python code creates a tuple called long_words, which contains words from the sentence string that have more than 3 characters. Here's how the code works:

    sentence = "This is a sample sentence": This line initializes a variable named sentence and assigns it the string "This is a sample sentence."
    long_words = tuple(word for word in sentence.split() if len(word) > 3): This line of code initializes a variable named long_words and assigns it a tuple created using a generator expression.
        for word in sentence.split(): This part of the code sets up a loop that iterates through each word word in the sentence, split by spaces using sentence.split().
        if len(word) > 3: For each word in the split sentence, it checks if the length of the word (i.e., the number of characters in the word) is greater than 3 using len(word) > 3.
        word: If a word has more than 3 characters, it includes the word in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated words into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(long_words): This line of code prints the long_words tuple (which contains words with more than 3 characters) to the console.

Solution:
sentence = "This is a sample sentence"
long_words = tuple(word for word in sentence.split() if len(word) > 3)
print(sentence)
print(long_words)

#----------------------------------------#
Question:
Tuple of pairs of elements and their squares

Sample Output

[1, 2, 3, 4, 5]

((1, 1), (2, 4), (3, 9), (4, 16), (5, 25))

Hints: 

Explication:
This Python code creates a tuple called squared_tuples, which contains pairs of numbers and their corresponding squares from the numbers list. Here's how the code works:

    numbers = [1, 2, 3, 4, 5]: This line initializes a variable named numbers and assigns it a list containing five numbers.
    squared_tuples = tuple((x, x**2) for x in numbers): This line of code initializes a variable named squared_tuples and assigns it a tuple created using a generator expression.
        for x in numbers: This part of the code sets up a loop that iterates through each number x in the numbers list.
        (x, x**2): For each number, it creates a tuple containing the number x and its square x**2.
        tuple(...): This surrounds the generator expression and converts the generated pairs of numbers and their squares into a tuple.
    print(numbers): This line of code prints the original numbers list to the console.
    print(squared_tuples): This line of code prints the squared_tuples tuple (which contains pairs of numbers and their squares) to the console.

Solution:
numbers = [1, 2, 3, 4, 5]
squared_tuples = tuple((x, x**2) for x in numbers)
print(numbers)
print(squared_tuples)

#----------------------------------------#
Question:
Tuple of Negative numbers from a list

Sample Output

[-5, 10, -15, 20, -25]

(-5, -15, -25)

Hints: 

Explication:
This Python code creates a tuple called negative, which contains all the negative numbers from the numbers list. Here's how the code works:

    numbers = [-5, 10, -15, 20, -25]: This line initializes a variable named numbers and assigns it a list containing five numbers, some of which are negative.
    negative = tuple(x for x in numbers if x < 0): This line of code initializes a variable named negative and assigns it a tuple created using a generator expression.
        for x in numbers: This part of the code sets up a loop that iterates through each number x in the numbers list.
        if x < 0: For each number, it checks if it is less than 0 (i.e., a negative number) using the condition x < 0.
        x: If a number is negative, it includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated negative numbers into a tuple.
    print(numbers): This line of code prints the original numbers list to the console.
    print(negative): This line of code prints the negative tuple (which contains the negative numbers from the list) to the console.

Solution:
numbers = [-5, 10, -15, 20, -25]
negative = tuple(x for x in numbers if x < 0)
print(numbers)
print(negative)

#----------------------------------------#
Question:
Tuple of positive and negative numbers from a list

Sample Output

[10, -5, 20, -15, 30]

(10, 20, 30)

(-5, -15)

Hints: 

Explication:
This Python code creates two tuples: positive and negative, which contain the positive and negative numbers from the numbers list, respectively. Here's how the code works:

    numbers = [10, -5, 20, -15, 30]: This line initializes a variable named numbers and assigns it a list containing five numbers, some of which are positive, and some are negative.
    positive = tuple(x for x in numbers if x >= 0): This line of code initializes a variable named positive and assigns it a tuple created using a generator expression.
        for x in numbers: This part of the code sets up a loop that iterates through each number x in the numbers list.
        if x >= 0: For each number, it checks if it is greater than or equal to 0 (i.e., a non-negative number) using the condition x >= 0.
        x: If a number is non-negative, it includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated non-negative numbers into a tuple.
    negative = tuple(x for x in numbers if x < 0): This line of code initializes a variable named negative and assigns it a tuple created using a generator expression.
        for x in numbers: Similar to the previous generator expression, this loop iterates through each number x in the numbers list.
        if x < 0: For each number, it checks if it is less than 0 (i.e., a negative number) using the condition x < 0.
        x: If a number is negative, it includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated negative numbers into a tuple.
    print(numbers): This line of code prints the original numbers list to the console.
    print(positive): This line of code prints the positive tuple (which contains the non-negative numbers from the list) to the console.
    print(negative): This line of code prints the negative tuple (which contains the negative numbers from the list) to the console.

Solution:
numbers = [10, -5, 20, -15, 30]
positive = tuple(x for x in numbers if x >= 0)
negative = tuple(x for x in numbers if x < 0)
print(numbers)
print(positive)
print(negative)

#----------------------------------------#
Question:
Tuple of pairs of words and their lengths

Sample Output

['apple', 'banana', 'cherry', 'date']

(('apple', 5), ('banana', 6), ('cherry', 6), ('date', 4))

Hints: 

Explication:
This Python code creates a tuple called word_lengths, which contains pairs of words and their corresponding lengths from the words list. Here's how the code works:

    words = ["apple", "banana", "cherry", "date"]: This line initializes a variable named words and assigns it a list containing four words.
    word_lengths = tuple((word, len(word)) for word in words): This line of code initializes a variable named word_lengths and assigns it a tuple created using a generator expression.
        for word in words: This part of the code sets up a loop that iterates through each word word in the words list.
        (word, len(word)): For each word, it creates a tuple containing the word itself word and its length len(word).
        tuple(...): This surrounds the generator expression and converts the generated pairs of words and their lengths into a tuple.
    print(words): This line of code prints the original words list to the console.
    print(word_lengths): This line of code prints the word_lengths tuple (which contains pairs of words and their lengths) to the console.

Solution:
words = ["apple", "banana", "cherry", "date"]
word_lengths = tuple((word, len(word)) for word in words)
print(words)
print(word_lengths)

#----------------------------------------#
Question:
Tuple of characters and their corresponding ASCII values

Sample Output

['a', 'b', 'c', 'd', 'e']

(('a', 97), ('b', 98), ('c', 99), ('d', 100), ('e', 101))

Hints: 

Explication:
This Python code creates a tuple called char_ascii_pairs, which contains pairs of characters and their corresponding ASCII values from the characters list. Here's how the code works:

    characters = ['a', 'b', 'c', 'd', 'e']: This line initializes a variable named characters and assigns it a list containing five characters.
    char_ascii_pairs = tuple((char, ord(char)) for char in characters): This line of code initializes a variable named char_ascii_pairs and assigns it a tuple created using a generator expression.
        for char in characters: This part of the code sets up a loop that iterates through each character char in the characters list.
        (char, ord(char)): For each character, it creates a tuple containing the character itself char and its corresponding ASCII value obtained using the ord(char) function.
        tuple(...): This surrounds the generator expression and converts the generated pairs of characters and their ASCII values into a tuple.
    print(characters): This line of code prints the original characters list to the console.
    print(char_ascii_pairs): This line of code prints the char_ascii_pairs tuple (which contains pairs of characters and their ASCII values) to the console.

Solution:
characters = ['a', 'b', 'c', 'd', 'e']
char_ascii_pairs = tuple((char, ord(char)) for char in characters)
print(characters)
print(char_ascii_pairs)

#----------------------------------------#
Question:
Tuple of pairs of numbers and their sum from two lists

Sample Output

[1, 2, 3]

[4, 5, 6]

((1, 4, 5), (1, 5, 6), (1, 6, 7), (2, 4, 6), (2, 5, 7), (2, 6, 8), (3, 4, 7), (3, 5, 8), (3, 6, 9))

Hints: 

Explication:
This Python code creates a tuple called sum_tuples, which contains triplets of elements from list1, list2, and their sums. Here's how the code works:

    list1 = [1, 2, 3]: This line initializes a variable named list1 and assigns it a list containing three numbers.
    list2 = [4, 5, 6]: This line initializes a variable named list2 and assigns it a list containing three numbers.
    sum_tuples = tuple((x, y, x + y) for x in list1 for y in list2) : This line of code initializes a variable named sum_tuples and assigns it a tuple created using a generator expression.
        for x in list1: This part of the code sets up a nested loop that iterates through each number x in list1.
        for y in list2: For each x from list1, it sets up another nested loop that iterates through each number y in list2.
        (x, y, x + y): For each pair of x and y, it creates a triplet containing x, y, and their sum x + y.
        tuple(...): This surrounds the generator expression and converts the generated triplets into a tuple.
    print(list1): This line of code prints the original list1 to the console.
    print(list2): This line of code prints the original list2 to the console.
    print(sum_tuples): This line of code prints the sum_tuples tuple (which contains triplets of elements and their sums) to the console.

Solution:
list1 = [1, 2, 3]
list2 = [4, 5, 6]
sum_tuples = tuple((x, y, x + y) for x in list1 for y in list2)
print(list1)
print(list2)
print(sum_tuples)

#----------------------------------------#
Question:
Tuple of odd numbers from 1 to 20

Sample Output

(1, 3, 5, 7, 9, 11, 13, 15, 17, 19)

Hints: 

Explication:
This Python code creates a tuple called odds, which contains all the odd numbers from 1 to 20. Here's how the code works:

    odds = tuple(x for x in range(1, 21) if x % 2 != 0): This line of code initializes a variable named odds and assigns it a tuple created using a generator expression.
        for x in range(1, 21): This part of the code sets up a loop that iterates through each number x in the range from 1 to 20 (inclusive).
        if x % 2 != 0: For each number, it checks if it is not divisible by 2 (i.e., an odd number) using the condition x % 2 != 0.
        x: If a number is odd, it includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated odd numbers into a tuple.
    print(odds): This line of code prints the odds tuple (which contains all the odd numbers from 1 to 20) to the console.

Solution:
odds = tuple(x for x in range(1, 21) if x % 2 != 0)
print(odds)

#----------------------------------------#
Question:
Tuple of prime numbers up to 50

Sample Output

(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47)

Hints: 

Explication:
This Python code defines a function is_prime(n) to check if a number n is prime, and then it creates a tuple called primes containing all prime numbers from 2 to 50. Here's how the code works:

    def is_prime(n): This line defines a function named is_prime that takes an integer n as its argument.
        if n <= 1:: This line checks if the input number is less than or equal to 1, in which case it returns False because prime numbers are greater than 1.
        for i in range(2, int(n**0.5) + 1):: This line sets up a loop that iterates through numbers from 2 to the square root of n (rounded up to the nearest integer) plus 1. This loop is used to check if n is divisible by any number in that range.
            if n % i == 0:: For each i in the loop, it checks if n is divisible by i (i.e., if the remainder of the division is 0). If n is divisible by any number in the range, it means n is not prime, and it returns False.
        If the loop completes without finding a divisor, the function returns True, indicating that the input number is prime.
    primes = tuple(x for x in range(2, 51) if is_prime(x)): This line of code initializes a variable named primes and assigns it a tuple created using a generator expression.
        for x in range(2, 51): This part of the code sets up a loop that iterates through numbers from 2 to 50.
        if is_prime(x): For each number x, it checks if it is prime by calling the is_prime function. If x is prime, it includes it in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated prime numbers into a tuple.
    print(primes): This line of code prints the primes tuple (which contains all prime numbers from 2 to 50) to the console.

Solution:
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
 
primes = tuple(x for x in range(2, 51) if is_prime(x))
print(primes)

#----------------------------------------#
Question:
Tuple of factors of numbers in a list

Sample Output

[10, 15, 20, 25]

((10, [1, 2, 5, 10]), (15, [1, 3, 5, 15]), (20, [1, 2, 4, 5, 10, 20]), (25, [1, 5, 25]))

Hints: 

Explication:
This Python code creates a tuple called factors, which contains pairs of numbers and their factors from the numbers list. Here's how the code works:

    numbers = [10, 15, 20, 25]: This line initializes a variable named numbers and assigns it a list containing four numbers.
    factors = tuple((num, [x for x in range(1, num+1) if num % x == 0]) for num in numbers): This line of code initializes a variable named factors and assigns it a tuple created using a generator expression.
    print(numbers): This line of code prints the original numbers list to the console.
    print(factors): This line of code prints the factors tuple (which contains pairs of numbers and their factors) to the console.

Solution:
numbers = [10, 15, 20, 25]
factors = tuple((num, [x for x in range(1, num+1) if num % x == 0]) for num in numbers)
print(numbers)
print(factors)

#----------------------------------------#
Question:
Tuple of distinct vowels and consonants from a list of words

Sample Output

['apple', 'banana', 'cherry', 'date']

('a', 'e', 'a', 'a', 'a', 'e', 'a', 'e')

('p', 'p', 'l', 'b', 'n', 'n', 'c', 'h', 'r', 'r', 'y', 'd', 't')

Hints: 

Explication:
This Python code processes the words list and creates two tuples: vowels and consonants. The vowels tuple contains all the vowels from the words in the list, and the consonants tuple contains all the consonants. Here's how the code works:

    words = ["apple", "banana", "cherry", "date"]: This line initializes a variable named words and assigns it a list containing four words.
    vowels = tuple(char for word in words for char in word if char.lower() in 'aeiou'): This line initializes a variable named vowels and assigns it a tuple created using a generator expression.
        for word in words: This part of the code sets up a nested loop that iterates through each word word in the words list.
        for char in word: For each word, it sets up another nested loop that iterates through each character char in the word.
        if char.lower() in 'aeiou': For each character, it checks if the character (converted to lowercase) is a vowel (i.e., if it's in the string 'aeiou'). If it's a vowel, it includes the character in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated vowel characters into a tuple.
    consonants = tuple(char for word in words for char in word if char.lower() not in 'aeiou'): This line initializes a variable named consonants and assigns it a tuple created using a generator expression.
        for word in words: This part of the code sets up a nested loop that iterates through each word word in the words list.
        for char in word: For each word, it sets up another nested loop that iterates through each character char in the word.
        if char.lower() not in 'aeiou': For each character, it checks if the character (converted to lowercase) is not a vowel (i.e., if it's not in the string 'aeiou'). If it's a consonant, it includes the character in the generator expression.
        tuple(...): This surrounds the generator expression and converts the generated consonant characters into a tuple.
    print(words): This line of code prints the original words list to the console.
    print(vowels): This line of code prints the vowels tuple (which contains all the vowel characters) to the console.
    print(consonants): This line of code prints the consonants tuple (which contains all the consonant characters) to the console.

Solution:
words = ["apple", "banana", "cherry", "date"]
vowels = tuple(char for word in words for char in word if char.lower() in 'aeiou')
consonants = tuple(char for word in words for char in word if char.lower() not in 'aeiou')
print(words)
print(vowels)
print(consonants)

#----------------------------------------#
Question:
Tuple of tuples with word and its vowel count in a sentence

Sample Output

Hello, how are you?

(('Hello,', 2), ('how', 1), ('are', 2), ('you?', 2))

Hints: 

Explication:
This Python code processes the sentence and creates a tuple called vowel_count_tuples. Each element in this tuple is a pair containing a word from the sentence and the count of vowels in that word. Here's how the code works:

    sentence = "Hello, how are you?": This line initializes a variable named sentence and assigns it a string containing the input sentence.
    vowel_count_tuples = tuple((word, sum(1 for char in word if char.lower() in 'aeiou')) for word in sentence.split()): This line initializes a variable named vowel_count_tuples and assigns it a tuple created using a generator expression.
        for word in sentence.split(): This part of the code sets up a loop that iterates through each word in the sentence. It does this by splitting the sentence into words using whitespace as the delimiter.
        (word, sum(1 for char in word if char.lower() in 'aeiou')): For each word, it creates a pair that consists of the word itself and the count of vowels in the word. The count is calculated using the sum(1 for char in word if char.lower() in 'aeiou') expression, which iterates through each character in the word, checks if it's a vowel (case-insensitive), and adds 1 to the count for each vowel found.
        tuple(...): This surrounds the generator expression and converts the generated pairs into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(vowel_count_tuples): This line of code prints the vowel_count_tuples tuple (which contains pairs of words and their vowel counts) to the console.

Solution:
sentence = "Hello, how are you?"
vowel_count_tuples = tuple((word, sum(1 for char in word if char.lower() in 'aeiou')) for word in sentence.split())
print(sentence)
print(vowel_count_tuples)

#----------------------------------------#
Question:
Tuple of distinct divisors of numbers in a list

Sample Output

[10, 15, 20, 25]

({1, 2, 10, 5}, {1, 3, 5, 15}, {1, 2, 4, 5, 10, 20}, {1, 5, 25})

Hints: 

Explication:
This Python code processes the numbers list and creates a tuple called distinct_divisors. Each element in this tuple is a set of distinct divisors for a number from the numbers list. Here's how the code works:

    numbers = [10, 15, 20, 25]: This line initializes a variable named numbers and assigns it a list containing four numbers.
    distinct_divisors = tuple({divisor for divisor in range(1, num+1) if num % divisor == 0} for num in numbers): This line initializes a variable named distinct_divisors and assigns it a tuple created using a generator expression.
        for num in numbers: This part of the code sets up a loop that iterates through each number num in the numbers list.
        {divisor for divisor in range(1, num+1) if num % divisor == 0}: For each number, it creates a set of distinct divisors. It does this by using a set comprehension that iterates through numbers from 1 to num, checking if num is divisible by each number divisor using the condition num % divisor == 0.
        tuple(...): This surrounds the generator expression and converts the generated sets of distinct divisors into a tuple.
    print(numbers): This line of code prints the original numbers list to the console.
    print(distinct_divisors): This line of code prints the distinct_divisors tuple (which contains sets of distinct divisors for each number) to the console.

Solution:
numbers = [10, 15, 20, 25]
distinct_divisors = tuple({divisor for divisor in range(1, num+1) if num % divisor == 0} for num in numbers)
print(numbers)
print(distinct_divisors)

#----------------------------------------#
Question:
Tuple of words with at least one vowel in a sentence

Sample Output

Hello, how are you?

('Hello,', 'how', 'are', 'you?')

Hints: 

Explication:
This Python code processes the sentence and creates a tuple called vowel_words. The vowel_words tuple contains words from the sentence that contain at least one vowel. Here's how the code works:

    sentence = "Hello, how are you?": This line initializes a variable named sentence and assigns it a string containing the input sentence.
    vowel_words = tuple(word for word in sentence.split() if any(char.lower() in 'aeiou' for char in word)): This line initializes a variable named vowel_words and assigns it a tuple created using a generator expression.
        for word in sentence.split(): This part of the code sets up a loop that iterates through each word word in the sentence. It does this by splitting the sentence into words using whitespace as the delimiter.
        if any(char.lower() in 'aeiou' for char in word): For each word, it checks if there is at least one character in the word that is a vowel. It does this using the any() function with a generator expression. The generator expression checks if each character char (converted to lowercase) in the word is a vowel (i.e., it's in the string 'aeiou').
        tuple(...): This surrounds the generator expression and converts the words that meet the condition into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(vowel_words): This line of code prints the vowel_words tuple (which contains words with at least one vowel) to the console.

Solution:
sentence = "Hello, how are you?"
vowel_words = tuple(word for word in sentence.split() if any(char.lower() in 'aeiou' for char in word))
print(sentence)
print(vowel_words)

#----------------------------------------#
Question:
Tuple of common letters between words of different lengths

Sample Output

apple

cherry

('e',)

Hints: 

ExplicThis Python code processes two words, word1 and word2, and creates a tuple called common_letters. The common_letters tuple contains the characters that are common to both words. Here's how the code works:

    word1 = "apple": This line initializes a variable named word1 and assigns it the string "apple."
    word2 = "cherry": This line initializes a variable named word2 and assigns it the string "cherry."
    common_letters = tuple(char for char in word1 if char in word2) : This line initializes a variable named common_letters and assigns it a tuple created using a generator expression.
        for char in word1: This part of the code sets up a loop that iterates through each character char in the string word1.
        if char in word2: For each character, it checks if the character is present in the string word2.
        tuple(...): This surrounds the generator expression and converts the characters that are common to both words into a tuple.
    print(word1): This line of code prints the original word1 to the console.
    print(word2): This line of code prints the original word2 to the console.
    print(common_letters): This line of code prints the common_letters tuple (which contains the common characters between word1 and word2) to the console.

Solution:
word1 = "apple"
word2 = "cherry"
common_letters = tuple(char for char in word1 if char in word2)
print(word1)
print(word2)
print(common_letters)

#----------------------------------------#
Question:
Tuple of tuples with word and its reversed form

Sample Output

['apple', 'banana', 'cherry', 'date']

(('apple', 'elppa'), ('banana', 'ananab'), ('cherry', 'yrrehc'), ('date', 'etad')))

Hints: 

Explication:
This Python code processes the words list and creates a tuple called reversed_tuples. Each element in this tuple is a pair containing a word from the list and its reverse. Here's how the code works:

    words = ["apple", "banana", "cherry", "date"]: This line initializes a variable named words and assigns it a list containing four words.
    reversed_tuples = tuple((word, word[::-1]) for word in words): This line initializes a variable named reversed_tuples and assigns it a tuple created using a generator expression.
        for word in words: This part of the code sets up a loop that iterates through each word word in the words list.
        (word, word[::-1]): For each word, it creates a pair that consists of the original word and its reverse. The reverse is obtained by using slicing with word[::-1], which reverses the characters in the word.
        tuple(...): This surrounds the generator expression and converts the generated pairs into a tuple.
    print(words): This line of code prints the original words list to the console.
    print(reversed_tuples): This line of code prints the reversed_tuples tuple (which contains pairs of words and their reverses) to the console.

Solution:
words = ["apple", "banana", "cherry", "date"]
reversed_tuples = tuple((word, word[::-1]) for word in words)
print(words)
print(reversed_tuples)

#----------------------------------------#
Question:
Tuple of distinct substrings from a word

Sample Output

hello

('h', 'he', 'hel', 'hell', 'hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o')

Hints: 

Explication:
This Python code processes a single word, word, and creates a tuple called substrings. The substrings tuple contains all possible substrings of the word. Here's how the code works:

    word = "hello": This line initializes a variable named word and assigns it the string "hello."
    substrings = tuple(word[i:j+1] for i in range(len(word)) for j in range(i, len(word)): This line initializes a variable named substrings and assigns it a tuple created using a nested generator expression.
        for i in range(len(word)): The outer loop iterates through the starting index i for substrings. It ranges from 0 to the length of the word.
        for j in range(i, len(word)): The inner loop iterates through the ending index j for substrings. It ranges from the current value of i to the length of the word.
        word[i:j+1]: For each combination of i and j, it slices the word from index i to index j+1, creating a substring.
        tuple(...): This surrounds the nested generator expression and converts the generated substrings into a tuple.
    print(word): This line of code prints the original word to the console.
    print(substrings): This line of code prints the substrings tuple (which contains all possible substrings of the word) to the console.

Solution:
word = "hello"
substrings = tuple(word[i:j+1] for i in range(len(word)) for j in range(i, len(word)))
print(word)
print(substrings)

#----------------------------------------#
Question:
Tuple of tuples with element and its factorial

Sample Output

[1, 2, 3, 4, 5]

((1, 1), (2, 2), (3, 6), (4, 24), (5, 120))

Hints: 

Explication:
This Python code processes the numbers list and creates a tuple called factorial_tuples. Each element in this tuple is a pair containing a number from the list and its factorial computed using the math.factorial function. Here's how the code works:

    import math: This line imports the math module, which provides mathematical functions, including the factorial function.
    numbers = [1, 2, 3, 4, 5]: This line initializes a variable named numbers and assigns it a list containing five numbers.
    factorial_tuples = tuple((x, math.factorial(x)) for x in numbers): This line initializes a variable named factorial_tuples and assigns it a tuple created using a generator expression.
    print(numbers): This line of code prints the original numbers list to the console.
    print(factorial_tuples): This line of code prints the factorial_tuples tuple (which contains pairs of numbers and their factorials) to the console.

Solution:
import math
numbers = [1, 2, 3, 4, 5]
factorial_tuples = tuple((x, math.factorial(x)) for x in numbers)
print(numbers)
print(factorial_tuples)

#----------------------------------------#
Question:
Tuple of pairs of words and their common letters

Sample Output

apple

cherry

(('e', 'e'),)

Hints: 

Explication:
This Python code processes two words, word1 and word2, and creates a tuple called common_letter_tuples. Each element in this tuple is a pair containing a character that is common to both words. Here's how the code works:

    word1 = "apple": This line initializes a variable named word1 and assigns it the string "apple."
    word2 = "cherry": This line initializes a variable named word2 and assigns it the string "cherry."
    common_letter_tuples = tuple((char, char) for char in word1 if char in word2): This line initializes a variable named common_letter_tuples and assigns it a tuple created using a generator expression.
        for char in word1: This part of the code sets up a loop that iterates through each character char in the string word1.
        if char in word2: For each character, it checks if the character is present in the string word2.
        (char, char): If a character is common to both words, it creates a pair with the character. The pair contains the same character twice.
        tuple(...): This surrounds the generator expression and converts the generated character pairs into a tuple.
    print(word1): This line of code prints the original word1 to the console.
    print(word2): This line of code prints the original word2 to the console.
    print(common_letter_tuples): This line of code prints the common_letter_tuples tuple (which contains pairs of common characters) to the console.

Solution:
word1 = "apple"
word2 = "cherry"
common_letter_tuples = tuple((char, char) for char in word1 if char in word2)
print(word1)
print(word2)
print(common_letter_tuples)

#----------------------------------------#
Question:
Tuple of words containing 'a' or 'e' in a sentence

Sample Output

This is a sample sentence with various words.

('a', 'sample', 'sentence', 'various')

Hints: 

Explication:
This Python code processes the sentence and creates a tuple called ae_words. The ae_words tuple contains words from the sentence that contain at least one of the characters 'a' or 'e'. Here's how the code works:

    sentence = "This is a sample sentence with various words.": This line initializes a variable named sentence and assigns it the given sentence.
    ae_words = tuple(word for word in sentence.split() if 'a' in word or 'e' in word): This line initializes a variable named ae_words and assigns it a tuple created using a generator expression.
        for word in sentence.split(): This part of the code sets up a loop that iterates through each word word in the sentence after splitting it by spaces using sentence.split().
        if 'a' in word or 'e' in word: For each word, it checks if either 'a' or 'e' is present in the word.
        tuple(...): This surrounds the generator expression and converts the generated words that meet the condition into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(ae_words): This line of code prints the ae_words tuple (which contains words from the sentence with 'a' or 'e') to the console.

Solution:
sentence = "This is a sample sentence with various words."
ae_words = tuple(word for word in sentence.split() if 'a' in word or 'e' in word)
print(sentence)
print(ae_words)

#----------------------------------------#
Question:
Tuple of pairs of numbers and their product from two lists

Sample Output

[1, 2, 3]

[4, 5, 6]

((1, 4, 4), (1, 5, 5), (1, 6, 6), (2, 4, 8), (2, 5, 10), (2, 6, 12), (3, 4, 12), (3, 5, 15), (3, 6, 18))

Hints: 

Explication:
This Python code processes two lists, list1 and list2, and creates a tuple called product_tuples. Each element in this tuple is a triple containing two numbers from the lists and their product (multiplication result). Here's how the code works:

    list1 = [1, 2, 3]: This line initializes a variable named list1 and assigns it a list containing three numbers.
    list2 = [4, 5, 6]: This line initializes a variable named list2 and assigns it a list containing three numbers.
    product_tuples = tuple((x, y, x * y) for x in list1 for y in list2): This line initializes a variable named product_tuples and assigns it a tuple created using a nested generator expression.
        for x in list1: The outer loop iterates through each number x in the list1.
        for y in list2: The inner loop iterates through each number y in the list2.
        (x, y, x * y): For each combination of x and y, it creates a triple that consists of the two original numbers and their product, which is computed as x * y.
        tuple(...): This surrounds the nested generator expression and converts the generated triples into a tuple.
    print(list1): This line of code prints the original list1 to the console.
    print(list2): This line of code prints the original list2 to the console.
    print(product_tuples): This line of code prints the product_tuples tuple (which contains triples of numbers and their products) to the console.

Solution:
list1 = [1, 2, 3]
list2 = [4, 5, 6]
product_tuples = tuple((x, y, x * y) for x in list1 for y in list2)
print(list1)
print(list2)
print(product_tuples)

#----------------------------------------#
Question:
Tuple of distinct words with length greater than 4 in a sentence

Sample Output

This is a sample sentence with words of various lengths.

('sample', 'sentence', 'words', 'various', 'lengths.')

Hints: 

Explication:
This Python code processes the sentence and creates a tuple called long_word_tuples. The long_word_tuples tuple contains words from the sentence that have a length greater than 4 characters. Here's how the code works:

    sentence = "This is a sample sentence with words of various lengths.": This line initializes a variable named sentence and assigns it the given sentence.
    long_word_tuples = tuple(word for word in sentence.split() if len(word) > 4): This line initializes a variable named long_word_tuples and assigns it a tuple created using a generator expression.
        for word in sentence.split(): This part of the code sets up a loop that iterates through each word word in the sentence after splitting it by spaces using sentence.split().
        if len(word) > 4: For each word, it checks if the length of the word is greater than 4 characters.
        tuple(...): This surrounds the generator expression and converts the generated words that meet the condition into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(long_word_tuples): This line of code prints the long_word_tuples tuple (which contains words from the sentence with a length greater than 4 characters) to the console.

Solution:
sentence = "This is a sample sentence with words of various lengths."
long_word_tuples = tuple(word for word in sentence.split() if len(word) > 4)
print(sentence)
print(long_word_tuples)

#----------------------------------------#
Question:
Unique elements from a list as a tuple

Sample Output

[1, 2, 2, 3, 4, 4, 5, 5]

(1, 2, 3, 4, 5)

Hints: 

Explication:
This Python code processes a list of numbers, numbers, and creates a tuple named unique_tuple that contains the unique elements from the list. Here's how the code works:

    numbers = [1, 2, 2, 3, 4, 4, 5, 5]: This line initializes a variable named numbers and assigns it a list of numbers, including some duplicates.
    unique_tuple = tuple(set(numbers)): This line initializes a variable named unique_tuple and assigns it a tuple containing the unique elements from the list numbers.
        set(numbers): This part of the code converts the list numbers into a set. Sets in Python only store unique elements, so this operation effectively removes any duplicates.
        tuple(...): This surrounds the set and converts it back into a tuple.
    print(numbers): This line of code prints the original list, numbers, to the console.
    print(unique_tuple): This line of code prints the unique_tuple tuple (which contains unique elements from the list) to the console.

Solution:
numbers = [1, 2, 2, 3, 4, 4, 5, 5]
unique_tuple = tuple(set(numbers))
print(numbers)
print(unique_tuple)

#----------------------------------------#
Question:
Unique characters in a string as a tuple

Sample Output

hello

('o', 'e', 'l', 'h')

Hints: 

Explication:
This Python code processes a string, string, and creates a tuple named unique_chars_tuple that contains the unique characters from the string. Here's how the code works:

    string = "hello": This line initializes a variable named string and assigns it the given string.
    unique_chars_tuple = tuple(set(string)): This line initializes a variable named unique_chars_tuple and assigns it a tuple containing the unique characters from the string.
        set(string): This part of the code converts the string string into a set. Sets in Python only store unique elements, so this operation effectively removes any duplicate characters.
        tuple(...): This surrounds the set and converts it back into a tuple.
    print(string): This line of code prints the original string, string, to the console.
    print(unique_chars_tuple): This line of code prints the unique_chars_tuple tuple (which contains unique characters from the string) to the console.

Solution:
string = "hello"
unique_chars_tuple = tuple(set(string))
print(string)
print(unique_chars_tuple)

#----------------------------------------#
Question:
Unique words in a sentence as a tuple

Sample Output

This is a sample sentence with repeated words is

('This', 'words', 'sample', 'with', 'a', 'repeated', 'sentence', 'is')

Hints: 

Explication:
This Python code processes a sentence, sentence, and creates a tuple named unique_words_tuple that contains the unique words from the sentence. Here's how the code works:

    sentence = "This is a sample sentence with repeated words is": This line initializes a variable named sentence and assigns it the given sentence.
    unique_words_tuple = tuple(set(sentence.split())): This line initializes a variable named unique_words_tuple and assigns it a tuple containing the unique words from the sentence.
        sentence.split(): This part of the code splits the sentence into a list of words using whitespace as the separator.
        set(...): This converts the list of words into a set. Sets in Python only store unique elements, so this operation effectively removes any duplicate words.
        tuple(...): This surrounds the set and converts it back into a tuple.
    print(sentence): This line of code prints the original sentence, sentence, to the console.
    print(unique_words_tuple): This line of code prints the unique_words_tuple tuple (which contains unique words from the sentence) to the console.

Solution:
sentence = "This is a sample sentence with repeated words is"
unique_words_tuple = tuple(set(sentence.split()))
print(sentence)
print(unique_words_tuple)

#----------------------------------------#
Question:
Distinct elements from multiple lists while preserving order as a tuple

Sample Output

[1, 2, 3, 4, 5]

[4, 5, 6, 7, 8]

(1, 2, 3, 4, 5, 6, 7, 8)

Hints: 

Explication:
This Python code combines two lists, list1 and list2, into a single iterable and then creates a tuple named unique_ordered_elements_tuple containing the unique elements from both lists while preserving their order. Here's how the code works:

    from itertools import chain: This line imports the chain function from the itertools module. The chain function is used to combine two or more iterables into a single iterable.
    list1 = [1, 2, 3, 4, 5]: This line initializes a variable named list1 and assigns it a list containing five integers.
    list2 = [4, 5, 6, 7, 8]: This line initializes a variable named list2 and assigns it another list containing five integers.
    unique_ordered_elements_tuple = tuple(set(chain(list1, list2)) : This line combines list1 and list2 using the chain function. Then, it converts the combined iterable into a set, which removes any duplicate elements. Finally, it converts the set back into a tuple.
        chain(list1, list2): The chain function takes list1 and list2 as arguments, effectively combining them into a single iterable.
        set(...): This part converts the combined iterable into a set, removing any duplicate elements.
        tuple(...): This surrounds the set and converts it back into a tuple.
    print(list1): This line of code prints the original list1 to the console.
    print(list2): This line of code prints the original list2 to the console.
    print(unique_ordered_elements_tuple): This line of code prints the unique_ordered_elements_tuple tuple (which contains unique elements from both lists while preserving their order) to the console.

Solution:
from itertools import chain
 
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
unique_ordered_elements_tuple = tuple(set(chain(list1, list2)))
print(list1)
print(list2)
print(unique_ordered_elements_tuple)

#----------------------------------------#
Question:
Pairs of distinct words and their reversed forms in a sentence as a tuple

Sample Output

Hello, how are you?

(('are', 'era'), ('you?', '?uoy'), ('Hello,', ',olleH'), ('how', 'woh'))

Hints: 

Explication:
This Python code processes a sentence, sentence, and creates a tuple named distinct_reversed_word_tuples. The tuple contains pairs of words from the sentence, with one element being the original word and the other element being the reversed version of the word. Here's how the code works:

    sentence = "Hello, how are you?": This line initializes a variable named sentence and assigns it the given sentence.
    distinct_reversed_word_tuples = tuple((word, word[::-1]) for word in set(sentence.split())): This line initializes a variable named distinct_reversed_word_tuples and assigns it a tuple created using a generator expression.
        for word in set(sentence.split()): This part of the code sets up a loop that iterates through each distinct word word in the sentence after splitting it by spaces using sentence.split(). The set() function is used to ensure that only distinct words are considered.
        (word, word[::-1]): For each word, a tuple is created containing the original word and its reverse obtained by slicing it with word[::-1].
        tuple(...): This surrounds the generator expression and converts the generated pairs into a tuple.
    print(sentence): This line of code prints the original sentence to the console.
    print(distinct_reversed_word_tuples): This line of code prints the distinct_reversed_word_tuples tuple to the console.

Solution:
sentence = "Hello, how are you?"
distinct_reversed_word_tuples = tuple((word, word[::-1]) for word in set(sentence.split()))
print(sentence)
print(distinct_reversed_word_tuples)

#----------------------------------------#
Question:
Distinct elements from a list of mixed data types as a tuple

Sample Output

[1, 'apple', 2.5, 'banana', 3, 'cherry']

(1, 2.5, 3, 'cherry', 'apple', 'banana')

Hints: 

Explication:
This Python code processes a list, mixed_data, which contains a mix of different data types, and creates a tuple named distinct_mixed_elements_tuple containing the unique elements from the list. Here's how the code works:

    mixed_data = [1, 'apple', 2.5, 'banana', 3, 'cherry']: This line initializes a variable named mixed_data and assigns it a list containing a mix of integers, floats, and strings.
    distinct_mixed_elements_tuple = tuple(set(item for item in mixed_data)): This line initializes a variable named distinct_mixed_elements_tuple and assigns it a tuple created using a generator expression.
        set(item for item in mixed_data): This part of the code converts the elements in mixed_data into a set, which removes any duplicate elements. It does so by iterating through each item in mixed_data.
        tuple(...): This surrounds the set and converts it back into a tuple.
    print(mixed_data): This line of code prints the original mixed_data list to the console.
    print(distinct_mixed_elements_tuple): This line of code prints the distinct_mixed_elements_tuple tuple to the console.

Solution:
mixed_data = [1, 'apple', 2.5, 'banana', 3, 'cherry']
distinct_mixed_elements_tuple = tuple(set(item for item in mixed_data))
print(mixed_data)
print(distinct_mixed_elements_tuple)

#----------------------------------------#
Question:
Pairs of distinct elements and their sum of digits, using divmod(), from two lists as a tuple

Sample Output

[123, 456, 789]

[234, 567, 890]

((123, 234, 42), (456, 890, 140), (789, 890, 176), (456, 567, 114), (456, 234, 78), (123, 890, 104), (123, 567, 78), (789, 234, 114), (789, 567, 150))

Hints: 

Explication:
This Python code combines two lists, list1 and list2, and then creates a tuple named digit_sum_tuples containing unique pairs of elements from both lists. Each pair consists of one element from list1 and one element from list2, along with the sum of their digit sums (sums of individual digits). Here's how the code works:

    list1 = [123, 456, 789]: This line initializes a variable named list1 and assigns it a list containing three integers.
    list2 = [234, 567, 890]: This line initializes a variable named list2 and assigns it another list containing three integers.
    digit_sum_tuples = tuple(set((x, y, sum(divmod(x, 10)) + sum(divmod(y, 10))) for x in list1 for y in list2)): This line initializes a variable named digit_sum_tuples and assigns it a tuple created using a generator expression.
        for x in list1 for y in list2: This part of the code sets up nested loops, iterating through elements in list1 (x) and elements in list2 (y).
        (x, y, sum(divmod(x, 10)) + sum(divmod(y, 10)): For each pair of elements (x, y), this part creates a tuple containing x, y, and the sum of their digit sums.
            divmod(x, 10): This function calculates the quotient and remainder when x is divided by 10. It effectively breaks down the number x into its individual digits.
            sum(...): This function calculates the sum of the digits obtained from divmod(x, 10) and divmod(y, 10).
        set(...): This part converts the generated tuples into a set, removing any duplicate tuples.
        tuple(...): This surrounds the set and converts it back into a tuple.
    print(list1): This line of code prints the original list1 to the console.
    print(list2): This line of code prints the original list2 to the console.
    print(digit_sum_tuples): This line of code prints the digit_sum_tuples tuple to the console.

Solution:
list1 = [123, 456, 789]
list2 = [234, 567, 890]
digit_sum_tuples = tuple(set((x, y, sum(divmod(x, 10)) + sum(divmod(y, 10))) for x in list1 for y in list2))
print(list1)
print(list2)
print(digit_sum_tuples)

#----------------------------------------#
Question:
Distinct elements from multiple lists using set symmetric difference, as a tuple

Sample Output

[1, 2, 3, 4]

[3, 4, 5, 6]

[5, 6, 7, 8]

(1, 2, 7, 8)

Hints: 

Explication:
This Python code processes three lists, list1, list2, and list3, and creates a tuple named distinct_elements_symmetric_diff. The tuple contains the distinct elements that are present in exactly one of the three lists. Here's how the code works:

    list1 = [1, 2, 3, 4]: This line initializes a variable named list1 and assigns it a list containing four integers.
    list2 = [3, 4, 5, 6]: This line initializes a variable named list2 and assigns it another list containing four integers.
    list3 = [5, 6, 7, 8]: This line initializes a variable named list3 and assigns it a third list containing four integers.
    distinct_elements_symmetric_diff = tuple(set(list1) ^ set(list2) ^ set(list3)): This line initializes a variable named distinct_elements_symmetric_diff and assigns it a tuple created by applying the symmetric difference (^) operation on the sets of elements from list1, list2, and list3.
        set(list1) ^ set(list2) ^ set(list3): This part of the code calculates the symmetric difference of the sets created from list1, list2, and list3. The symmetric difference includes elements that are unique to each set, i.e., elements that are present in exactly one of the three sets.
        tuple(...): This surrounds the set and converts it back into a tuple.
    print(list1): This line of code prints the original list1 to the console.
    print(list2): This line of code prints the original list2 to the console.
    print(list3): This line of code prints the original list3 to the console.
    print(distinct_elements_symmetric_diff): This line of code prints the distinct_elements_symmetric_diff tuple to the console.

Solution:
list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
list3 = [5, 6, 7, 8]
distinct_elements_symmetric_diff = tuple(set(list1) ^ set(list2) ^ set(list3))
print(list1)
print(list2)
print(list3)
print(distinct_elements_symmetric_diff)

#----------------------------------------#
Question:
Pairs of numbers and their sum, with even and odd pairs separated, from two lists as a tuple

Sample Output

[1, 2, 3]

[4, 5, 6]

(((1, 5, 6), (2, 4, 6), (2, 6, 8), (3, 5, 8)), ((1, 4, 5), (1, 6, 7), (2, 5, 7), (3, 4, 7), (3, 6, 9)))

Hints: 

Explication:
This Python code processes two lists, list1 and list2, and creates a tuple of tuples named even_odd_sum_tuples. The tuple contains two inner tuples: one for even sums and one for odd sums of pairs of elements from the two lists. Here's how the code works:

    list1 = [1, 2, 3]: This line initializes a variable named list1 and assigns it a list containing three integers.
    list2 = [4, 5, 6]: This line initializes a variable named list2 and assigns it another list containing three integers.
    even_odd_sum_tuples = (..., ...): This line initializes a variable named even_odd_sum_tuples and assigns it a tuple containing two inner tuples.
        tuple((x, y, x + y) for x in list1 for y in list2 if (x + y) % 2 == 0): The first inner tuple contains pairs of elements from list1 and list2 (x, y) where the sum (x + y) is even. It uses a generator expression to create tuples of the form (x, y, x + y) for even sums.
        tuple((x, y, x + y) for x in list1 for y in list2 if (x + y) % 2 != 0): The second inner tuple is similar to the first, but it includes pairs where the sum (x + y) is odd.
    print(list1): This line of code prints the original list1 to the console.
    print(list2): This line of code prints the original list2 to the console.
    print(even_odd_sum_tuples): This line of code prints the even_odd_sum_tuples tuple to the console.

Solution:
list1 = [1, 2, 3]
list2 = [4, 5, 6]
even_odd_sum_tuples = (tuple((x, y, x + y) for x in list1 for y in list2 if (x + y) % 2 == 0),tuple((x, y, x + y) for x in list1 for y in list2 if (x + y) % 2 != 0))
print(list1)
print(list2)
print(even_odd_sum_tuples)

#----------------------------------------#
Question:
Pairs of distinct elements and their sum of digits from two lists as a tuple

Sample Output

[123, 456, 789]

[234, 567, 890]

((123, 234, 15), (123, 567, 24), (123, 890, 23), (456, 234, 24), (456, 567, 33), (456, 890, 32), (789, 234, 33), (789, 567, 42), (789, 890, 41))

Hints: 

Explication:
This Python code processes two lists, list1 and list2, and creates a tuple of tuples named digit_sum_tuples. The tuple contains pairs of elements from the two lists and the sum of their digits. Here's how the code works:

    list1 = [123, 456, 789]: This line initializes a variable named list1 and assigns it a list containing three integers.
    list2 = [234, 567, 890]: This line initializes a variable named list2 and assigns it another list containing three integers.
    digit_sum_tuples = tuple(...): This line initializes a variable named digit_sum_tuples and assigns it a tuple created by using a generator expression.
        (... for x in list1 for y in list2): The generator expression iterates through all pairs of elements (x, y) from list1 and list2.
        (x, y, sum(int(digit) for digit in str(x)) + sum(int(digit) for digit in str(y))): For each pair of elements (x, y), it calculates the sum of the digits in both x and y by converting them to strings, splitting the strings into digits, and summing those digits. It then creates a tuple of the form (x, y, sum_of_digits).
    print(list1): This line of code prints the original list1 to the console.
    print(list2): This line of code prints the original list2 to the console.
    print(digit_sum_tuples): This line of code prints the digit_sum_tuples tuple to the console.

Solution:
list1 = [123, 456, 789]
list2 = [234, 567, 890]
digit_sum_tuples = tuple((x, y, sum(int(digit) for digit in str(x)) + sum(int(digit) for digit in str(y))) for x in list1 for y in list2)
print(list1)
print(list2)
print(digit_sum_tuples)

#----------------------------------------#
Question:
Distinct characters from multiple strings with case-insensitivity as a tuple

Sample Output

['apple', 'Banana', 'Cherry']

('e', 'h', 'b', 'n', 'c', 'r', 'p', 'y', 'a', 'l')

Hints: 

Explication:
This Python code processes a list of strings, strings, and creates a tuple named distinct_case_insensitive_chars. The tuple contains distinct characters (case-insensitive) from all the strings in the list. Here's how the code works:

    strings = ["apple", "Banana", "Cherry"]: This line initializes a variable named strings and assigns it a list of three strings, including mixed-case characters.
    distinct_case_insensitive_chars = tuple(...): This line initializes a variable named distinct_case_insensitive_chars and assigns it a tuple created by using a generator expression.
        (... for string in strings for char in string): The generator expression iterates through each string in the strings list and then iterates through each character in each string.
        char.lower() for ...: For each character char, it converts the character to lowercase using the lower() method. This ensures that the characters are treated in a case-insensitive manner.
    set(...): The set() function is used to ensure that only distinct characters are retained. Since sets do not allow duplicate elements, this operation automatically eliminates duplicate characters.
    tuple(...): Finally, the set of case-insensitive characters is converted to a tuple.
    print(strings): This line of code prints the original strings list to the console.
    print(distinct_case_insensitive_chars): This line of code prints the distinct_case_insensitive_chars tuple to the console
Solution:
strings = ["apple", "Banana", "Cherry"]
distinct_case_insensitive_chars = tuple(set(char.lower() for string in strings for char in string))
print(strings)
print(distinct_case_insensitive_chars)

#----------------------------------------#
Question:
Pairs of distinct words and their lengths, excluding words with lengths not divisible by 3, in a sentence as a tuple

Sample Output

Hello, how are you?

(('how', 3), ('Hello,', 6), ('are', 3))

Hints: 

Explication:
This Python code processes a sentence and creates a tuple named divisible_by_3_length_word_length_tuples. The tuple contains word-length pairs for words in the sentence with a length divisible by 3. Here's how the code works:

    sentence = "Hello, how are you?": This line initializes a variable named sentence and assigns it a string containing a sentence.
    divisible_by_3_length_word_length_tuples = tuple(...): This line initializes a variable named divisible_by_3_length_word_length_tuples and assigns it a tuple created by using a generator expression.
        (... for word in set(sentence.split())): The generator expression iterates through each unique word in the sentence by splitting the sentence into words using split() and converting the result to a set to eliminate duplicate words.
        (word, len(word)) for ...: For each unique word word, it creates a tuple containing the word itself and its length (number of characters).
        if len(word) % 3 == 0: The condition if len(word) % 3 == 0 checks if the length of the word is divisible by 3.
    print(sentence): This line of code prints the original sentence to the console.
    print(divisible_by_3_length_word_length_tuples): This line of code prints the divisible_by_3_length_word_length_tuples tuple to the console.

Solution:
sentence = "Hello, how are you?"
divisible_by_3_length_word_length_tuples = tuple((word, len(word)) for word in set(sentence.split()) if len(word) % 3 == 0)
 
print(sentence)
print(divisible_by_3_length_word_length_tuples)

#----------------------------------------#
Question:
DEPART DES Sets
Generate a set of squares of numbers from 1 to 10

Sample Output

{64, 1, 4, 36, 100, 9, 16, 49, 81, 25}

Hints: 

Explication:
Creates a set named squares that contains the squares of numbers from 1 to 10. Here's how the code works:

    {x**2 for x in range(1, 11)}: This is a set comprehension. It iterates over the numbers from 1 to 10 (inclusive) using range(1, 11) and calculates the square of each number x using x**2. The set comprehension collects these squared values into a set.
    print(squares): This line of code prints the set squares to the console.

Solution:
squares = {x**2 for x in range(1, 11)}
print(squares)

#----------------------------------------#
Question:
Create a set of even numbers from 1 to 20

Sample Output

{2, 4, 6, 8, 10, 12, 14, 16, 18, 20}

Hints: 

Explication:
This Python code generates a set named evens containing even numbers in the range from 2 to 20 (inclusive). Here's how the code works:

    evens = {x for x in range(2, 21, 2)}: This line uses a set comprehension to create the evens set. It iterates through numbers in the range from 2 to 20 (inclusive) with a step size of 2. This range includes all even numbers in that range.
    The set comprehension {...} collects these even numbers and forms a set with distinct elements. Since sets do not allow duplicate values, only distinct even numbers are included in the set.
    print(evens): This line prints the evens set to the console.

Solution:
evens = {x for x in range(2, 21, 2)}
print(evens)

#----------------------------------------#
Question:
Generate a set of characters from a string

Sample Output

Hello, world!

{'e', 'r', 'o', 'H', 'w', 'l', 'd'}

Hints: 

Explication:
This Python code processes a string, string, and creates a set, chars, containing unique alphabetical characters (letters) from the string. Here's how the code works:

    string = "Hello, world!": This line initializes a variable named string and assigns it the string "Hello, world!"
    chars = {char for char in string if char.isalpha()}: This line initializes a variable named chars and assigns it a set created using a set comprehension. It iterates over each character char in the string and adds it to the set if it is an alphabetical character (a letter).
        {...}: This notation is used to create a set.
        char for char in string: This part of the comprehension iterates over each character in the string.
        if char.isalpha(): This conditional check ensures that only alphabetical characters (letters) are included in the set. It uses the isalpha() method to determine if a character is a letter.
    print(string): This line of code prints the original string to the console.
    print(chars): This line of code prints the chars set to the console.

Solution:
string = "Hello, world!"
chars = {char for char in string if char.isalpha()}
print(string)
print(chars)

#----------------------------------------#
Question:
Create a set of lengths of words in a sentence

Sample Output

This is a sample sentence.

{1, 2, 4, 6, 9}

Hints: 

Explication:
This Python code processes a sentence, sentence, and creates a set, word_lengths, containing the lengths of words in the sentence. Here's how the code works:

    sentence = "This is a sample sentence.": This line initializes a variable named sentence and assigns it the string "This is a sample sentence."
    word_lengths = {len(word) for word in sentence.split()}: This line initializes a variable named word_lengths and assigns it a set created using a set comprehension. It splits the sentence into words using split() and iterates over each word, adding its length (number of characters) to the set.
        {...}: This notation is used to create a set.
        len(word) for word in sentence.split(): This part of the comprehension iterates over each word in the sentence after splitting it and calculates the length of each word using len(word).
    print(sentence): This line of code prints the original sentence to the console.
    print(word_lengths): This line of code prints the word_lengths set to the console.

Solution:
sentence = "This is a sample sentence."
word_lengths = {len(word) for word in sentence.split()}
print(sentence)
print(word_lengths)

#----------------------------------------#
Question:
Generate a set of prime numbers from 1 to 50

Sample Output

{2, 3, 5, 37, 7, 41, 11, 43, 13, 47, 17, 19, 23, 29, 31}

Hints: 

Explication:
This Python code defines a function is_prime to check whether a given number is prime or not. Then, it uses a set comprehension to create a set called prime_numbers containing all prime numbers from 1 to 50. Here's a step-by-step explanation of the code:

    def is_prime(n): This line defines a function named is_prime that takes an integer n as an argument. It will return True if n is a prime number and False otherwise.
    if n <= 1:: This is the first condition. If n is less than or equal to 1, it's not a prime number. Prime numbers are greater than 1, so the function returns False in this case.
    for i in range(2, int(n**0.5) + 1):: This loop iterates from 2 to the square root of n (rounded up to the nearest integer) plus 1. This is an optimization to reduce the number of divisors to check. Prime numbers have no divisors other than 1 and themselves, and we only need to check up to the square root of n.
    if n % i == 0:: This condition checks if n is divisible by i. If it is, then n is not a prime number, and the function returns False.
    return True: If the function doesn't return False in the previous conditions, it means that n is not divisible by any number in the given range, and it's a prime number. In this case, the function returns True.
    prime_numbers = {x for x in range(1, 51) if is_prime(x)}: This line creates a set called prime_numbers using a set comprehension. It iterates over numbers from 1 to 50 and includes them in the set if the is_prime function returns True for that number. This set comprehension collects all prime numbers from 1 to 50.
    print(prime_numbers): This line prints the prime_numbers set to the console, displaying all prime numbers between 1 and 50.

Solution:
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
 
prime_numbers = {x for x in range(1, 51) if is_prime(x)}
print(prime_numbers)

#----------------------------------------#
Question:
Create a set of lowercase letters

Sample Output

{'a', 'e', 'u', 'z', 'y', 'j', 'k', 't', 'x', 'd', 'r', 'v', 'o', 'h', 'f', 'i', 'c', 'g', 'l', 'p', 'b', 'n', 'm', 'q', 's', 'w'}

Hints: 

Explication:
Creates a set named lowercase_letters containing all the lowercase letters of the English alphabet. Here's how the code works:

    {chr(x) for x in range(ord('a'), ord('z')+1)} : This is a set comprehension that iterates over a range of Unicode code points corresponding to lowercase English letters.
        chr(x): This function converts a Unicode code point x into the corresponding character.
        for x in range(ord('a'), ord('z')+1): It iterates over a range of code points, starting from the code point of 'a' (ord('a')) to the code point of 'z' (ord('z')), inclusive.
    lowercase_letters = {...}: This part of the code initializes a variable named lowercase_letters and assigns it the set created by the set comprehension.
    print(lowercase_letters): This line of code prints the lowercase_letters set to the console.

Solution:
lowercase_letters = {chr(x) for x in range(ord('a'), ord('z')+1)}
print(lowercase_letters)

#----------------------------------------#
Question:
Generate a set of uppercase letters

Sample Output

{'U', 'M', 'F', 'D', 'A', 'I', 'R', 'Y', 'V', 'N', 'T', 'P', 'X', 'O', 'C', 'L', 'W', 'Q', 'K', 'J', 'H', 'Z', 'E', 'G', 'S', 'B'}

Hints: 

Explication:
This Python code creates a set named uppercase_letters containing all the uppercase letters of the English alphabet. Here's how the code works:

    {chr(x) for x in range(ord('A'), ord('Z')+1)}: This is a set comprehension that iterates over a range of Unicode code points corresponding to uppercase English letters.
        chr(x): This function converts a Unicode code point x into the corresponding character.
        for x in range(ord('A'), ord('Z')+1): It iterates over a range of code points, starting from the code point of 'A' (ord('A')) to the code point of 'Z' (ord('Z')), inclusive.
    uppercase_letters = {...}: This part of the code initializes a variable named uppercase_letters and assigns it the set created by the set comprehension.
    print(uppercase_letters): This line of code prints the uppercase_letters set to the console.

Solution:
uppercase_letters = {chr(x) for x in range(ord('A'), ord('Z')+1)}
print(uppercase_letters)

#----------------------------------------#
Question:
Create a set of even numbers squared and odd numbers cubed from 1 to 10

Sample Output

{64, 1, 4, 36, 100, 16, 343, 729, 27, 125}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named result. The set contains the squares of even numbers and the cubes of odd numbers in the range from 1 to 10. Here's how the code works:

    result = {x**2 if x % 2 == 0 else x**3 for x in range(1, 11)}: This line initializes a set named result using a set comprehension.
        for x in range(1, 11): This part of the code sets up a loop that iterates through the numbers from 1 to 10 (inclusive).
        {x**2 if x % 2 == 0 else x**3}: For each number x, this part calculates the square (x**2) if x is even (i.e., if x % 2 == 0 is true), and it calculates the cube (x**3) if x is odd.
    print(result): This line of code prints the result set to the console.

Solution:
result = {x**2 if x % 2 == 0 else x**3 for x in range(1, 11)}
print(result)

#----------------------------------------#
Question:
Generate a set of common multiples of 3 and 5 up to 100

Sample Output

{75, 45, 15, 90, 60, 30}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named common_multiples. The set contains the common multiples of 3 and 5 in the range from 1 to 100. Here's how the code works:

    common_multiples = {x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0}: This line initializes the set common_multiples using a set comprehension.
        for x in range(1, 101): This part of the code sets up a loop that iterates through the numbers from 1 to 100 (inclusive).
        {x}: For each number x, this part includes it in the set if it is a multiple of 3 (x % 3 == 0) and also a multiple of 5 (x % 5 == 0).
    print(common_multiples): This line of code prints the common_multiples set to the console.

Solution:
common_multiples = {x for x in range(1, 101) if x % 3 == 0 and x % 5 == 0}
print(common_multiples)

#----------------------------------------#
Question:
Create a set of reversed strings from another set

Sample Output

{'cherry', 'apple', 'banana'}

{'ananab', 'elppa', 'yrrehc'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named reversed_words containing the reversed versions of the words in the original set words. Here's how the code works:

    words = {"apple", "banana", "cherry"}: This line initializes a set named words containing three words: "apple," "banana," and "cherry."
    reversed_words = {word[::-1] for word in words}: This line initializes the set reversed_words using a set comprehension.
        for word in words: This part of the code sets up a loop that iterates through each word in the words set.
        {word[::-1]}: For each word, this part includes its reverse (reversed string) in the reversed_words set. The word[::-1] slicing operation is used to reverse the word.
    print(words): This line of code prints the original words set to the console.
    print(reversed_words): This line of code prints the reversed_words set to the console.

Solution:
words = {"apple", "banana", "cherry"}
reversed_words = {word[::-1] for word in words}
print(words)
print(reversed_words)

#----------------------------------------#
Question:
Generate a set of positive square roots from a set of positive numbers

Sample Output

{16, 1, 4, 9, 25}

{1.0, 2.0, 3.0, 4.0, 5.0}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named positive_sqrt that contains the square roots of the numbers in the set positive_numbers. Here's how the code works:

    positive_numbers = {1, 4, 9, 16, 25}: This line initializes a set named positive_numbers containing five positive integers.
    positive_sqrt = {math.sqrt(x) for x in positive_numbers}: This line initializes the set positive_sqrt using a set comprehension.
        for x in positive_numbers: This part of the code sets up a loop that iterates through each number in the positive_numbers set.
        {math.sqrt(x)}: For each number, this part includes its square root, calculated using the math.sqrt() function, in the positive_sqrt set.
    print(positive_numbers): This line of code prints the original positive_numbers set to the console.
    print(positive_sqrt): This line of code prints the positive_sqrt set to the console.

Solution:
import math
positive_numbers = {1, 4, 9, 16, 25}
positive_sqrt = {math.sqrt(x) for x in positive_numbers}
print(positive_numbers)
print(positive_sqrt)

#----------------------------------------#
Question:
Create a set of uppercase words from a sentence

Sample Output

This is a sample sentence.

{'SAMPLE', 'THIS', 'SENTENCE.', 'A', 'IS'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named uppercase_words that contains the uppercase versions of the words in the input sentence. Here's how the code works:

    sentence = "This is a sample sentence.": This line initializes a string named sentence containing a sample sentence.
    uppercase_words = {word.upper() for word in sentence.split()}: This line initializes the set uppercase_words using a set comprehension.
        for word in sentence.split(): This part of the code splits the sentence into words using the split() method and sets up a loop to iterate through the words.
        {word.upper()}: For each word, this part includes its uppercase version (converted using the upper() method) in the uppercase_words set.
    print(sentence): This line of code prints the original sentence to the console.
    print(uppercase_words): This line of code prints the uppercase_words set to the console.

Solution:
sentence = "This is a sample sentence."
uppercase_words = {word.upper() for word in sentence.split()}
print(sentence)
print(uppercase_words)

#----------------------------------------#
Question:
Generate a set of non-vowel characters from a string

Sample Output

Hello, world!

{' ', '!', 'w', ',', 'r', 'H', 'l', 'd'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named non_vowels that contains the non-vowel characters in the input string. Here's how the code works:

    string = "Hello, world!": This line initializes a string named string containing the text "Hello, world!".
    non_vowels = {char for char in string if char.lower() not in 'aeiou'}: This line initializes the set non_vowels using a set comprehension.
        for char in string: This part of the code sets up a loop that iterates through each character in the string.
        {char}: For each character, this part includes it in the non_vowels set if it is not a vowel. The condition char.lower() not in 'aeiou' checks if the lowercase version of the character is not in the string 'aeiou', effectively filtering out vowels.
    print(string): This line of code prints the original string to the console.
    print(non_vowels): This line of code prints the non_vowels set to the console.

Solution:
string = "Hello, world!"
non_vowels = {char for char in string if char.lower() not in 'aeiou'}
print(string)
print(non_vowels)

#----------------------------------------#
Question:
Create a set of unique numbers from a list

Sample Output

[1, 2, 3, 2, 4, 5, 1]

{1, 2, 3, 4, 5}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named unique_numbers that contains the unique elements from the list numbers. Here's how the code works:

    numbers = [1, 2, 3, 2, 4, 5, 1]: This line initializes a list named numbers containing several integers, including some repeated values.
    unique_numbers = {x for x in numbers}: This line initializes the set unique_numbers using a set comprehension.
        for x in numbers: This part of the code sets up a loop that iterates through each element in the numbers list.
        {x}: For each element, this part includes it in the unique_numbers set. However, because sets do not allow duplicate elements, only the unique elements are included in the resulting set.
    print(numbers): This line of code prints the original numbers list to the console.
    print(unique_numbers): This line of code prints the unique_numbers set to the console.

Solution:
numbers = [1, 2, 3, 2, 4, 5, 1]
unique_numbers = {x for x in numbers}
print(numbers)
print(unique_numbers)

#----------------------------------------#
Question:
nerate a set of ASCII values of characters from a string

Sample Output

Hello, world!

{32, 33, 100, 101, 72, 108, 44, 111, 114, 119}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named ascii_values that contains the ASCII values of the characters in the input string. Here's how the code works:

    string = "Hello, world!": This line initializes a string named string containing the text "Hello, world!".
    ascii_values = {ord(char) for char in string}: This line initializes the set ascii_values using a set comprehension.
        for char in string: This part of the code sets up a loop that iterates through each character in the string.
        {ord(char)}: For each character, this part includes its ASCII value, calculated using the ord() function, in the ascii_values set.
    print(string): This line of code prints the original string to the console.
    print(ascii_values): This line of code prints the ascii_values set to the console.

Solution:
string = "Hello, world!"
ascii_values = {ord(char) for char in string}
print(string)
print(ascii_values)

#----------------------------------------#
Question:
Generate a set of tuples containing numbers and their squares

Sample Output

{(2, 4), (4, 16), (1, 1), (3, 9), (5, 25)}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named num_squares that contains tuples with pairs of numbers and their squares. Here's how the code works:

    {(x, x**2) for x in range(1, 6)}: This set comprehension creates a set by iterating through the values of x from 1 to 5 (inclusive). For each value of x, it generates a tuple (x, x**2) containing the original number x and its square x**2. The result is a set of these tuples.
    print(num_squares): This line of code prints the num_squares set to the console.

Solution:
num_squares = {(x, x**2) for x in range(1, 6)}
print(num_squares)

#----------------------------------------#
Question:
Create a set of vowels from a string

Sample Output

Hello, world!

{'e', 'o'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named vowels that contains lowercase vowel characters from the input string. Here's how the code works:

    string = "Hello, world!": This line initializes a string named string containing the text "Hello, world!".
    vowels = {char.lower() for char in string if char.lower() in 'aeiou'}: This line initializes the set vowels using a set comprehension.
        for char in string: This part of the code sets up a loop that iterates through each character in the string.
        {char.lower()}: For each character, this part includes its lowercase version in the vowels set, but only if it is a vowel. The condition char.lower() in 'aeiou' checks if the lowercase version of the character is one of the lowercase vowels.
    print(string): This line of code prints the original string to the console.
    print(vowels): This line of code prints the vowels set to the console.

Solution:
string = "Hello, world!"
vowels = {char.lower() for char in string if char.lower() in 'aeiou'}
print(string)
print(vowels)

#----------------------------------------#
Question:
Generate a set of numbers that are perfect squares from 1 to 100

Sample Output

{64, 1, 4, 36, 100, 9, 16, 49, 81, 25}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named perfect_squares that contains perfect square numbers in the range from 1 to 100. Here's how the code works:

    {x for x in range(1, 101) if int(x**0.5)**2 == x}: This set comprehension creates a set by iterating through the values of x from 1 to 100 (inclusive). For each value of x, it checks if the integer value of the square root of x (int(x**0.5)) squared (**2) is equal to x. If this condition is true, it includes x in the perfect_squares set.
    print(perfect_squares) : This line of code prints the perfect_squares set to the console.

Solution:
perfect_squares = {x for x in range(1, 101) if int(x**0.5)**2 == x}
print(perfect_squares)

#----------------------------------------#
Question:
Generate a set of characters that are digits from a string

Sample Output

12345Hello67890

{'2', '8', '7', '3', '9', '0', '1', '5', '4', '6'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named digits that contains all the unique digit characters from the input string. Here's how the code works:

    string = "12345Hello67890": This line initializes a string named string containing a mix of digits and non-digit characters.
    digits = {char for char in string if char.isdigit()}: This line initializes the set digits using a set comprehension.
        for char in string: This part of the code sets up a loop that iterates through each character in the string.
        {char.isdigit()}: For each character, this part includes the character in the digits set if it is a digit. The condition char.isdigit() checks whether the character is a digit or not.
    print(string): This line of code prints the original string to the console.
    print(digits) : This line of code prints the digits set to the console.

Solution:
string = "12345Hello67890"
digits = {char for char in string if char.isdigit()}
print(string)
print(digits)

#----------------------------------------#
Question:
Create a set of numbers that are powers of 2 from 1 to 10

Sample Output

{32, 64, 2, 128, 4, 256, 512, 1024, 8, 16}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named powers_of_2 that contains the powers of 2 for x ranging from 1 to 10. Here's how the code works:

    {2**x for x in range(1, 11)}: This set comprehension creates a set by iterating through the values of x from 1 to 10 (inclusive). For each value of x, it calculates the corresponding power of 2, 2**x, and includes it in the powers_of_2 set.
    print(powers_of_2): This line of code prints the powers_of_2 set to the console.

Solution:
powers_of_2 = {2**x for x in range(1, 11)}
print(powers_of_2)

#----------------------------------------#
Question:
Generate a set of common elements from two lists

Sample Output

[1, 2, 3, 4, 5]

[3, 4, 5, 6, 7]

{3, 4, 5}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named common_elements that contains the elements that are common between two lists, list1 and list2. Here's how the code works:

    list1 = [1, 2, 3, 4, 5] and list2 = [3, 4, 5, 6, 7] : These lines initialize two lists, list1 and list2, with some integer values.
    common_elements = {x for x in list1 if x in list2}: This line initializes the set common_elements using a set comprehension.
        for x in list1: This part of the code sets up a loop that iterates through each element x in list1.
        {x for x in list1 if x in list2}: For each element x in list1, this part includes x in the common_elements set if it is also found in list2.
    print(list1): This line of code prints list1 to the console.
    print(list2): This line of code prints list2 to the console.
    print(common_elements): This line of code prints the common_elements set to the console.

Solution:
list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]
common_elements = {x for x in list1 if x in list2}
print(list1)
print(list2)
print(common_elements)

#----------------------------------------#
Question:
Generate a set of characters that are not alphanumeric from a string

Sample Output

Hello, world!

{'!', ' ', ','}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named non_alphanumeric that contains all the non-alphanumeric characters from the input string. Here's how the code works:

    string = "Hello, world!": This line initializes a string named string containing letters, spaces, and punctuation.
    non_alphanumeric = {char for char in string if not char.isalnum()}: This line initializes the set non_alphanumeric using a set comprehension.
        for char in string: This part of the code sets up a loop that iterates through each character in the string.
        {char.isalnum()}: For each character, this part includes the character in the non_alphanumeric set if it is not alphanumeric. The condition char.isalnum() checks whether the character is alphanumeric or not.
    print(string): This line of code prints the original string to the console.
    print(non_alphanumeric): This line of code prints the non_alphanumeric set to the console.

Solution:
string = "Hello, world!"
non_alphanumeric = {char for char in string if not char.isalnum()}
print(string)
print(non_alphanumeric)

#----------------------------------------#
Question:
Create a set of characters that are consonants from a string

Sample Output

Hello, world!

{'H', 'r', 'w', 'd', 'l'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named consonants that contains all the consonant characters from the input string. Here's how the code works:

    string = "Hello, world!": This line initializes a string named string containing letters, spaces, and punctuation.
    consonants = {char for char in string if char.isalpha() and char.lower() not in 'aeiou'}: This line initializes the set consonants using a set comprehension.
        for char in string: This part of the code sets up a loop that iterates through each character in the string.
        {char.isalpha() and char.lower() not in 'aeiou'}: For each character, this part includes the character in the consonants set if it is an alphabetical character (i.e., char.isalpha()) and not a lowercase vowel (i.e., char.lower() not in 'aeiou').
    print(string): This line of code prints the original string to the console.
    print(consonants): This line of code prints the consonants set to the console.

Solution:
string = "Hello, world!"
consonants = {char for char in string if char.isalpha() and char.lower() not in 'aeiou'}
print(string)
print(consonants)

#----------------------------------------#
Question:
Create a set of strings with characters in uppercase

Sample Output

{'banana', 'apple', 'cherry'}

{'APPLE', 'BANANA', 'CHERRY'}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named uppercase_strings that contains the uppercase versions of the words in the input set strings. Here's how the code works:

    strings = {"apple", "banana", "cherry"}: This line initializes a set named strings with three string elements.
    uppercase_strings = {word.upper() for word in strings}: This line initializes the set uppercase_strings using a set comprehension.
        for word in strings: This part of the code sets up a loop that iterates through each word (string) in the strings set.
        {word.upper()}: For each word, this part includes the uppercase version of the word in the uppercase_strings set using the .upper() method.
    print(strings): This line of code prints the original set strings to the console.
    print(uppercase_strings): This line of code prints the uppercase_strings set to the console.

Solution:
strings = {"apple", "banana", "cherry"}
uppercase_strings = {word.upper() for word in strings}
print(strings)
print(uppercase_strings)

#----------------------------------------#
Question:
Create a set of words with their characters sorted

Sample Output

{'banana', 'apple', 'cherry'}

{'aaabnn', 'aelpp', 'cehrry'}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named sorted_chars, which contains the words from the input set words, but with their characters sorted alphabetically. Here's how the code works:

    words = {"apple", "banana", "cherry"}: This line initializes a set named words with three string elements.
    sorted_chars = {''.join(sorted(word)) for word in words}: This line initializes the set sorted_chars using a set comprehension.
        for word in words: This part of the code sets up a loop that iterates through each word (string) in the words set.
        {''.join(sorted(word))}: For each word, this part sorts the characters within the word alphabetically using the sorted() function, and then ''.join() is used to concatenate the sorted characters back into a single string.
    print(words): This line of code prints the original set words to the console.
    print(sorted_chars): This line of code prints the sorted_chars set to the console.

Solution:
words = {"apple", "banana", "cherry"}
sorted_chars = {''.join(sorted(word)) for word in words}
print(words)
print(sorted_chars)

#----------------------------------------#
Question:
Generate a set of tuples containing even and odd numbers from 1 to 10

Sample Output

{(3, 4), (5, 4), (3, 10), (9, 2), (5, 10), (9, 8), (1, 6), (7, 4), (7, 10), (5, 6), (3, 6), (9, 4), (9, 10), (1, 2), (1, 8), (7, 6), (3, 2), (5, 2), (3, 8), (5, 8), (9, 6), (1, 4), (1, 10), (7, 2), (7, 8)}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named even_odd_pairs. It contains pairs of numbers where the first number (x) is odd and in the range from 1 to 10, and the second number (y) is even and in the range from 2 to 12. Here's how the code works:

    {(x, y) for x in range(1, 11, 2) for y in range(2, 12, 2)}: This is a set comprehension that creates pairs (x, y) for x in the range of odd numbers from 1 to 10 (1, 3, 5, 7, 9) and y in the range of even numbers from 2 to 12 (2, 4, 6, 8, 10, 12).
        for x in range(1, 11, 2): This part of the code sets up the outer loop, iterating through odd numbers from 1 to 10 with a step of 2.
        for y in range(2, 12, 2): This part of the code sets up the inner loop, iterating through even numbers from 2 to 12 with a step of 2.
        (x, y): For each combination of x and y, it creates a tuple containing the values of x and y.
    print(even_odd_pairs): This line of code prints the even_odd_pairs set to the console.

Solution:
even_odd_pairs = {(x, y) for x in range(1, 11, 2) for y in range(2, 12, 2)}
print(even_odd_pairs)

#----------------------------------------#
Question:
Create a set of words with their vowels replaced by underscores

Sample Output

{'banana', 'cherry', 'apple'}

{'_ppl_', 'ch_rry', 'b_n_n_'}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named vowel_replaced, which contains words from the input set words with vowels replaced by underscores. Here's how the code works:

    words = {"apple", "banana", "cherry"}: This line initializes a set named words with three string elements.
    vowel_replaced = {''.join(['_' if char.lower() in 'aeiou' else char for char in word]) for word in words}: This line initializes the set vowel_replaced using a set comprehension.
        for word in words: This part of the code sets up a loop that iterates through each word (string) in the words set.
        ''.join(['_' if char.lower() in 'aeiou' else char for char in word]): For each word, this part creates a new string where each character is replaced by an underscore ('_') if it's a vowel (in lowercase), or left unchanged if it's not a vowel.
    print(words): This line of code prints the original set words to the console.
    print(vowel_replaced): This line of code prints the vowel_replaced set to the console.

Solution:
words = {"apple", "banana", "cherry"}
vowel_replaced = {''.join(['_' if char.lower() in 'aeiou' else char for char in word]) for word in words}
print(words)
print(vowel_replaced)

#----------------------------------------#
Question:
Generate a set of tuples containing numbers and their cubes

Sample Output

{(3, 27), (4, 64), (1, 1), (5, 125), (2, 8)}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named num_cubes. It contains pairs of numbers where the first number (x) is in the range from 1 to 5, and the second number is the cube of x. Here's how the code works:

    {(x, x**3) for x in range(1, 6)}: This is a set comprehension that creates pairs (x, x**3) for x in the range of numbers from 1 to 5.
        for x in range(1, 6): This part of the code sets up the loop, iterating through numbers from 1 to 5 (inclusive).
        (x, x**3): For each value of x, it creates a tuple containing the value of x and its cube, x**3.
    print(num_cubes): This line of code prints the num_cubes set to the console.

Solution:
num_cubes = {(x, x**3) for x in range(1, 6)}
print(num_cubes)

#----------------------------------------#
Question:
Create a set of unique characters from a list of words

Sample Output

['apple', 'banana', 'cherry']

{'y', 'a', 'e', 'c', 'b', 'p', 'l', 'n', 'h', 'r'}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named unique_chars, which contains unique characters extracted from a list of words. Here's how the code works:

    words = ["apple", "banana", "cherry"]: This line initializes a list named words with three string elements.
    unique_chars = {char for word in words for char in word}: This line initializes the set unique_chars using a set comprehension.
        for word in words: This part of the code sets up a nested loop that iterates through each word in the words list.
        for char in word: For each word, this part iterates through each character in the word, and it adds each unique character to the unique_chars set.
    print(words): This line of code prints the original list of words, words, to the console.
    print(unique_chars): This line of code prints the unique_chars set to the console, containing the unique characters from the words.

Solution:
words = ["apple", "banana", "cherry"]
unique_chars = {char for word in words for char in word}
print(words)
print(unique_chars)

#----------------------------------------#
Question:
Generate a set of tuples containing numbers and their absolute values

Sample Output

[-2, 3, -5, 7, -11]

{(7, 7), (-11, 11), (3, 3), (-5, 5), (-2, 2)}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named absolute_values, which contains pairs of numbers and their absolute values from a list of numbers. Here's how the code works:

    numbers = [-2, 3, -5, 7, -11]: This line initializes a list named numbers with five integer elements.
    absolute_values = {(x, abs(x)) for x in numbers}: This line initializes the set absolute_values using a set comprehension.
        for x in numbers: This part of the code sets up a loop that iterates through each number in the numbers list.
        (x, abs(x)): For each number, this part creates a tuple containing the number itself (x) and its absolute value (abs(x)).
    print(numbers): This line of code prints the original list of numbers, numbers, to the console.
    print(absolute_values): This line of code prints the absolute_values set to the console, containing the pairs of numbers and their absolute values.

Solution:
numbers = [-2, 3, -5, 7, -11]
absolute_values = {(x, abs(x)) for x in numbers}
print(numbers)
print(absolute_values)

#----------------------------------------#
Question:
Create a set of words with their characters repeated twice

Sample Output

['apple', 'banana', 'cherry']

{'aappppllee', 'bbaannaannaa', 'cchheerrrryy'}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named duplicated_chars, which contains words with duplicated characters from a list of words. Here's how the code works:

    words = ["apple", "banana", "cherry"]: This line initializes a list named words with three string elements.
    duplicated_chars = {''.join([char*2 for char in word]) for word in words}: This line initializes the set duplicated_chars using a set comprehension.
        for word in words: This part of the code sets up a loop that iterates through each word in the words list.
        for char in word: For each word, this part iterates through each character in the word and doubles it by using char*2.
        ''.join(...): This part of the code combines the duplicated characters into a single string for each word.
    print(words): This line of code prints the original list of words, words, to the console.
    print(duplicated_chars): This line of code prints the duplicated_chars set to the console, containing the words with duplicated characters.

Solution:
words = ["apple", "banana", "cherry"]
duplicated_chars = {''.join([char*2 for char in word]) for word in words}
print(words)
print(duplicated_chars)

#----------------------------------------#
Question:
Generate a set of tuples containing numbers and their squares, but only for even numbers

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

{(2, 4), (4, 16), (8, 64), (10, 100), (6, 36)}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named even_num_squares, which contains tuples of even numbers and their squares from a list of numbers. Here's how the code works:

    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] : This line initializes a list named numbers with ten integer elements.
    even_num_squares = {(x, x**2) for x in numbers if x % 2 == 0}: This line initializes the set even_num_squares using a set comprehension.
        for x in numbers: This part of the code sets up a loop that iterates through each number in the numbers list.
        if x % 2 == 0: This part of the code filters the numbers to include only even numbers (numbers that are divisible by 2).
        (x, x**2): For each even number, this part creates a tuple containing the original number and its square.
    print(numbers): This line of code prints the original list of numbers, numbers, to the console.
    print(even_num_squares): This line of code prints the even_num_squares set to the console, containing tuples of even numbers and their squares.

Solution:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_num_squares = {(x, x**2) for x in numbers if x % 2 == 0}
print(numbers)
print(even_num_squares)

#----------------------------------------#
Question:Create a set of numbers that are perfect cubes from 1 to 100

Sample Output

{8, 1, 27}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named perfect_cubes, which contains perfect cube numbers from the range 1 to 100. Here's how the code works:

    perfect_cubes = {x for x in range(1, 101) if int(x**(1/3))**3 == x}: This line initializes the set perfect_cubes using a set comprehension.
        for x in range(1, 101): This part of the code sets up a loop that iterates through each number in the range from 1 to 100 (inclusive).
        if int(x**(1/3))**3 == x: This part of the code filters the numbers to include only those that are perfect cubes. It checks if the cube root of x, converted to an integer, raised to the power of 3 is equal to x. If they are equal, it means that x is a perfect cube.
    print(perfect_cubes): This line of code prints the perfect_cubes set to the console, containing perfect cube numbers.

Solution:
perfect_cubes = {x for x in range(1, 101) if int(x**(1/3))**3 == x}
print(perfect_cubes)

#----------------------------------------#
Question:
Create a set of non-whitespace characters from a string

Sample Output

Hello, world!

{'e', 'r', 'H', 'd', 'w', ',', 'l', '!', 'o'}

Hints: 

Explication:
This Python code uses a set comprehension to create a new set named non_whitespace_chars, which contains non-whitespace characters from the string "Hello, world!". Here's how the code works:

    non_whitespace_chars = {char for char in string if not char.isspace()}: This line initializes the set non_whitespace_chars using a set comprehension.
        for char in string: This part of the code iterates through each character in the string "Hello, world!".
        if not char.isspace(): This part of the code filters the characters to include only those that are not whitespace characters. It checks if the character char is not a whitespace character using the isspace() method.
    print(string): This line of code prints the original string, "Hello, world!", to the console.
    print(non_whitespace_chars): This line of code prints the non_whitespace_chars set to the console, which contains non-whitespace characters from the string.

Solution:
string = "Hello, world!"
non_whitespace_chars = {char for char in string if not char.isspace()}
print(string)
print(non_whitespace_chars)

#----------------------------------------#
Question:
Create a set of even numbers from 1 to 50 that are not divisible by 4

Sample Output

{2, 34, 6, 38, 10, 42, 14, 46, 18, 50, 22, 26, 30}

Hints: 

Explication:
This Python code creates a set named even_not_div_by_4, which contains even numbers between 2 and 50 (inclusive) that are not divisible by 4. Here's how the code works:

    even_not_div_by_4 = {x for x in range(2, 51, 2) if x % 4 != 0}: This line initializes the set even_not_div_by_4 using a set comprehension.
        for x in range(2, 51, 2): This part of the code iterates through even numbers in the range from 2 to 50, with a step of 2. This range includes all even numbers between 2 and 50.
        if x % 4 != 0: This part of the code filters the numbers to include only those that are not divisible by 4. It checks if the remainder of the division of x by 4 is not equal to 0.
    print(even_not_div_by_4): This line of code prints the even_not_div_by_4 set to the console.

Soluteven_not_div_by_4 = {x for x in range(2, 51, 2) if x % 4 != 0}
print(even_not_div_by_4)

#----------------------------------------#
Question:
Generate a set of common elements from multiple sets

Sample Output

{1, 2, 3, 4, 5}

{3, 4, 5, 6, 7}

{5, 6, 7, 8, 9}

{5}

Hints: 

Explication:
In this Python code, you have three sets: set1, set2, and set3, and you are finding the common elements that are present in all three sets. Here's how the code works:

    set1 = {1, 2, 3, 4, 5}: This line defines set1 as a set containing the elements 1, 2, 3, 4, and 5.
    set2 = {3, 4, 5, 6, 7}: This line defines set2 as a set containing the elements 3, 4, 5, 6, and 7.
    set3 = {5, 6, 7, 8, 9}: This line defines set3 as a set containing the elements 5, 6, 7, 8, and 9.
    common_elements = {x for x in set1 if x in set2 and x in set3}: This line creates a set named common_elements using a set comprehension. It iterates through the elements in set1 and includes an element in the common_elements set if it is also present in both set2 and set3. In other words, it finds the elements that are common to all three sets.
    print(set1): This line prints the set1 set to the console.
    print(set2): This line prints the set2 set to the console.
    print(set3): This line prints the set3 set to the console.
    print(common_elements): This line prints the common_elements set to the console.

Solution:
set1 = {1, 2, 3, 4, 5}
set2 = {3, 4, 5, 6, 7}
set3 = {5, 6, 7, 8, 9}
common_elements = {x for x in set1 if x in set2 and x in set3}
print(set1)
print(set2)
print(set3)
print(common_elements)

#----------------------------------------#
Question:
Create a set of strings with their vowels removed

Sample Output

{'banana', 'cherry', 'apple'}

{'chrry', 'ppl', 'bnn'}

Hints: 

Explication:
Set of strings named strings, and you want to create a new set called no_vowels that contains the same words as strings, but with the vowels removed from each word. Here's how the code works:

    strings = {"apple", "banana", "cherry"}: This line defines a set named strings containing three words: "apple," "banana," and "cherry."
    no_vowels = {''.join([char for char in word if char.lower() not in 'aeiou']) for word in strings}: This line uses a set comprehension to create the no_vowels set. It iterates over each word in the strings set and, for each word, it processes the characters in the word. It checks if each character (converted to lowercase) is not a vowel ('a', 'e', 'i', 'o', 'u'). If the character is not a vowel, it includes it in the processed word. The ''.join(...) part is used to concatenate the characters back into a single word. So, for each word in strings, this code creates a new word without vowels and adds it to the no_vowels set.
    print(strings): This line prints the original strings set, which contains the words with vowels, to the console.
    print(no_vowels): This line prints the no_vowels set, which contains the modified words with vowels removed, to the console.

Solution:
strings = {"apple", "banana", "cherry"}
no_vowels = {''.join([char for char in word if char.lower() not in 'aeiou']) for word in strings}
print(strings)
print(no_vowels)

#----------------------------------------#
Question:
Generate a set of words that start with a vowel from a sentence

Sample Output

This is a sample sentence with words starting with vowels.

{'a', 'is'}

Hints: 

Explication:
In this Python code, you have a sentence, and you want to create a set called vowel_start_words that contains words from the sentence that start with a vowel (either uppercase or lowercase). Here's how the code works:

    sentence = "This is a sample sentence with words starting with vowels.": This line defines a string called sentence containing the input sentence.
    vowel_start_words = {word for word in sentence.split() if word[0].lower() in 'aeiou'}: This line uses a set comprehension to create a set called vowel_start_words. Here's how it works:
        sentence.split() splits the sentence string into a list of words.
        for word in sentence.split() iterates through each word in the list.
        if word[0].lower() in 'aeiou' checks if the lowercase of the first character of the word is a vowel. If it is, the word is included in the set.
    print(sentence) : This line prints the original sentence to the console.
    print(vowel_start_words): This line prints the set vowel_start_words, which contains the words from the sentence that start with vowels, to the console.

Solution:
sentence = "This is a sample sentence with words starting with vowels."
vowel_start_words = {word for word in sentence.split() if word[0].lower() in 'aeiou'}
print(sentence)
print(vowel_start_words)

#----------------------------------------#
Question:
Create a set of unique vowels from a list of words

Sample Output

['apple', 'banana', 'cherry']

{'a', 'e'}

Hints: 

Explication:
This Python code processes a list of words to extract unique vowels from those words. Here's what each part of the code does:

    words = ["apple", "banana", "cherry"]: This line defines a list called words, which contains three words: "apple," "banana," and "cherry."
    unique_vowels = {char for word in words for char in word if char.lower() in 'aeiou'}: This line uses a set comprehension to create a set called unique_vowels. Here's how it works:
        for word in words iterates through each word in the list of words.
        for char in word iterates through each character in the word.
        if char.lower() in 'aeiou' checks if the lowercase of the character is a vowel ('a', 'e', 'i', 'o', or 'u'). If it is, the character is included in the set. The set comprehension ensures that only unique vowel characters are included.
    print(words): This line prints the original list of words to the console.
    print(unique_vowels) : This line prints the set unique_vowels, which contains the unique vowel characters extracted from the words in the list.

Solution:
words = ["apple", "banana", "cherry"]
unique_vowels = {char for word in words for char in word if char.lower() in 'aeiou'}
print(words)
print(unique_vowels)

#----------------------------------------#
Question:
Create a set of numbers that are palindromes from 1 to 100

Sample Output

{1, 2, 3, 4, 5, 6, 7, 8, 9, 33, 11, 44, 66, 77, 99, 22, 55, 88}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named palindromes, which contains palindromic numbers within the range from 1 to 100. Here's how the code works:

    palindromes = {x for x in range(1, 101) if str(x) == str(x)[::-1]}: This line initializes the set palindromes using a set comprehension.
        for x in range(1, 101): This part of the code iterates through numbers from 1 to 100 (inclusive).
        if str(x) == str(x)[::-1]: This part of the code checks if a number is a palindrome. It does this by converting the number x to a string using str(x). Then, it checks if the string representation of the number is equal to its reverse, obtained using slicing str(x)[::-1].
    print(palindromes): This line of code prints the palindromes set to the console, which contains the palindromic numbers within the specified range.

Solution:
palindromes = {x for x in range(1, 101) if str(x) == str(x)[::-1]}
print(palindromes)

#----------------------------------------#
Question:
Generate a set of words that are anagrams from a list of words

Sample Output

['apple', 'banana', 'elppa', 'race', 'care', 'cherry']

{'aaabnn', 'cehrry', 'aelpp', 'acer'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named anagrams, which contains the sorted letters of each word in the list words. Here's how the code works:

    anagrams = {''.join(sorted(word)) for word in words}: This line initializes the set anagrams using a set comprehension.
        for word in words: This part of the code iterates through each word in the list words.
        ''.join(sorted(word)): For each word, it sorts the letters in alphabetical order using the sorted function and then joins them back together into a single string. This effectively creates an anagram of the word.
    print(words): This line of code prints the original list of words, which is ["apple", "banana", "elppa", "race", "care", "cherry"], to the console.
    print(anagrams): This line of code prints the anagrams set, which contains the sorted letters of each word, to the console.

Solution:
words = ["apple", "banana", "elppa", "race", "care", "cherry"]
anagrams = {''.join(sorted(word)) for word in words}
print(words)
print(anagrams)

#----------------------------------------#
Question:
Create a set of words with their characters sorted in descending order

Sample Output

['apple', 'banana', 'cherry']

{'pplea', 'yrrhec', 'nnbaaa'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named sorted_descending, which contains the letters of each word in the list words sorted in descending order (in reverse alphabetical order). Here's how the code works:

    sorted_descending = {''.join(sorted(word, reverse=True)) for word in words}: This line initializes the set sorted_descending using a set comprehension.
        for word in words: This part of the code iterates through each word in the list words.
        ''.join(sorted(word, reverse=True)): For each word, it sorts the letters in reverse alphabetical order (descending order) using the sorted function with the reverse=True argument and then joins them back together into a single string.
    print(words): This line of code prints the original list of words, which is ["apple", "banana", "cherry"], to the console.
    print(sorted_descending): This line of code prints the sorted_descending set, which contains the letters of each word sorted in descending order, to the console.

Solution:
words = ["apple", "banana", "cherry"]
sorted_descending = {''.join(sorted(word, reverse=True)) for word in words}
print(words)
print(sorted_descending)

#----------------------------------------#
Question:
enerate a set of characters that appear exactly twice in a string

Sample Output

Hello, world!

{'o'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named twice_chars, which contains characters that appear exactly twice in the string string. Here's how the code works:

    twice_chars = {char for char in string if string.count(char) == 2}: This line initializes the set twice_chars using a set comprehension.
        for char in string: This part of the code iterates through each character in the string string.
        if string.count(char) == 2: It checks whether the count of the current character in the string is equal to 2, meaning the character appears exactly twice in the string.
    print(string): This line of code prints the original string, which is "Hello, world!", to the console.
    print(twice_chars): This line of code prints the twice_chars set, which contains characters that appear exactly twice in the string, to the console.

Solution:
string = "Hello, world!"
twice_chars = {char for char in string if string.count(char) == 2}
print(string)
print(twice_chars)

#----------------------------------------#
Question:
Create a set of strings with all characters capitalized from a list of strings

Sample Output

['apple', 'banana', 'cherry']

{'Banana', 'Apple', 'Cherry'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named capitalized_strings, which contains strings where each word is capitalized. Here's how the code works:

    capitalized_strings = {' '.join([word.capitalize() for word in string.split()]) for string in strings}: This line initializes the set capitalized_strings using a set comprehension.
        for string in strings: This part of the code iterates through each string in the strings list.
        string.split(): It splits the current string into a list of words, separating them by spaces.
        [word.capitalize() for word in string.split()]: It iterates through the words in the list and capitalizes the first letter of each word.
        ' '.join([word.capitalize() for word in string.split()]): It joins the capitalized words back together into a single string, separating them with spaces.
    print(strings): This line of code prints the original list of strings, which is ["apple", "banana", "cherry"], to the console.
    print(capitalized_strings): This line of code prints the capitalized_strings set, which contains the strings with capitalized words, to the console.

Solution:
strings = ["apple", "banana", "cherry"]
capitalized_strings = {' '.join([word.capitalize() for word in string.split()]) for string in strings}
print(strings)
print(capitalized_strings)

#----------------------------------------#
Question:
Generate a set of words with at least one vowel from a list of words

Sample Output

['apple', 'banana', 'cherry']

{'banana', 'apple', 'cherry'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named vowel_words, which contains words from the words list that contain at least one vowel (a, e, i, o, or u). Here's how the code works:

    vowel_words = {word for word in words if any(char.lower() in 'aeiou' for char in word)}: This line initializes the set vowel_words using a set comprehension.
        for word in words: This part of the code iterates through each word in the words list.
        if any(char.lower() in 'aeiou' for char in word): It checks if at least one character in the current word is a lowercase vowel (a, e, i, o, or u).
    print(words): This line of code prints the original list of words, which is ["apple", "banana", "cherry"], to the console.
    print(vowel_words): This line of code prints the vowel_words set, which contains words with at least one vowel, to the console.

Solution:
words = ["apple", "banana", "cherry", ]
vowel_words = {word for word in words if any(char.lower() in 'aeiou' for char in word)}
print(words)
print(vowel_words)

#----------------------------------------#
Question:
Create a set of words with their characters repeated three times from a list of words

Sample Output

['apple', 'banana', 'cherry']

{'bbbaaannnaaannnaaa', 'aaappppppllleee', 'ccchhheeerrrrrryyy'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named tripled_chars, which contains words from the words list with each character repeated three times. Here's how the code works:

    tripled_chars = {''.join([char*3 for char in word]) for word in words}: This line initializes the set tripled_chars using a set comprehension.
        for word in words: This part of the code iterates through each word in the words list.
        ''.join([char*3 for char in word]): It repeats each character in the current word three times and joins them together using an empty string. This creates the word with tripled characters.
    print(words): This line of code prints the original list of words, which is ["apple", "banana", "cherry"], to the console.
    print(tripled_chars): This line of code prints the tripled_chars set, which contains words with each character repeated three times, to the console.

Solution:
words = ["apple", "banana", "cherry"]
tripled_chars = {''.join([char*3 for char in word]) for word in words}
print(words)
print(tripled_chars)

#----------------------------------------#
Question:
Create a set of words with their characters sorted and concatenated

Sample Output

['apple', 'banana', 'cherry']

{'aelpp', 'cehrry', 'aaabnn'}

Hints: 

Explication:
This Python code uses a set comprehension to create a set named sorted_concatenated, which contains words from the words list sorted and concatenated. Here's how the code works:

    sorted_concatenated = {''.join(sorted(word)) for word in words}: This line initializes the set sorted_concatenated using a set comprehension.
        for word in words: This part of the code iterates through each word in the words list.
        ''.join(sorted(word)): It sorts the characters in the current word in alphabetical order, then joins them together using an empty string. This creates a word where the characters are sorted.
    print(words): This line of code prints the original list of words, which is ["apple", "banana", "cherry"], to the console.
    print(sorted_concatenated): This line of code prints the sorted_concatenated set, which contains words with characters sorted in alphabetical order, to the console.

Solution:
words = ["apple", "banana", "cherry"]
sorted_concatenated = {''.join(sorted(word)) for word in words}
print(words)
print(sorted_concatenated)

#----------------------------------------#
Question:
Create a set of words with their characters shuffled from a list of words

Sample Output

['apple', 'banana', 'cherry']

{'hreyrc', 'nbaana', 'lepap'}

Hints: 

Explication:
This Python code shuffles the characters within each word in the words list using random sampling and creates a set named shuffled_chars to store the shuffled versions of the words. Here's how the code works:

    import random: This line imports the random module, which provides functions for generating random numbers and performing random operations.
    words = ["apple", "banana", "cherry"]: This line initializes a variable named words and assigns it a list of three words.
    shuffled_chars = {''.join(random.sample(word, len(word))) for word in words}: This line initializes a set named shuffled_chars using a set comprehension.
        for word in words: This part of the code iterates through each word in the words list.
        random.sample(word, len(word)) : For each word, it uses the random.sample function to shuffle its characters. random.sample returns a random sample from the input sequence (in this case, the characters of the word) of the specified length.
        ''.join(...): This part of the code joins the shuffled characters back together into a single string.
    print(words): This line of code prints the original words list to the console.
    print(shuffled_chars): This line of code prints the shuffled_chars set (which contains shuffled versions of the words) to the console.

Solution:
import random
 
words = ["apple", "banana", "cherry"]
shuffled_chars = {''.join(random.sample(word, len(word))) for word in words}
print(words)
print(shuffled_chars)

#----------------------------------------#
Question:
Filtering out negative numbers from a set

Sample Output

{1, 3, 5, -4, -2}

{1, 3, 5}
Hints: 

Explication:
This Python code uses a set comprehension to filter the positive numbers from a given set and creates a new set named positive_numbers. Here's how the code works:

    import random: This line imports the random module, although it is not used in the code.
    numbers = {1, -2, 3, -4, 5}: This line initializes a set named numbers with a collection of integers, including both positive and negative numbers.
    positive_numbers = {x for x in numbers if x >= 0}: This line creates a new set named positive_numbers using a set comprehension.
        for x in numbers: This part of the code iterates through each element in the numbers set.
        if x >= 0: It checks whether each element is greater than or equal to zero, which filters out the positive numbers and zero from the numbers set.
    print(numbers): This line prints the original numbers set to the console.
    print(positive_numbers): This line prints the positive_numbers set (which contains only the positive numbers and zero) to the console.

Solution:
import random
 
numbers = {1, -2, 3, -4, 5}
positive_numbers = {x for x in numbers if x >= 0}
print(numbers)
print(positive_numbers)

#----------------------------------------#
Question:
Generating pairs of elements from two sets

Sample Output

{1, 2, 3}

{'b', 'c', 'a'}

{(2, 'b'), (3, 'a'), (3, 'b'), (1, 'b'), (1, 'a'), (2, 'c'), (3, 'c'), (1, 'c'), (2, 'a')}

Hints: 

Explication:
This Python code creates pairs of elements from two sets, set1 and set2, and stores these pairs in a new set called pairs. Here's how the code works:

    set1 = {1, 2, 3}: This line initializes a set named set1 containing three integers.
    set2 = {"a", "b", "c"}: This line initializes another set named set2 containing three strings.
    pairs = {(x, y) for x in set1 for y in set2}: This line uses a set comprehension to create pairs of elements from set1 and set2.
        for x in set1: This part of the code iterates through each element in set1.
        for y in set2: For each element in set1, it iterates through each element in `set2, creating pairs (x, y) for all combinations.
    print(set1): This line prints the original set1 to the console.
    print(set2): This line prints the original set2 to the console.
    print(pairs): This line prints the pairs set (which contains all possible pairs of elements from set1 and `set2) to the console.

Solution:
set1 = {1, 2, 3}
set2 = {"a", "b", "c"}
pairs = {(x, y) for x in set1 for y in set2}
print(set1)
print(set2)
print(pairs)

#----------------------------------------#
Question:
Checking for palindrome words

Sample Output

['radar', 'hello', 'level', 'world']

{'radar', 'level'}

Hints: 

Explication:
This Python code creates a set named palindromes that contains palindromic words from a given list of words. Here's how the code works:

    words = ["radar", "hello", "level", "world"]: This line initializes a list named words with four words, some of which are palindromes and some are not.
    palindromes = {word for word in words if word == word[::-1]}: This line uses a set comprehension to create the palindromes set, containing only words from the words list that are palindromes.
        for word in words: This part of the code iterates through each word in the words list.
        if word == word[::-1]: It checks if each word is a palindrome. To determine this, it checks if the word is equal to its reverse (word[::-1]).
    print(words): This line prints the original words list to the console.
    print(palindromes): This line prints the palindromes set (which contains the palindromic words from the words list) to the console.

Solution:
words = ["radar", "hello", "level", "world"]
palindromes = {word for word in words if word == word[::-1]}
print(words)
print(palindromes)

#----------------------------------------#
Question:
Converting list of dictionaries to a set

Sample Output

[{'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'c': 3, 'd': 4}]

{frozenset({('a', 1), ('b', 2)}), frozenset({('d', 4), ('c', 3)}), frozenset({('b', 2), ('c', 3)})}

Hints: 

Explication:
This Python code creates a set named dict_set by converting a list of dictionaries, list_of_dicts, into frozensets of key-value pairs. Here's how the code works:

    list_of_dicts = [{"a": 1, "b": 2}, {"b": 2, "c": 3}, {"c": 3, "d": 4}]: This line initializes a list of dictionaries named list_of_dicts. Each dictionary contains key-value pairs.
    dict_set = {frozenset(d.items()) for d in list_of_dicts}: This line uses a set comprehension to create the dict_set set. For each dictionary d in list_of_dicts, it converts the key-value pairs into a frozenset using frozenset(d.items()).
        for d in list_of_dicts: This part of the code iterates through each dictionary in the list_of_dicts.
        frozenset(d.items()): It converts the key-value pairs of the dictionary into a frozenset. A frozenset is used because it is an immutable type and can be included in a set.
    print(list_of_dicts): This line prints the original list_of_dicts to the console.
    print(dict_set): This line prints the dict_set set (which contains frozensets of key-value pairs from the original dictionaries) to the console.

Solution:
list_of_dicts = [{"a": 1, "b": 2}, {"b": 2, "c": 3}, {"c": 3, "d": 4}]
dict_set = {frozenset(d.items()) for d in list_of_dicts}
print(list_of_dicts)
print(dict_set)

#----------------------------------------#
Question:
Removing punctuation from a string

Sample Output

Hello, world! How's everything?

{'e', ' ', 'g', 'o', 'h', 'd', 'l', 's', 'r', 'y', 'w', 't', 'H', 'n', 'v', 'i'}

Hints: 

Explication:
This Python code removes punctuation characters from a given text using a set comprehension. Here's how the code works:

    import string: This line imports the string module, which contains a string constant, string.punctuation, that includes all punctuation characters.
    text = "Hello, world! How's everything?": This line initializes a string named text with a sample text that contains punctuation.
    cleaned_text = {char for char in text if char not in string.punctuation}: This line uses a set comprehension to create the cleaned_text set. It iterates through each character char in the text and includes it in the cleaned_text set if it is not a punctuation character.
        for char in text: This part of the code iterates through each character in the text string.
        if char not in string.punctuation: It checks whether each character is not in the string.punctuation string, which contains punctuation characters.
    print(text): This line prints the original text to the console.
    print(cleaned_text): This line prints the cleaned_text set, which contains the characters from the original text, excluding the punctuation characters.

Solution:
import string
 
text = "Hello, world! How's everything?"
cleaned_text = {char for char in text if char not in string.punctuation}
print(text)
print(cleaned_text)

#----------------------------------------#
Question:
Set of words with a given prefix

Sample Output

['apple', 'banana', 'cherry', 'date']

ba

{'banana'}

Hints: 

Explication:
This Python code creates a set named words_with_prefix that contains words from a given list of words that start with a specified prefix. Here's how the code works:

    words = ["apple", "banana", "cherry", "date"]: This line initializes a list named words with four words.
    prefix = "ba": This line initializes a string variable named prefix with the prefix you want to search for.
    words_with_prefix = {word for word in words if word.startswith(prefix)}: This line uses a set comprehension to create the words_with_prefix set. It iterates through each word in the words list and includes it in the words_with_prefix set if it starts with the specified prefix.
        for word in words: This part of the code iterates through each word in the words list.
        if word.startswith(prefix): It checks whether each word starts with the specified prefix.
    print(words): This line prints the original words list to the console.
    print(prefix): This line prints the specified prefix to the console.
    print(words_with_prefix): This line prints the words_with_prefix set, which contains the words that start with the specified prefix.

Solution:
words = ["apple", "banana", "cherry", "date"]
prefix = "ba"
words_with_prefix = {word for word in words if word.startswith(prefix)}
print(words)
print(prefix)
print(words_with_prefix)

#----------------------------------------#
Question:
Merging characters from a list of strings

Sample Output

['apple', 'banana', 'cherry']

{'r', 'b', 'p', 'n', 'a', 'e', 'c', 'h', 'y', 'l'}

Hints: 

Explication:
This Python code creates a set named merged_chars that contains the distinct characters from a list of strings. Here's how the code works:

    strings = ["apple", "banana", "cherry"]: This line initializes a list named strings with three strings.
    merged_chars = {char for string in strings for char in string}: This line uses a set comprehension to create the merged_chars set. It iterates through each string in the strings list and includes each character in the merged_chars set.
        for string in strings: This part of the code iterates through each string in the strings list.
        for char in string: It iterates through each character in the current string.
    print(strings): This line prints the original strings list to the console.
    print(merged_chars): This line prints the merged_chars set, which contains all the distinct characters from the original strings.

Solution:
strings = ["apple", "banana", "cherry"]
merged_chars = {char for string in strings for char in string}
print(strings)
print(merged_chars)

#----------------------------------------#
Question:
DEPARTDICT
Create a dictionary of squares of numbers from 1 to 10

Sample Output

{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}

Hints: 

Explication:
This Python code creates a dictionary named squares where the keys are numbers from 1 to 10, and the values are the squares of those numbers. Here's how the code works:

    squares = {x: x ** 2 for x in range(1, 11)} : This line uses a dictionary comprehension to create the squares dictionary. It iterates through each number x in the range from 1 to 10 and assigns a key-value pair to the dictionary. The key is the number itself (x), and the value is the square of that number (x ** 2).
        for x in range(1, 11): This part of the code iterates through each number from 1 to 10.
    print(squares): This line prints the squares dictionary to the console.

Solution:
squares = {x: x ** 2 for x in range(1, 11)}
print(squares)

#----------------------------------------#
Question:
Create a dictionary of even numbers as keys and their squares as values

Sample Output

{0: 0, 2: 4, 4: 16, 6: 36, 8: 64, 10: 100, 12: 144, 14: 196, 16: 256, 18: 324, 20: 400}

Hints: 

Explication:
This Python code creates a dictionary named evens_squared where the keys are even numbers from 0 to 20, and the values are the squares of those even numbers. Here's how the code works:

    evens_squared = {x: x ** 2 for x in range(0, 21) if x % 2 == 0}: This line uses a dictionary comprehension to create the evens_squared dictionary. It iterates through each even number x in the range from 0 to 20 and assigns a key-value pair to the dictionary. The key is the even number itself (x), and the value is the square of that even number (x ** 2)
        for x in range(0, 21): This part of the code iterates through each number from 0 to 20.
        if x % 2 == 0: It checks if the number is even by using the modulo operator (%) to see if there is no remainder when dividing by 2.
    print(evens_squared): This line prints the evens_squared dictionary to the console.

Solution:
evens_squared = {x: x ** 2 for x in range(0, 21) if x % 2 == 0}
print(evens_squared)

#----------------------------------------#
Question:
Create a dictionary of words and their lengths from a sentence

Sample Output

Enter String : Python is awesome

{'Python': 6, 'is': 2, 'awesome': 7}

Hints: 

Explication:
This Python code creates a dictionary named word_lengths where the keys are words from a sentence, and the values are the lengths of those words. Here's how the code works:

    sentence = "Python is awesome": This line initializes a string variable named sentence with the sentence you want to analyze.
    word_lengths = {word: len(word) for word in sentence.split()}: This line uses a dictionary comprehension to create the word_lengths dictionary. It splits the sentence into words using .split() and iterates through each word in the sentence. For each word, it assigns a key-value pair to the dictionary. The key is the word itself (word), and the value is the length of that word (len(word)).
        for word in sentence.split(): This part of the code iterates through each word in the sentence after splitting it into words.
    print(sentence): This line prints the original sentence to the console.
    print(word_lengths): This line prints the word_lengths dictionary, which contains the lengths of words from the original sentence.

Solution:
# sentence=input("Enter String : ")
sentence = "Python is awesome"
word_lengths = {word: len(word) for word in sentence.split()}
print(sentence)
print(word_lengths)

#----------------------------------------#
Question:
Create a dictionary of lowercase characters from a string

Sample Output

Hello World

{'H': 'h', 'e': 'e', 'l': 'l', 'o': 'o', 'W': 'w', 'r': 'r', 'd': 'd'}

Hints: 

Explication:
This Python code creates a dictionary named lowercase_chars where the keys are the alphabetical characters from a given text, and the values are the corresponding lowercase versions of those characters. Here's how the code works:

    text = "Hello World": This line initializes a string variable named text with the text you want to analyze.
    lowercase_chars = {char: char.lower() for char in text if char.isalpha()}: This line uses a dictionary comprehension to create the lowercase_chars dictionary. It iterates through each character char in the text and checks if the character is an alphabetical character (using char.isalpha()). For each alphabetical character, it assigns a key-value pair to the dictionary. The key is the character itself (char), and the value is the lowercase version of that character (char.lower()).
        for char in text: This part of the code iterates through each character in the text.
        if char.isalpha(): It checks if the character is alphabetical.
    print(text): This line prints the original text to the console.
    print(lowercase_chars): This line prints the lowercase_chars dictionary, which contains the lowercase versions of alphabetical characters from the original text.

Solution:
text = "Hello World"
lowercase_chars = {char: char.lower() for char in text if char.isalpha()}
print(text)
print(lowercase_chars)

#----------------------------------------#
Question:
Create a dictionary of numbers and their cubes

Sample Output

[1, 2, 3, 4, 5]

{1: 1, 2: 8, 3: 27, 4: 64, 5: 125}

Hints: 

Explication:
This Python code creates a dictionary named cubes where the keys are numbers from a list, and the values are the cubes of those numbers. Here's how the code works:

    numbers = [1, 2, 3, 4, 5]: This line initializes a list named numbers with a sequence of numbers you want to analyze.
    cubes = {x: x ** 3 for x in numbers}: This line uses a dictionary comprehension to create the cubes dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary. The key is the number itself (x), and the value is the cube of that number (x ** 3).
        for x in numbers: This part of the code iterates through each number in the numbers list.
    print(numbers): This line prints the original numbers list to the console.
    print(cubes): This line prints the cubes dictionary, which contains the cubes of the numbers from the original list.

Solution:
numbers = [1, 2, 3, 4, 5]
cubes = {x: x ** 3 for x in numbers}
print(numbers)
print(cubes)

#----------------------------------------#
Question:
Create a dictionary of numbers and their squares, excluding odd numbers

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

{2: 4, 4: 16, 6: 36, 8: 64, 10: 100}

Hints: 

Explication:
This Python code creates a dictionary named even_squares where the keys are even numbers from a list, and the values are the squares of those even numbers. Here's how the code works:

    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] : This line initializes a list named numbers with a sequence of numbers you want to analyze.
    even_squares = {x: x ** 2 for x in numbers if x % 2 == 0}: This line uses a dictionary comprehension to create the even_squares dictionary. It iterates through each number x in the numbers list and checks if the number is even (using x % 2 == 0). For each even number, it assigns a key-value pair to the dictionary. The key is the even number itself (x), and the value is the square of that number (x ** 2).
        for x in numbers: This part of the code iterates through each number in the numbers list.
        if x % 2 == 0: It checks if the number is even (i.e., its remainder when divided by 2 is 0).
    print(even_squares): This line prints the even_squares dictionary, which contains the squares of even numbers from the original list.

Solution:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_squares = {x: x ** 2 for x in numbers if x % 2 == 0}
print(even_squares)

#----------------------------------------#
Question:
Create a dictionary of numbers and their prime status

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

{1: False, 2: True, 3: True, 4: False, 5: True, 6: False, 7: True, 8: False, 9: False, 10: False}

Hints: 

Explication:
This Python code defines a function is_prime(n) that checks if a given number n is prime. It then uses a dictionary comprehension to create a dictionary named prime_status where the keys are numbers from a list, and the values are Boolean values indicating whether each number is prime or not. Here's how the code works:

    def is_prime(n): This defines a function is_prime that takes a single argument n and checks if it's a prime number. The function returns True if n is prime and False otherwise. It uses a standard primality check algorithm, testing divisors up to the square root of n.
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] : This line initializes a list named numbers with a sequence of numbers you want to analyze.
    prime_status = {x: is_prime(x) for x in numbers}: This line uses a dictionary comprehension to create the prime_status dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary. The key is the number itself (x), and the value is the result of calling the is_prime function on that number, which determines if it's prime or not.
        for x in numbers: This part of the code iterates through each number in the numbers list.
        {x: is_prime(x) for x in numbers}: It uses a dictionary comprehension to create key-value pairs where the key is the number x, and the value is the result of the is_prime function for that number.
    print(numbers): This line prints the original numbers list to the console.
    print(prime_status): This line prints the prime_status dictionary, which contains the prime status (True or False) for each number in the original list.

Solution:
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
 
 
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
prime_status = {x: is_prime(x) for x in numbers}
print(numbers)
print(prime_status)

#----------------------------------------#
Question:
Create a dictionary of characters and their ASCII values from a string

Sample Output

Tutor Joes

{'T': 84, 'u': 117, 't': 116, 'o': 111, 'r': 114, ' ': 32, 'J': 74, 'e': 101, 's': 115}

Hints: 

Explication:
This Python code takes a string text and creates a dictionary ascii_values where the keys are characters from the string, and the values are their corresponding ASCII values. Here's how the code works:

    text = "Tutor Joes": This line initializes a string variable text with the value "Tutor Joes."
    ascii_values = {char: ord(char) for char in text}: This line uses a dictionary comprehension to create the ascii_values dictionary. It iterates through each character char in the text string and assigns a key-value pair to the dictionary. The key is the character itself (char), and the value is the ASCII value of that character, obtained using the ord(char) function.
        for char in text: This part of the code iterates through each character in the text string.
        {char: ord(char) for char in text}: It uses a dictionary comprehension to create key-value pairs where the key is the character char, and the value is its corresponding ASCII value.
    print(text): This line prints the original text string to the console.
    print(ascii_values): This line prints the ascii_values dictionary, which contains the characters from the original string as keys and their ASCII values as values.

Solution:
text = "Tutor Joes"
ascii_values = {char: ord(char) for char in text}
print(text)
print(ascii_values)

#----------------------------------------#
Question:
Create a dictionary of words and their vowels from a list of strings

Sample Output

['apple', 'banana', 'cherry']

{'apple': 2, 'banana': 3, 'cherry': 1}

Hints: 

Explication:
This Python code takes a list of words and creates a dictionary vowel_counts where the keys are words, and the values are the counts of vowels (a, e, i, o, u) in each word. Here's how the code works:

    words = ['apple', 'banana', 'cherry']: This line initializes a list named words with three words.
    vowel_counts = {word: sum(1 for char in word if char.lower() in 'aeiou') for word in words}: This line uses a dictionary comprehension to create the vowel_counts dictionary. It iterates through each word word in the words list and assigns a key-value pair to the dictionary. The key is the word itself (word), and the value is the result of the following expression:
        sum(1 for char in word if char.lower() in 'aeiou'): This part of the code counts the number of vowels in each word by iterating through each character char in the word. If char is a vowel (regardless of case), it adds 1 to the count. The sum function calculates the total count of vowels in the word.
        for word in words: This part of the code iterates through each word in the words list.
    print(words): This line prints the original words list to the console.
    print(vowel_counts): This line prints the vowel_counts dictionary, which contains the words as keys and the counts of vowels in each word as values.

Solution:
words = ['apple', 'banana', 'cherry']
vowel_counts = {word: sum(1 for char in word if char.lower() in 'aeiou') for word in words}
print(words)
print(vowel_counts)

#----------------------------------------#
Question:
Create a dictionary of words with the letters sorted

Sample Output

['python', 'programming', 'language']

{'python': 'hnopty', 'programming': 'aggimmnoprr', 'language': 'aaegglnu'}

Hints: 

Explication:
This Python code takes a list of words and creates a dictionary sorted_letters where the keys are words, and the values are the words with their letters sorted in alphabetical order. Here's how the code works:

    words = ['python', 'programming', 'language']: This line initializes a list named words with three words.
    sorted_letters = {word: ''.join(sorted(word)) for word in words}: This line uses a dictionary comprehension to create the sorted_letters dictionary. It iterates through each word word in the words list and assigns a key-value pair to the dictionary. The key is the word itself (word), and the value is the result of the following expression:
        ''.join(sorted(word)): This part of the code sorts the letters in each word alphabetically and joins them back together into a string. The sorted function is used to sort the characters in the word, and join combines the sorted characters into a single string.
        for word in words: This part of the code iterates through each word in the words list.
    print(words): This line prints the original words list to the console.
    print(sorted_letters): This line prints the sorted_letters dictionary, which contains the words as keys and the words with their letters sorted in alphabetical order as values.

Solution:
words = ['python', 'programming', 'language']
sorted_letters = {word: ''.join(sorted(word)) for word in words}
print(words)
print(sorted_letters)

#----------------------------------------#
Question:
Create a dictionary of words and their lengths, but only for words with more than 5 letters

Sample Output

['apple', 'banana', 'cherry', 'date']

{'banana': 6, 'cherry': 6}

Hints: 

Explication:
This Python code takes a list of words and creates a dictionary long_word_lengths where the keys are words with lengths greater than 5 characters, and the values are the lengths of those words. Here's how the code works:

    words = ['apple', 'banana', 'cherry', 'date']: This line initializes a list named words with four words.
    long_word_lengths = {word: len(word) for word in words if len(word) > 5}: This line uses a dictionary comprehension to create the long_word_lengths dictionary. It iterates through each word word in the words list and assigns a key-value pair to the dictionary only if the length of the word is greater than 5 characters. The key is the word itself (word), and the value is the length of the word (computed using len(word)).
        for word in words: This part of the code iterates through each word in the words list.
        if len(word) > 5: This part of the code checks if the length of the current word is greater than 5.
    print(words): This line prints the original words list to the console.
    print(long_word_lengths): This line prints the long_word_lengths dictionary, which contains the words with lengths greater than 5 as keys and their respective lengths as values

Solution:
words = ['apple', 'banana', 'cherry', 'date']
long_word_lengths = {word: len(word) for word in words if len(word) > 5}
print(words)
print(long_word_lengths)

#----------------------------------------#
Question:
Create a dictionary of characters and their frequency in a string

Sample Output

hello world

{'l': 3, ' ': 1, 'r': 1, 'h': 1, 'd': 1, 'o': 2, 'e': 1, 'w': 1}

Hints: 

Explication:
This Python code takes a string text and creates a dictionary char_frequency where the keys are unique characters in the string, and the values are the frequencies of those characters in the string. Here's how the code works:

    text = "hello world": This line initializes the string text with the text "hello world."
    char_frequency = {char: text.count(char) for char in set(text)}: This line uses a dictionary comprehension to create the char_frequency dictionary. It does the following:
        set(text): This part of the code creates a set of unique characters in the text string. Using a set ensures that each character is included only once, eliminating duplicates.
        {char: text.count(char) for char in set(text)}: This part of the code iterates through each unique character char in the set of unique characters and assigns a key-value pair to the dictionary. The key is the character itself (char), and the value is the result of text.count(char), which counts the number of occurrences of that character in the text string.
    print(text): This line prints the original text string to the console.
    print(char_frequency): This line prints the char_frequency dictionary, which contains unique characters as keys and their frequencies as values.

Solution:
text = "hello world"
char_frequency = {char: text.count(char) for char in set(text)}
print(text)
print(char_frequency)

#----------------------------------------#
Question:
Create a dictionary of words and their reversed forms

Sample Output

['apple', 'banana', 'cherry']

{'apple': 'elppa', 'banana': 'ananab', 'cherry': 'yrrehc'}

Hints: 

Explication:
This Python code takes a list of words and creates a dictionary reversed_words where the keys are the original words, and the values are the reversed versions of those words. Here's how the code works:

    words = ['apple', 'banana', 'cherry']: This line initializes a list named words with three words.
    reversed_words = {word: word[::-1] for word in words}: This line uses a dictionary comprehension to create the reversed_words dictionary. It iterates through each word word in the words list and assigns a key-value pair to the dictionary. The key is the original word (word), and the value is the word reversed using slicing (word[::-1]).
        for word in words: This part of the code iterates through each word in the words list.
        word[::-1]: This part of the code slices the word with a step of -1, effectively reversing the order of characters in the word.
    print(words): This line prints the original words list to the console.
    print(reversed_words): This line prints the reversed_words dictionary, which contains the original words as keys and their reversed versions as values.

Solution:
words = ['apple', 'banana', 'cherry']
reversed_words = {word: word[::-1] for word in words}
print(words)
print(reversed_words)

#----------------------------------------#
Question:
Create a dictionary of numbers and their squares, but only for even numbers

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

{2: 4, 4: 16, 6: 36, 8: 64, 10: 100}

Hints: 

Explication:
This Python code takes a list of numbers and creates a dictionary even_squares where the keys are even numbers from the original list, and the values are the squares of those even numbers. Here's how the code works:

    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: This line initializes a list named numbers with ten integer values.
    even_squares = {x: x ** 2 for x in numbers if x % 2 == 0}: This line uses a dictionary comprehension to create the even_squares dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary if and only if the number is even (i.e., if x % 2 == 0 is True). The key is the even number itself (x), and the value is the square of that even number (x ** 2).
        for x in numbers: This part of the code iterates through each number in the numbers list.
        if x % 2 == 0: This part of the code checks if the number is even by testing if it's divisible by 2 with no remainder.
    print(numbers): This line prints the original numbers list to the console.
    print(even_squares): This line prints the even_squares dictionary, which contains even numbers as keys and their squared values as values

Solution:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_squares = {x: x ** 2 for x in numbers if x % 2 == 0}
print(numbers)
print(even_squares)

#----------------------------------------#
Question:
Create a dictionary of numbers and their factors

Sample Output

[1, 2, 3, 4, 5]

{1: [1], 2: [1, 2], 3: [1, 3], 4: [1, 2, 4], 5: [1, 5]}

Hints: 

Explication:
This Python code takes a list of numbers and creates a dictionary factors where the keys are the numbers from the original list, and the values are lists of their factors. Here's how the code works:

    numbers = [1, 2, 3, 4, 5]: This line initializes a list named numbers with five integer values.
    factors = {x: [i for i in range(1, x + 1) if x % i == 0] for x in numbers}: This line uses a dictionary comprehension to create the factors dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary. The key is the number itself (x), and the value is a list of its factors.
        for x in numbers: This part of the code iterates through each number in the numbers list.
        x: [i for i in range(1, x + 1) if x % i == 0]: This part of the code uses a list comprehension to generate a list of factors for each number. It iterates through numbers from 1 to x (inclusive) and includes only those numbers for which x % i == 0 is True. This condition checks if i is a factor of x.
    print(numbers): This line prints the original numbers list to the console.
    print(factors): This line prints the factors dictionary, which contains numbers as keys and lists of their factors as values.

Solution:
numbers = [1, 2, 3, 4, 5]
factors = {x: [i for i in range(1, x + 1) if x % i == 0] for x in numbers}
print(numbers)
print(factors)

#----------------------------------------#
Question:
Create a dictionary of words and their uppercase forms

Sample Output

['apple', 'banana', 'cherry']

{'apple': 'APPLE', 'banana': 'BANANA', 'cherry': 'CHERRY'}

Hints: 

Explication:
This Python code takes a list of words and creates a dictionary uppercase_words where the keys are the words from the original list, and the values are the uppercase versions of those words. Here's how the code works:

    words = ['apple', 'banana', 'cherry']: This line initializes a list named words with three string values.
    uppercase_words = {word: word.upper() for word in words}: This line uses a dictionary comprehension to create the uppercase_words dictionary. It iterates through each word word in the words list and assigns a key-value pair to the dictionary. The key is the original word (word), and the value is the uppercase version of the word (word.upper()).
        for word in words: This part of the code iterates through each word in the words list.
        word: word.upper(): This part of the code creates the key-value pair. The key is the original word, and the value is the uppercase version of the word.
    print(words): This line prints the original words list to the console.
    print(uppercase_words): This line prints the uppercase_words dictionary, which contains words as keys and their uppercase versions as values.

Solution:
words = ['apple', 'banana', 'cherry']
uppercase_words = {word: word.upper() for word in words}
print(words)
print(uppercase_words)

#----------------------------------------#
Question:
Create a dictionary of numbers and their parity (even or odd)

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

{1: 'odd', 2: 'even', 3: 'odd', 4: 'even', 5: 'odd', 6: 'even', 7: 'odd', 8: 'even', 9: 'odd', 10: 'even'}

Hints: 

Explication:
This Python code takes a list of numbers and creates a dictionary parity where the keys are the numbers from the original list, and the values indicate whether each number is "even" or "odd." Here's how the code works:

    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] : This line initializes a list named numbers with ten integer values.
    parity = {x: 'even' if x % 2 == 0 else 'odd' for x in numbers}: This line uses a dictionary comprehension to create the parity dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary. The key is the number itself (x), and the value is determined using a conditional expression:
        If x % 2 == 0, it's considered "even." Otherwise, it's considered "odd."
        for x in numbers: This part of the code iterates through each number in the numbers list.
        x: 'even' if x % 2 == 0 else 'odd': This part of the code creates the key-value pair. The key is the number x, and the value is either 'even' or 'odd' based on the result of the conditional expression.
    print(numbers): This line prints the original numbers list to the console.
    print(parity): This line prints the parity dictionary, which contains numbers as keys and their parity (even or odd) as values.

Solution:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
parity = {x: 'even' if x % 2 == 0 else 'odd' for x in numbers}
print(numbers)
print(parity)

#----------------------------------------#
Question:
Create a dictionary of numbers and their binary representations

Sample Output

[1, 2, 3, 4, 5]

{1: '0b1', 2: '0b10', 3: '0b11', 4: '0b100', 5: '0b101'}

Hints: 

Explication:
This Python code takes a list of numbers and creates a dictionary binary_representations where the keys are the numbers from the original list, and the values are their binary representations as strings. Here's how the code works:

    numbers = [1, 2, 3, 4, 5]: This line initializes a list named numbers with five integer values.
    binary_representations = {x: bin(x) for x in numbers}: This line uses a dictionary comprehension to create the binary_representations dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary. The key is the number itself (x), and the value is its binary representation as a string, obtained using the bin function.
        for x in numbers: This part of the code iterates through each number in the numbers list.
        x: bin(x): This part of the code creates the key-value pair. The key is the number x, and the value is its binary representation as a string.
    print(numbers): This line prints the original numbers list to the console.
    print(binary_representations): This line prints the binary_representations dictionary, which contains numbers as keys and their binary representations as values.

Solution:
numbers = [1, 2, 3, 4, 5]
binary_representations = {x: bin(x) for x in numbers}
print(numbers)
print(binary_representations)

#----------------------------------------#
Question:
Create a dictionary of numbers and their factorials

Sample Output

[1, 2, 3, 4, 5]

{1: 1, 2: 2, 3: 6, 4: 24, 5: 120}

Hints: 

Explication:
This Python code creates a dictionary factorials where the keys are numbers from a list, and the values are their factorial values computed using the math.factorial function. Here's how the code works:

    numbers = [1, 2, 3, 4, 5]: This line initializes a list named numbers with five integer values.
    factorials = {x: math.factorial(x) for x in numbers}: This line uses a dictionary comprehension to create the factorials dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary. The key is the number itself (x), and the value is its factorial computed using the math.factorial function.
        for x in numbers: This part of the code iterates through each number in the numbers list.
        x: math.factorial(x): This part of the code creates the key-value pair. The key is the number x, and the value is its factorial value computed using math.factorial(x).
    print(numbers): This line prints the original numbers list to the console.
    print(factorials): This line prints the factorials dictionary, which contains numbers as keys and their factorial values as values.

Solution:
import math
 
numbers = [1, 2, 3, 4, 5]
factorials = {x: math.factorial(x) for x in numbers}
print(numbers)
print(factorials)

#----------------------------------------#
Question:
Create a dictionary of numbers and their squares, but only for multiples of 3

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

{3: 9, 6: 36, 9: 81}

Hints: 

Explication:
This Python code creates a dictionary multiples_of_3_squares where the keys are numbers from a list, but only for those numbers that are multiples of 3, and the values are the squares of these numbers. Here's how the code works:

    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: This line initializes a list named numbers with ten integer values.
    multiples_of_3_squares = {x: x ** 2 for x in numbers if x % 3 == 0}: This line uses a dictionary comprehension to create the multiples_of_3_squares dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary only if the number is a multiple of 3 (i.e., when x % 3 == 0). The key is the number itself (x), and the value is the square of that number (x ** 2).
        for x in numbers: This part of the code iterates through each number in the numbers list.
        if x % 3 == 0: This part of the code checks whether the number x is a multiple of 3.
        x: x ** 2: This part of the code creates the key-value pair. The key is the number x, and the value is its square, computed as x ** 2.
    print(numbers): This line prints the original numbers list to the console.
    print(multiples_of_3_squares): This line prints the multiples_of_3_squares dictionary, which contains numbers (that are multiples of 3) as keys and their squared values as values.

Solution:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
multiples_of_3_squares = {x: x ** 2 for x in numbers if x % 3 == 0}
print(numbers)
print(multiples_of_3_squares)

#----------------------------------------#
Question:
Create a dictionary of numbers and their powers of 2

Sample Output

[1, 2, 3, 4, 5]

{1: 2, 2: 4, 3: 8, 4: 16, 5: 32}

Hints: 

Explication:
This Python code creates a dictionary powers_of_2, where the keys are numbers from a list, and the values are 2 raised to the power of each number. Here's how the code works:

    numbers = [1, 2, 3, 4, 5]: This line initializes a list named numbers with five integer values.
    powers_of_2 = {x: 2 ** x for x in numbers}: This line uses a dictionary comprehension to create the powers_of_2 dictionary. It iterates through each number x in the numbers list and assigns a key-value pair to the dictionary. The key is the number itself (x), and the value is calculated by raising 2 to the power of that number (2 ** x).
        for x in numbers: This part of the code iterates through each number in the numbers list.
        x: 2 ** x: This part of the code creates the key-value pair. The key is the number x, and the value is calculated as 2 ** x, which raises 2 to the power of the number x.
    print(numbers): This line prints the original numbers list to the console.
    print(powers_of_2): This line prints the powers_of_2 dictionary, which contains numbers as keys and their corresponding powers of 2 as values.

Solution:
numbers = [1, 2, 3, 4, 5]
powers_of_2 = {x: 2 ** x for x in numbers}
print(numbers)
print(powers_of_2)

#----------------------------------------#
Question:
Create a dictionary of words and their vowels, excluding words with no vowels

Sample Output

['apple', 'banana', 'cherry', 'dog', 'ct']

{'apple': 2, 'banana': 3, 'cherry': 1, 'dog': 1, 'cat': 1}

Hints: 

Explication:
This Python code defines a dictionary vowel_counts, where the keys are words from a list that contain at least one vowel (a, e, i, o, u), and the values are the counts of vowels in each word. Here's how the code works:

    words = ['apple', 'banana', 'cherry', 'dog', 'ct']: This line initializes a list named words with five string values, some of which contain vowels.
    vowel_counts = {word: sum(1 for char in word if char.lower() in 'aeiou') for word in words if any(char.lower() in 'aeiou' for char in word)}: This line uses a dictionary comprehension to create the vowel_counts dictionary. It iterates through each word in the words list, and for each word, it checks if there is at least one vowel (any vowel character) in that word.
        for word in words: This part of the code iterates through each word in the words list.
        any(char.lower() in 'aeiou' for char in word): This part checks if any character in the word is a lowercase vowel ('a', 'e', 'i', 'o', 'u'). The char.lower() part ensures that both lowercase and uppercase vowels are counted.
        word: sum(1 for char in word if char.lower() in 'aeiou'): If there is at least one vowel in the word, it creates a key-value pair in the dictionary. The key is the word itself (word), and the value is calculated by summing up 1 for each character in the word that is a vowel. The char.lower() in 'aeiou' part checks if the character is a lowercase vowel.
    print(words): This line prints the original words list to the console.
    print(vowel_counts): This line prints the vowel_counts dictionary, which contains words with at least one vowel and their vowel counts.
Solution:
words = ['apple', 'banana', 'cherry', 'dog', 'ct']
vowel_counts = {word: sum(1 for char in word if char.lower() in 'aeiou') for word in words if
                any(char.lower() in 'aeiou' for char in word)}
print(words)
print(vowel_counts)

#----------------------------------------#
Question:
Create a dictionary of strings by replacing vowels with underscores

Sample Output

['apple', 'banana', 'cherry']

{'apple': '_ppl_', 'banana': 'b_n_n_', 'cherry': 'ch_rry'}

Hints: 

Explication:
The Python code defines a dictionary underscored_words, where the keys are words from a list, and the values are the same words with vowels replaced by underscores. Here's how the code works:

    words = ['apple', 'banana', 'cherry']: This line initializes a list named words with three string values.
    underscored_words = {word: ''.join(['_' if char.lower() in 'aeiou' else char for char in word]) for word in words}: This line uses a dictionary comprehension to create the underscored_words dictionary. It iterates through each word in the words list and creates a key-value pair for each word.
        for word in words: This part of the code iterates through each word in the words list.
        ''.join(['_' if char.lower() in 'aeiou' else char for char in word]): For each word, it creates a modified version of the word with vowels replaced by underscores ('_'). It does this by iterating through each character in the word (for char in word) and using a conditional expression to check if the character is a lowercase vowel ('a', 'e', 'i', 'o', 'u'). If it's a vowel, it replaces it with an underscore; otherwise, it keeps the character as it is. The join method is used to concatenate the modified characters back into a single string.
    print(words): This line prints the original words list to the console.
    print(underscored_words): This line prints the underscored_words dictionary, which contains the original words as keys and their vowel-replaced versions as values.

Solution:
words = ['apple', 'banana', 'cherry']
underscored_words = {word: ''.join(['_' if char.lower() in 'aeiou' else char for char in word]) for word in words}
print(words)
print(underscored_words)

#----------------------------------------#
Question:
Create a dictionary of words and their lengths, but only for words starting with 'a'

Sample Output

['apple', 'banana', 'cherry', 'date']

{'apple': 5}

Hints: 

Explication:
The Python code you provided creates a dictionary a_word_lengths, where the keys are words from a list that start with the letter 'a', and the values are the lengths of those words. Here's how the code works:

    words = ['apple', 'banana', 'cherry', 'date']: This line initializes a list named words with four string values.
    a_word_lengths = {word: len(word) for word in words if word.startswith('a')}: This line uses a dictionary comprehension to create the a_word_lengths dictionary. It iterates through each word in the words list and creates a key-value pair for each word that starts with the letter 'a'.
        for word in words: This part of the code iterates through each word in the words list.
        'a_word_lengths' = {word: len(word) for word in words if word.startswith('a')}: For each word, it checks if the word starts with the letter 'a' using the word.startswith('a') condition. If the condition is true, it includes the word in the dictionary. The key is the word itself, and the value is the length of the word, calculated using the len(word) function.
    print(words): This line prints the original words list to the console.
    print(a_word_lengths): This line prints the a_word_lengths dictionary, which contains the words starting with 'a' as keys and their corresponding lengths as values.

Solution:
words = ['apple', 'banana', 'cherry', 'date']
a_word_lengths = {word: len(word) for word in words if word.startswith('a')}
print(words)
print(a_word_lengths)

#----------------------------------------#
Question:
Create a dictionary of strings by repeating each word thrice

Sample Output

['apple', 'banana', 'cherry']

{'apple': 'appleappleapple', 'banana': 'bananabananabanana', 'cherry': 'cherrycherrycherry'}

Hints: 

Explication:
Creates a dictionary repeated_words, where the keys are words from a list, and the values are those words repeated three times. Here's how the code works:

    words = ['apple', 'banana', 'cherry']: This line initializes a list named words with three string values.
    repeated_words = {word: word * 3 for word in words}: This line uses a dictionary comprehension to create the repeated_words dictionary. It iterates through each word in the words list and creates a key-value pair for each word.
        for word in words: This part of the code iterates through each word in the words list.
        'repeated_words' = {word: word * 3 for word in words}: For each word, it takes the word itself as the key and uses string multiplication (word * 3) to repeat the word three times, creating the value.
    print(words): This line prints the original words list to the console.
    print(repeated_words): This line prints the repeated_words dictionary, which contains the words as keys and the words repeated three times as values.

Solution:
words = ['apple', 'banana', 'cherry']
repeated_words = {word: word * 3 for word in words}
print(words)
print(repeated_words)

#----------------------------------------#
Question:
Create a dictionary of strings with words containing 'a' and their lengths

Sample Output

['apple', 'banana', 'cherry', 'date']

{'apple': 5, 'banana': 6, 'date': 4}

Hints: 

Explication:
Creates a dictionary a_word_lengths, where the keys are words from a list that contain the letter 'a,' and the values are the lengths of those words. Here's how the code works:

    words = ['apple', 'banana', 'cherry', 'date']: This line initializes a list named words with four string values.
    a_word_lengths = {word: len(word) for word in words if 'a' in word}: This line uses a dictionary comprehension to create the a_word_lengths dictionary. It iterates through each word in the words list, checks if the letter 'a' is in the word, and creates a key-value pair for words that contain 'a.'
        for word in words: This part of the code iterates through each word in the words list.
        'a_word_lengths' = {word: len(word) for word in words if 'a' in word}: For each word, it takes the word itself as the key and uses the len(word) function to calculate the length of the word, creating the value.
        if 'a' in word: This condition ensures that only words containing the letter 'a' are included in the dictionary.
    print(words): This line prints the original words list to the console.
    print(a_word_lengths): This line prints the a_word_lengths dictionary, which contains the words (with 'a') as keys and their respective lengths as values.

Solution:
words = ['apple', 'banana', 'cherry', 'date']
a_word_lengths = {word: len(word) for word in words if 'a' in word}
print(words)
print(a_word_lengths)

#----------------------------------------#
Question:
Create a dictionary of numbers and their squares, but only for numbers greater than 5

Sample Output

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

{6: 36, 7: 49, 8: 64, 9: 81, 10: 100}

Hints: 

Explication:
Creates a dictionary named squares_greater_than_5, where the keys are numbers from a list that are greater than 5, and the values are the squares of those numbers. Here's how the code works:

    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: This line initializes a list named numbers with ten integer values.
    squares_greater_than_5 = {x: x ** 2 for x in numbers if x > 5}: This line uses a dictionary comprehension to create the squares_greater_than_5 dictionary. It iterates through each number in the numbers list and checks if the number is greater than 5. If the condition is met, it creates a key-value pair in the dictionary.
        for x in numbers: This part of the code iterates through each number in the numbers list.
        squares_greater_than_5 = {x: x ** 2 for x in numbers if x > 5}: For each number, it takes the number itself as the key and calculates the square of the number using the expression x ** 2, creating the value.
        if x > 5: This condition ensures that only numbers greater than 5 are included in the dictionary.
    print(numbers): This line prints the original numbers list to the console.
    print(squares_greater_than_5): This line prints the squares_greater_than_5 dictionary, which contains numbers greater than 5 as keys and their corresponding squares as values.

Solution:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
squares_greater_than_5 = {x: x ** 2 for x in numbers if x > 5}
print(numbers)
print(squares_greater_than_5)

#----------------------------------------#
Question:
Create a dictionary of characters and their ASCII values from a string, excluding non-alphabetic characters

Sample Output

Hello123

{'H': 72, 'e': 101, 'l': 108, 'o': 111}

Hints: 

Explication:
Creates a dictionary named ascii_values to map alphabetical characters in the text variable to their ASCII values. Here's how the code works:

    text = "Hello123": This line initializes the text variable with the string "Hello123."
    ascii_values = {char: ord(char) for char in text if char.isalpha()}: This line uses a dictionary comprehension to create the ascii_values dictionary. It iterates through each character (char) in the text string and checks if the character is alphabetical using the char.isalpha() method. If the character is alphabetical, it creates a key-value pair in the dictionary.
        for char in text: This part of the code iterates through each character in the text string.
        ascii_values = {char: ord(char) for char in text if char.isalpha()}: For each alphabetical character, it takes the character itself as the key and retrieves its ASCII value using the ord(char) function, creating the value.
        if char.isalpha(): This condition ensures that only alphabetical characters are included in the dictionary.
    print(text): This line prints the original text string to the console.
    print(ascii_values): This line prints the ascii_values dictionary, which contains alphabetical characters as keys and their corresponding ASCII values as values.

Solution:
text = "Hello123"
ascii_values = {char: ord(char) for char in text if char.isalpha()}
print(text)
print(ascii_values)

#----------------------------------------#
Question:
Create a dictionary of words and their uppercase forms, excluding words with no uppercase letters

Sample Output

['apple', 'Banana', 'cherry', 'Date']

{'Banana': 'BANANA', 'Date': 'DATE'}

Hints: 

Explication:
Creates a dictionary named uppercase_words that maps words with at least one uppercase character to their uppercase versions. Here's how the code works:

    words = ['apple', 'Banana', 'cherry', 'Date']: This line initializes the words list with a collection of words, some of which contain uppercase characters.
    uppercase_words = {word: word.upper() for word in words if any(char.isupper() for char in word)}: This line uses a dictionary comprehension to create the uppercase_words dictionary. It iterates through each word in the words list and checks if there is at least one uppercase character (char.isupper()) in that word. If the word contains at least one uppercase character, it creates a key-value pair in the dictionary.
        for word in words: This part of the code iterates through each word in the words list.
        if any(char.isupper() for char in word): This condition checks if there is at least one uppercase character in the current word. The any function checks if any character in the word is uppercase.
        {word: word.upper() for word in words if any(char.isupper() for char in word)}: If the condition is met, it creates a key-value pair in the dictionary. The key is the original word, and the value is the uppercase version of that word obtained using word.upper().
    print(words): This line prints the original words list to the console.
    print(uppercase_words): This line prints the uppercase_words dictionary, which contains words with at least one uppercase character as keys and their uppercase versions as values.

Solution:
words = ['apple', 'Banana', 'cherry', 'Date']
uppercase_words = {word: word.upper() for word in words if any(char.isupper() for char in word)}
print(words)
print(uppercase_words)

#----------------------------------------#
Question:
Create a dictionary of strings with words containing more than 4 letters

Sample Output

Python is a powerful and versatile programming language

{'Python': 6, 'powerful': 8, 'versatile': 9, 'programming': 11, 'language': 8}

Hints: 

Explication:
The Python code pocesses a sentence and creates a dictionary named long_words. This dictionary maps words with a length greater than 4 to their respective lengths. Here's how the code works:

    sentence = "Python is a powerful and versatile programming language": This line initializes the sentence variable with a string containing words.
    long_words = {word: len(word) for word in sentence.split() if len(word) > 4}: This line uses a dictionary comprehension to create the long_words dictionary. It splits the sentence into words using sentence.split(), then iterates through each word in the list of words.
        for word in sentence.split(): This part of the code iterates through each word in the sentence.
        if len(word) > 4: This condition checks if the length of the current word is greater than 4 characters.
        {word: len(word)}: If the condition is met, it creates a key-value pair in the dictionary. The key is the word itself, and the value is the length of the word obtained using len(word).
    print(sentence): This line prints the original sentence to the console.
    print(long_words): This line prints the long_words dictionary, which contains words with a length greater than 4 as keys and their respective lengths as values.

Solution:
sentence = "Python is a powerful and versatile programming language"
long_words = {word: len(word) for word in sentence.split() if len(word) > 4}
print(sentence)
print(long_words)

#----------------------------------------#
Question:
Create a dictionary of words and their first letter capitalized

Sample Output

['apple', 'banana', 'cherry']

{'apple': 'Apple', 'banana': 'Banana', 'cherry': 'Cherry'}

Hints: 

Explication:
The List of words and creates a dictionary named capitalized_first_letter. This dictionary maps each word to a version of the word where the first letter is capitalized. Here's how the code works:

    words = ['apple', 'banana', 'cherry']: This line initializes the words variable with a list of words.
    capitalized_first_letter = {word: word[0].upper() + word[1:] for word in words}: This line uses a dictionary comprehension to create the capitalized_first_letter dictionary. It iterates through each word in the words list.
        {word: word[0].upper() + word[1:]}: This part of the code creates key-value pairs in the dictionary. The key is the original word, and the value is a modified version of the word where the first letter is capitalized. This is achieved by using word[0].upper() to capitalize the first letter and then concatenating it with the rest of the word obtained using word[1:]
    print(words): This line prints the original list of words, words, to the console.
    print(capitalized_first_letter): This line prints the capitalized_first_letter dictionary, which contains the original words as keys and their versions with the first letter capitalized as values.

Solution:
words = ['apple', 'banana', 'cherry']
capitalized_first_letter = {word: word[0].upper() + word[1:] for word in words}
print(words)
print(capitalized_first_letter)

#----------------------------------------#
Question:
Create a dictionary of strings with vowels removed

Sample Output

['apple', 'banana', 'cherry']

{'apple': 'ppl', 'banana': 'bnn', 'cherry': 'chrry'}

Hints: 

Explication:
The list of words and creates a dictionary named without_vowels. This dictionary maps each word to a version of the word where all vowels (both uppercase and lowercase) are removed. Here's how the code works:

    words = ['apple', 'banana', 'cherry']: This line initializes the words variable with a list of words.
    without_vowels = {word: ''.join([char for char in word if char.lower() not in 'aeiou']) for word in words}: This line uses a dictionary comprehension to create the without_vowels dictionary. It iterates through each word in the words list.
        {word: ''.join([char for char in word if char.lower() not in 'aeiou'])}: This part of the code creates key-value pairs in the dictionary. The key is the original word, and the value is a modified version of the word. The modification is done by iterating through each character char in the word and checking if char.lower() (the lowercase version of the character) is not in the string 'aeiou', which represents the vowels. If char is not a vowel, it is included in the modified version of the word. The join function is used to concatenate the characters back into a single string.
    print(words): This line prints the original list of words, words, to the console.
    print(without_vowels): This line prints the without_vowels dictionary, which contains the original words as keys and their versions with the vowels removed as values.

Solution:
words = ['apple', 'banana', 'cherry']
without_vowels = {word: ''.join([char for char in word if char.lower() not in 'aeiou']) for word in words}
print(words)
print(without_vowels)

#----------------------------------------#
Question:
Create a dictionary of numbers with their signs reversed

Sample Output

[5, -10, 15, -20, 25]

{5: -5, -10: 10, 15: -15, -20: 20, 25: -25}

Hints: 

Explication:
The list of numbers and creates a dictionary named reversed_signs. This dictionary maps each number to its negation (changing its sign from positive to negative or vice versa). Here's how the code works:

    numbers = [5, -10, 15, -20, 25]: This line initializes the numbers variable with a list of integers, including both positive and negative numbers.
    reversed_signs = {x: -x for x in numbers}: This line uses a dictionary comprehension to create the reversed_signs dictionary. It iterates through each number x in the numbers list.
        {x: -x}: This part of the code creates key-value pairs in the dictionary. The key is the original number x, and the value is the negation of that number, which is calculated as -x.
    print(numbers): This line prints the original list of numbers, numbers, to the console.
    print(reversed_signs): This line prints the reversed_signs dictionary, which contains the original numbers as keys and their negations as values.

Solution:
numbers = [5, -10, 15, -20, 25]
reversed_signs = {x: -x for x in numbers}
print(numbers)
print(reversed_signs)

#----------------------------------------#
Question:
Create a dictionary of strings with words in reverse

Sample Output

Python is fun

{0: 'fun', 1: 'is', 2: 'Python'}

Hints: 

Explication:
The Python code processes a sentence and creates a dictionary named reversed_words. This dictionary maps each word's index (position) in reverse order to the word itself. Here's how the code works:

    sentence = "Python is fun": This line initializes the sentence variable with a string containing multiple words.
    reversed_words = {i: word for i, word in enumerate(sentence.split()[::-1])}: This line uses a dictionary comprehension to create the reversed_words dictionary. Here's what happens:
        sentence.split(): This part of the code splits the sentence into individual words and returns a list of words.
        [::-1]: This part reverses the order of the words in the list. So, it effectively reverses the word order in the sentence.
        enumerate(...): This function is used to iterate through the reversed list of words, and it returns both the index (i) and the word itself.
        {i: word for i, word in ...}: This part of the code creates key-value pairs in the dictionary. The keys (i) are the indices of the words, and the values (word) are the individual words from the reversed list.
    print(sentence): This line prints the original sentence, sentence, to the console.
    print(reversed_words): This line prints the reversed_words dictionary, which contains word indices as keys (in reverse order) and the corresponding words as values.

Solution:
sentence = "Python is fun"
reversed_words = {i: word for i, word in enumerate(sentence.split()[::-1])}
print(sentence)
print(reversed_words)

#----------------------------------------#
Question:
Create a dictionary of numbers with their divisors

Sample Output

[1, 2, 3, 4, 5]

{1: [1], 2: [1, 2], 3: [1, 3], 4: [1, 2, 4], 5: [1, 5]}

Hints: 

Explication:
Creates a dictionary named divisors that maps each number in the numbers list to a list of its divisors. Here's how the code works:

    numbers = [1, 2, 3, 4, 5]: This line initializes the numbers list with a sequence of integers.
    divisors = {x: [i for i in range(1, x + 1) if x % i == 0] for x in numbers}: This line uses a dictionary comprehension to create the divisors dictionary. Here's what happens:
        for x in numbers: This part of the code iterates over each number x in the numbers list.
        {x: ...}: This part of the code creates key-value pairs in the dictionary. The key is the number x, and the value is the result of the inner list comprehension.
        [i for i in range(1, x + 1) if x % i == 0]: This is the list comprehension that generates a list of divisors for each number x. It iterates through numbers from 1 to x (inclusive) and checks if x is divisible by i. If it is, i is included in the list of divisors.
    print(numbers): This line prints the numbers list to the console.
    print(divisors): This line prints the divisors dictionary, which contains numbers as keys and lists of divisors as values.

Solution:
numbers = [1, 2, 3, 4, 5]
divisors = {x: [i for i in range(1, x + 1) if x % i == 0] for x in numbers}
print(numbers)
print(divisors)

#----------------------------------------#
Question:
Create a dictionary of characters and their counts, excluding whitespace characters, from a string

Sample Output

hello world

{'o': 2, 'h': 1, 'r': 1, 'w': 1, 'e': 1, 'l': 3, 'd': 1}

Hints: 

Explication:
The counts the occurrences of non-space characters in the given text and creates a dictionary that maps each character to its count. Here's how the code works:

    text = "hello world": This line initializes the text variable with the input text.
    char_counts = {char: text.count(char) for char in set(text) if not char.isspace()}: This line uses a dictionary comprehension to create the char_counts dictionary. Here's what happens:
        {char: ...}: This part of the code creates key-value pairs in the dictionary. The key is a character char, and the value is the result of the text.count(char) expression, which counts the occurrences of char in the text.
        for char in set(text): This part iterates over each unique character in the text. The set(text) is used to obtain a set of unique characters, eliminating duplicates.
        if not char.isspace(): This part checks if the character char is not a whitespace character. It ensures that only non-space characters are counted.
    print(text): This line prints the original text to the console.
    print(char_counts): This line prints the char_counts dictionary, which contains non-space characters as keys and their counts as values.

Solution:
text = "hello world"
char_counts = {char: text.count(char) for char in set(text) if not char.isspace()}
print(text)
print(char_counts)

#----------------------------------------#
Question:
Mapping lowercase letters to their ASCII values

Sample Output

{'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108, 'm': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114, 's': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}

Hints: 

Explication:
Creates a dictionary called ascii_mapping that maps each lowercase letter of the English alphabet to its corresponding ASCII value. Here's what the code does:

    ascii_mapping = {char: ord(char) for char in 'abcdefghijklmnopqrstuvwxyz'}: This line creates the ascii_mapping dictionary using a dictionary comprehension. Here's how it works:
        {char: ord(char) for char in 'abcdefghijklmnopqrstuvwxyz'} is the dictionary comprehension. It iterates over each character (char) in the string 'abcdefghijklmnopqrstuvwxyz'.
        For each character, it creates a key-value pair in the dictionary. The key (char) is the character itself, and the value (ord(char)) is the ASCII value of that character obtained using the ord function.

Solution:
ascii_mapping = {char: ord(char) for char in 'abcdefghijklmnopqrstuvwxyz'}
print(ascii_mapping)

#----------------------------------------#
Question:
Numbers and their factorial from 1 to 10

Sample Output

{1: 1, 2: 2, 3: 6, 4: 24, 5: 120, 6: 720, 7: 5040, 8: 40320, 9: 362880, 10: 3628800}

Hints: 

Explication:
The code defines a Python function factorial(n) to calculate the factorial of a number n using recursion and then uses this function to create a dictionary called factorials. This dictionary maps numbers from 1 to 10 to their respective factorial values. Here's a step-by-step explanation of the code:

    def factorial(n): This line defines a function named factorial that takes an integer n as input and calculates the factorial of n using recursion.
        The base case is defined as if n == 0:. When n is 0, the function returns 1 because 0! (read as "zero factorial") is defined as 1.
        In the recursive case, the function calculates the factorial of n as n * factorial(n - 1). It recursively calls itself with a smaller value until it reaches the base case.
    factorials = {x: factorial(x) for x in range(1, 11)}: This line creates the factorials dictionary using a dictionary comprehension. Here's how it works:
        {x: factorial(x) for x in range(1, 11)} is the dictionary comprehension. It iterates over the range of numbers from 1 to 10 (inclusive).
        For each number x, it creates a key-value pair in the dictionary. The key (x) is the number itself, and the value (factorial(x)) is calculated by calling the factorial function with that number as input.
    print(factorials): This line prints the factorials dictionary to the console.

Solution:
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)
 
factorials = {x: factorial(x) for x in range(1, 11)}
print(factorials)

#----------------------------------------#
Question:
Numbers and their binary representation from 1 to 10

Sample Output

{1: '1', 2: '10', 3: '11', 4: '100', 5: '101', 6: '110', 7: '111', 8: '1000', 9: '1001', 10: '1010'}

Hints: 

Explication:
Creates a dictionary called binary_rep using a dictionary comprehension in Python. This dictionary maps numbers from 1 to 10 to their respective binary representations as strings. Here's a step-by-step explanation of the code:

    binary_rep = {x: bin(x)[2:] for x in range(1, 11)}: This line creates the binary_rep dictionary using a dictionary comprehension. Here's how it works:
        {x: bin(x)[2:] for x in range(1, 11)} is the dictionary comprehension. It iterates over the range of numbers from 1 to 10 (inclusive).
        For each number x, it creates a key-value pair in the dictionary. The key (x) is the number itself, and the value (bin(x)[2:]) is calculated by converting x to its binary representation using the bin function and then removing the first two characters (which are '0b') from the binary string to get the binary representation as a string.
    print(binary_rep): This line prints the binary_rep dictionary to the console.

Solution:
binary_rep = {x: bin(x)[2:] for x in range(1, 11)}
print(binary_rep)

#----------------------------------------#
Question:
Pairs of distinct elements and their absolute difference from two lists

Sample Output

[3, 6, 9]

[5, 10, 15]

{(3, 5): 2, (3, 10): 7, (3, 15): 12, (6, 5): 1, (6, 10): 4, (6, 15): 9, (9, 5): 4, (9, 10): 1, (9, 15): 6}

Hints: 

Explication:
Creates a dictionary named abs_diff_dict. This dictionary maps pairs of elements from list1 and list2 to their absolute differences. Here's how the code works:

    list1 = [3, 6, 9] and list2 = [5, 10, 15]: These lines initialize two lists, list1 and list2, with some integer values.
    abs_diff_dict = {(x, y): abs(x - y) for x in list1 for y in list2}: This line uses a dictionary comprehension to create the abs_diff_dict dictionary. Here's what happens:
        (x, y) is used as a tuple to represent pairs of elements, where x is an element from list1 and y is an element from list2.
        abs(x - y) calculates the absolute difference between x and y for each pair.
        The dictionary comprehension iterates over all possible pairs of elements from list1 and list2 and computes the absolute difference for each pair, using the tuple (x, y) as the key and the absolute difference as the value.
    print(list1): This line prints the contents of list1 to the console.
    print(list2): This line prints the contents of list2 to the console.
    print(abs_diff_dict): This line prints the abs_diff_dict dictionary, which contains pairs of elements as keys and their absolute differences as values.

Solution:
list1 = [3, 6, 9]
list2 = [5, 10, 15]
abs_diff_dict = {(x, y): abs(x - y) for x in list1 for y in list2}
print(list1)
print(list2)
print(abs_diff_dict)

#----------------------------------------#
Question:
Pairs of distinct elements and their character position sum from two lists

Sample Output

['abc', 'def', 'ghi']

['jkl', 'mno', 'pqr']

{('abc', 'jkl'): 615, ('abc', 'mno'): 624, ('abc', 'pqr'): 633, ('def', 'jkl'): 624, ('def', 'mno'): 633, ('def', 'pqr'): 642, ('ghi', 'jkl'): 633, ('ghi', 'mno'): 642, ('ghi', 'pqr'): 651}

Hints: 

Explication:
Creates a dictionary called char_pos_sum_dict using a dictionary comprehension in Python. This dictionary maps pairs of strings from two lists, list1 and list2, to the sum of the ordinal values (ASCII values) of the characters in each pair. Here's a step-by-step explanation of the code:

    list1 = ["abc", "def", "ghi"]: This line defines a list called list1 containing three strings.
    list2 = ["jkl", "mno", "pqr"]: This line defines another list called list2 containing three strings.
    char_pos_sum_dict = {(x, y): sum(ord(char) for char in x) + sum(ord(char) for char in y) for x in list1 for y in list2}: This line creates the char_pos_sum_dict dictionary using a nested dictionary comprehension. Here's how it works:
        {(x, y): sum(ord(char) for char in x) + sum(ord(char) for char in y) for x in list1 for y in list2} is the dictionary comprehension. It iterates over pairs of strings (x, y) where x comes from list1 and y comes from list2.
        For each pair of strings, it creates a key-value pair in the dictionary. The key x, y is a tuple containing the two strings. The value is calculated by summing the ordinal values (ASCII values) of all characters in the first string x and all characters in the second string y.
    print(list1): This line prints the contents of list1 to the console.
    print(list2): This line prints the contents of list2 to the console.
    print(char_pos_sum_dict): This line prints the char_pos_sum_dict dictionary to the console.

Solution:
list1 = ["abc", "def", "ghi"]
list2 = ["jkl", "mno", "pqr"]
char_pos_sum_dict = {(x, y): sum(ord(char) for char in x) + sum(ord(char) for char in y) for x in list1 for y in list2}
print(list1)
print(list2)
print(char_pos_sum_dict)

#----------------------------------------#
Question:
Distinct words and their length, excluding those with odd lengths, in a sentence

Sample Output

Hello, how are you?

{'Hello,': 6, 'you?': 4}

Hints: 

Explication:
The code processes a sentence and creates a dictionary named distinct_word_length_no_odd using a dictionary comprehension in Python. This dictionary maps distinct words from the sentence to their respective lengths, but only for words with even lengths. Here's a step-by-step explanation of the code:

    sentence = "Hello, how are you?": This line defines a string variable called sentence containing the sentence "Hello, how are you?"
    distinct_word_length_no_odd = {word: len(word) for word in set(sentence.split()) if len(word) % 2 == 0}: This line creates the distinct_word_length_no_odd dictionary using a dictionary comprehension. Here's how it works:
        {word: len(word) for word in set(sentence.split()) if len(word) % 2 == 0} is the dictionary comprehension. It performs the following steps:
        sentence.split() splits the sentence string into a list of words. In this case, it will include words like "Hello," (with a comma) and "you?" (with a question mark).
        set(sentence.split()) creates a set of distinct words by removing duplicates and punctuation. So, it will contain words like "Hello," (without the comma) and "you" (without the question mark).
        for word in set(sentence.split()) iterates over each distinct word in the set.
        len(word) % 2 == 0 checks if the length of the word is even.
        If a word's length is even, it creates a key-value pair in the dictionary. The key (word) is the word itself, and the value (len(word)) is the length of the word.
    print(sentence): This line prints the original sentence, which is "Hello, how are you?", to the console.
    print(distinct_word_length_no_odd): This line prints the distinct_word_length_no_odd dictionary to the console.

Solution:
sentence = "Hello, how are you?"
distinct_word_length_no_odd = {word: len(word) for word in set(sentence.split()) if len(word) % 2 == 0}
print(sentence)
print(distinct_word_length_no_odd)

#----------------------------------------#
Question:
Distinct words and their length, excluding those with even lengths, in a sentence

Sample Output

Hello, how are you?

{'how': 3, 'are': 3}

Hints: 

Explication:
The code processes a sentence and creates a dictionary named distinct_word_length_no_even using a dictionary comprehension in Python. This dictionary maps distinct words from the sentence to their respective lengths, but only for words with odd lengths. Here's a step-by-step explanation of the code:

    sentence = "Hello, how are you?": This line defines a string variable called sentence containing the sentence "Hello, how are you?"
    distinct_word_length_no_even = {word: len(word) for word in set(sentence.split()) if len(word) % 2 != 0}: This line creates the distinct_word_length_no_even dictionary using a dictionary comprehension. Here's how it works:
        {word: len(word) for word in set(sentence.split()) if len(word) % 2 != 0} is the dictionary comprehension. It performs the following steps:
        sentence.split() splits the sentence string into a list of words. In this case, it will include words like "Hello," (with a comma) and "you?" (with a question mark).
        set(sentence.split()) creates a set of distinct words by removing duplicates and punctuation. So, it will contain words like "Hello," (without the comma) and "you" (without the question mark).
        for word in set(sentence.split()) iterates over each distinct word in the set.
        len(word) % 2 != 0 checks if the length of the word is odd.
        If a word's length is odd, it creates a key-value pair in the dictionary. The key (word) is the word itself, and the value (len(word)) is the length of the word.
    print(sentence): This line prints the original sentence, which is "Hello, how are you?", to the console.
    print(distinct_word_length_no_even): This line prints the distinct_word_length_no_even dictionary to the console.

Solution:
sentence = "Hello, how are you?"
distinct_word_length_no_even = {word: len(word) for word in set(sentence.split()) if len(word) % 2 != 0}
print(sentence)
print(distinct_word_length_no_even)

#----------------------------------------#
Question:
Characters and their occurrence count, excluding punctuation, in a sentence

Sample Output

Hello, how are you?

{'w': 1, 'r': 1, 'u': 1, 'o': 3, 'e': 2, 'H': 1, 'l': 2, 'h': 1, ' ': 3, 'y': 1, 'a': 1}

Hints: 

Explication:
The code processes a sentence and creates a dictionary named char_occurrence_no_punct using a dictionary comprehension in Python. This dictionary maps characters that occur in the sentence to their respective counts, excluding punctuation characters. Here's a step-by-step explanation of the code:

    import string: This line imports the string module, which provides a string containing all ASCII punctuation characters.
    sentence = "Hello, how are you?": This line defines a string variable called sentence containing the sentence "Hello, how are you?"
    char_occurrence_no_punct = {char: sentence.count(char) for char in set(sentence) if char not in string.punctuation}: This line creates the char_occurrence_no_punct dictionary using a dictionary comprehension. Here's how it works:
        {char: sentence.count(char) for char in set(sentence) if char not in string.punctuation} is the dictionary comprehension. It performs the following steps:
        set(sentence) creates a set of distinct characters from the sentence.
        for char in set(sentence) iterates over each distinct character in the set.
        char not in string.punctuation checks if the character is not in the string string.punctuation, which contains all punctuation characters.
        If a character is not a punctuation character, it creates a key-value pair in the dictionary. The key (char) is the character itself, and the value (sentence.count(char)) is the count of how many times that character appears in the sentence.
    print(sentence): This line prints the original sentence, which is "Hello, how are you?", to the console.
    print(char_occurrence_no_punct): This line prints the char_occurrence_no_punct dictionary to the console.

Solution:
import string
 
sentence = "Hello, how are you?"
char_occurrence_no_punct = {char: sentence.count(char) for char in set(sentence) if char not in string.punctuation}
print(sentence)
print(char_occurrence_no_punct)

#----------------------------------------#
Question:
Distinct words and their length, excluding those with lengths not Fibonacci, in a sentence

Sample Output

Hello, how are you?

{'are': 3, 'how': 3}

Hints: 

Explication:
The code defines a function is_fibonacci_length(n) to check whether a given number is a Fibonacci number (by checking if its length is in the Fibonacci sequence). It then uses this function to create a dictionary named distinct_word_length_fibonacci using a dictionary comprehension in Python. This dictionary maps distinct words from the sentence to their respective lengths, but only for words with lengths that are Fibonacci numbers. Here's a step-by-step explanation of the code:

    def is_fibonacci_length(n) : This line defines a function named is_fibonacci_length that takes an integer n as input and checks whether n is a Fibonacci number by comparing its length to the Fibonacci sequence.
        Inside the function, a list fib is initialized with the first two Fibonacci numbers (0 and 1).
        A while loop checks whether the last number in the fib list (fib[-1]) is less than or equal to n. It continues to calculate Fibonacci numbers until the last one is less than or equal to n.
        If fib[-1] is equal to n, the function returns True because n is a Fibonacci number based on its length.
        If the loop completes without finding a Fibonacci number of the given length, the function returns False.
    sentence = "Hello, how are you?": This line defines a string variable called sentence containing the sentence "Hello, how are you?"
    distinct_word_length_fibonacci = {word: len(word) for word in set(sentence.split()) if is_fibonacci_length(len(word))}: This line creates the distinct_word_length_fibonacci dictionary using a dictionary comprehension. Here's how it works:
        {word: len(word) for word in set(sentence.split()) if is_fibonacci_length(len(word)} is the dictionary comprehension. It performs the following steps:
        sentence.split() splits the sentence string into a list of words.
        set(sentence.split()) creates a set of distinct words by removing duplicates.
        for word in set(sentence.split()) iterates over each distinct word in the set.
        is_fibonacci_length(len(word)) checks if the length of the word is a Fibonacci number using the is_fibonacci_length function.
        If a word's length is a Fibonacci number, it creates a key-value pair in the dictionary. The key (word) is the word itself, and the value (len(word)) is the length of the word.
    print(sentence): This line prints the original sentence, which is "Hello, how are you?", to the console.
    print(distinct_word_length_fibonacci): This line prints the distinct_word_length_fibonacci dictionary to the console.

Solution:
def is_fibonacci_length(n):
    fib = [0, 1]
    while fib[-1] <= n:
        if fib[-1] == n:
            return True
        fib.append(fib[-1] + fib[-2])
    return False
 
sentence = "Hello, how are you?"
distinct_word_length_fibonacci = {word: len(word) for word in set(sentence.split()) if is_fibonacci_length(len(word))}
print(sentence)
print(distinct_word_length_fibonacci)

#----------------------------------------#
Question:
Mapping words to their frequency of containing the letter 'e'

Sample Output

Hello, how are you?

{'Hello,': 1, 'how': 0, 'are': 1, 'you?': 0}

Hints: 

Explication:
The code processes a sentence and creates a dictionary named word_contains_e using a dictionary comprehension in Python. This dictionary maps words in the sentence to the count of the letter 'e' in each word. Here's a step-by-step explanation of the code:

    sentence = "Hello, how are you?": This line defines a string variable called sentence containing the sentence "Hello, how are you?"
    word_contains_e = {word: word.count('e') for word in sentence.split()}: This line creates the word_contains_e dictionary using a dictionary comprehension. Here's how it works:
        {word: word.count('e') for word in sentence.split()} is the dictionary comprehension. It performs the following steps:
        sentence.split() splits the sentence string into a list of words. In this case, it will include words like "Hello," (with a comma) and "you?" (with a question mark).
        for word in sentence.split() iterates over each word in the list of words.
        word.count('e') counts the occurrences of the letter 'e' in the word.
        It creates a key-value pair in the dictionary, where the key (word) is the word itself, and the value (word.count('e')) is the count of the letter 'e' in the word.
    print(sentence): This line prints the original sentence, which is "Hello, how are you?", to the console.
    print(word_contains_e): This line prints the word_contains_e dictionary to the console.

Solution:
sentence = "Hello, how are you?"
word_contains_e = {word: word.count('e') for word in sentence.split()}
print(sentence)
print(word_contains_e)

#----------------------------------------#
Question:
Mapping characters to their position in the alphabet

Sample Output

{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}

Hints: 

Explication:
Creates a dictionary named char_alphabet_position using a dictionary comprehension in Python. This dictionary maps lowercase letters of the English alphabet to their respective positions in the alphabet, starting from 1. Here's a step-by-step explanation of the code:

    import string: This line imports the string module, which provides a string constant string.ascii_lowercase containing all lowercase letters of the English alphabet.
    char_alphabet_position = {char: string.ascii_lowercase.index(char) + 1 for char in string.ascii_lowercase}: This line creates the char_alphabet_position dictionary using a dictionary comprehension. Here's how it works:
        {char: string.ascii_lowercase.index(char) + 1 for char in string.ascii_lowercase} is the dictionary comprehension. It performs the following steps:
        string.ascii_lowercase is the string containing all lowercase letters of the English alphabet: "abcdefghijklmnopqrstuvwxyz."
        for char in string.ascii_lowercase iterates over each lowercase letter in the alphabet.
        string.ascii_lowercase.index(char) finds the index (position) of the character char within the string string.ascii_lowercase. This index is a zero-based index.
        + 1 is added to the index to shift it from a zero-based index to a one-based position, as positions in the alphabet start from 1.
        It creates a key-value pair in the dictionary, where the key (char) is the lowercase letter, and the value (string.ascii_lowercase.index(char) + 1) is its position in the alphabet.
    print(char_alphabet_position): This line prints the char_alphabet_position dictionary to the console.

Solution:
import string
 
char_alphabet_position = {char: string.ascii_lowercase.index(char) + 1 for char in string.ascii_lowercase}
print(char_alphabet_position)

#----------------------------------------#
Question:
Mapping words to their palindrome status in a sentence

Sample Output

madam sees the racecar

{'madam': True, 'sees': True, 'the': False, 'racecar': True}

Hints: 

Explication:
The code processes a sentence and creates a dictionary named word_is_palindrome using a dictionary comprehension in Python. This dictionary maps words in the sentence to a Boolean value indicating whether each word is a palindrome. Here's a step-by-step explanation of the code:

    sentence = "madam sees the racecar": This line defines a string variable called sentence containing the sentence "madam sees the racecar."
    word_is_palindrome = {word: word == word[::-1] for word in sentence.split()}: This line creates the word_is_palindrome dictionary using a dictionary comprehension. Here's how it works:
        {word: word == word[::-1] for word in sentence.split()} is the dictionary comprehension. It performs the following steps:
        sentence.split() splits the sentence string into a list of words. In this case, the sentence contains words like "madam," "sees," "the," and "racecar."
        for word in sentence.split() iterates over each word in the list of words.
        word == word[::-1] checks if the word is a palindrome. It does this by comparing the word itself (word) to its reverse (word[::-1]).
        If a word is a palindrome, it creates a key-value pair in the dictionary. The key (word) is the word itself, and the value (word == word[::-1]) is True, indicating that it's a palindrome.
        If a word is not a palindrome, the value is False.
    print(sentence): This line prints the original sentence, which is "madam sees the racecar," to the console.
    print(word_is_palindrome): This line prints the word_is_palindrome dictionary to the console.

Solution:
sentence = "madam sees the racecar"
word_is_palindrome = {word: word == word[::-1] for word in sentence.split()}
print(sentence)
print(word_is_palindrome)

#----------------------------------------#
Question:
Mapping numbers to their binary and hexadecimal representations

Sample Output

{1: ('1', '1'), 2: ('10', '2'), 3: ('11', '3'), 4: ('100', '4'), 5: ('101', '5'), 6: ('110', '6'), 7: ('111', '7'), 8: ('1000', '8'), 9: ('1001', '9'), 10: ('1010', 'a')}

Hints: 

Explication:
Creates a dictionary named number_binary_hex using a dictionary comprehension in Python. This dictionary maps numbers from 1 to 10 to their binary and hexadecimal representations. Here's a step-by-step explanation of the code:

    number_binary_hex = {num: (bin(num)[2:], hex(num)[2:]) for num in range(1, 11)}: This line creates the number_binary_hex dictionary using a dictionary comprehension. Here's how it works:
        {num: (bin(num)[2:], hex(num)[2:]) for num in range(1, 11)} is the dictionary comprehension. It performs the following steps:
        for num in range(1, 11) iterates over numbers from 1 to 10 (inclusive).
        (bin(num)[2:], hex(num)[2:]) is a tuple containing two elements:
            bin(num)[2:] converts the number num to its binary representation using the bin function and then slices off the first two characters (which represent "0b" at the beginning of the binary string).
            hex(num)[2:] converts the number num to its hexadecimal representation using the hex function and then slices off the first two characters (which represent "0x" at the beginning of the hexadecimal string).
        It creates a key-value pair in the dictionary, where the key (num) is the number itself, and the value is the tuple containing the binary and hexadecimal representations.
    print(number_binary_hex): This line prints the number_binary_hex dictionary to the console.

Solution:
number_binary_hex = {num: (bin(num)[2:], hex(num)[2:]) for num in range(1, 11)}
print(number_binary_hex)

#----------------------------------------#
Question:
Mapping words to their reverse in a sentence

Sample Output

Hello, how are you?

{'Hello,': ',olleH', 'how': 'woh', 'are': 'era', 'you?': '?uoy'}

Hints: 

Explication:
The code processes a sentence and creates a dictionary named word_reverse_mapping using a dictionary comprehension in Python. This dictionary maps words in the sentence to their respective reversed versions. Here's a step-by-step explanation of the code:

    sentence = "Hello, how are you?": This line defines a string variable called sentence containing the sentence "Hello, how are you?"
    word_reverse_mapping = {word: word[::-1] for word in sentence.split()}: This line creates the word_reverse_mapping dictionary using a dictionary comprehension. Here's how it works:
        {word: word[::-1] for word in sentence.split()} is the dictionary comprehension. It performs the following steps:
        sentence.split() splits the sentence string into a list of words. In this case, it will include words like "Hello," (with a comma) and "you?" (with a question mark).
        for word in sentence.split() iterates over each word in the list of words.
        word[::-1] reverses the order of characters in the word. This is achieved by using Python's slicing notation, where [::-1] is used to reverse a string.
        It creates a key-value pair in the dictionary, where the key (word) is the word itself, and the value (word[::-1]) is the word reversed.
    print(sentence): This line prints the original sentence, which is "Hello, how are you?", to the console.
    print(word_reverse_mapping): This line prints the word_reverse_mapping dictionary to the console.

Solution:
sentence = "Hello, how are you?"
word_reverse_mapping = {word: word[::-1] for word in sentence.split()}
print(sentence)
print(word_reverse_mapping)

#----------------------------------------#
Question:
DEPART Class
Write a python program to Create Student Class
Hints: 

Explication:
This Python program defines a Student class with attributes and methods to set and display student data. Here's an explanation of the program:

    class Student: This is the main class representing a student. It has the following attributes and methods:
        Class attributes:
            id: To store the student's ID (initialized to 0 by default).
            name: To store the student's name (initialized as an empty string by default).
            gender: To store the student's gender (initialized as an empty string by default).
            total: To store the student's total marks (initialized as an empty string by default).
            per: To store the student's percentage (initialized to 0 by default).
        setData(self, id, name, gender, total, per): This method is used to set the data for a student. It takes the student's ID, name, gender, total marks, and percentage as parameters and assigns them to the corresponding attributes of the instance.
        showData(self): This method is used to display the student's data. It prints the ID, name, gender, total marks, and percentage of the student.
    An instance of the Student class is created and named s.
    The setData method is called on the s instance to set the data for the student. In this case, the student's ID is set to 1, the name is set to "Sam Kumar," the gender is set to "Male," the total marks are set to 422, and the percentage is set to 84.44.
    The showData method is called on the s instance to print the student's data.

Solution:
class Student():
    id = 0
    name = ""
    gender = ""
    total = ""
    per = 0	
 
    def setData(self,id,name,gender,total,per):	# function to set data 
        self.id = id
        self.name = name
        self.gender = gender
        self.total = total
        self.per = per	
 
    def showData(self):	# function to get/print data
        print("Id :",self.id)
        print("Name :", self.name)
        print("Gender :", self.gender)
        print("Total :", self.total)
        print("Percentage :", self.per)
 
s = Student()
s.setData(1,'Sam Kumar','Male',422,84.44)
s.showData()

#----------------------------------------#
Question:
Write a python program to Create Student Class with Constructor and Destructor
Hints: 

Explication:
This Python code defines a Student class with a constructor, destructor, and methods for setting and displaying student data. Here's an explanation of the code:

    class Student:: This line defines a class named Student, which serves as a blueprint for creating student objects.
    def __init__(self):: This is the constructor method of the Student class. The constructor is automatically called when an instance of the class is created. Inside the constructor:
        Default values are assigned to instance variables (attributes) such as id, name, gender, total, and per.
        These attributes represent the student's ID, name, gender, total marks, and percentage.
    def __del__(self):: This is the destructor method of the Student class. The destructor is called when an object is about to be destroyed. In this case, it simply prints "Object Destroyed" when the object is destroyed.
    def setData(self):: This method allows you to set the data for a student instance. It prompts the user for input and sets the values of the student's attributes based on the user's input.
    def showData(self):: This method displays the data of the student. It prints the values of the student's attributes to the console.
    s = Student(): This line creates an instance of the Student class and assigns it to the variable s. This instance represents a specific student.
    s.setData(): The setData method is called on the s instance to set the data for this student. The user is prompted to enter the student's ID, name, gender, total marks, and percentage.
    s.showData(): The showData method is called on the s instance to display the student's data. It prints the values of the attributes set in the setData method.

When you run this program, it will create a Student object, set its attributes based on user input, and then display the student's information.

Solution:
class Student:
    def __init__(self): #Constructor
        self.id = 0
        self.name = ""
        self.gender = ""
        self.total = ""
        self.per = 0
 
    def __del__(self): #Destructor
        print("Object Destroyed")
 
    def setData(self):
        self.id = int(input("Enter a ID :"))
        self.name = input("Enter a Name :")
        self.gender = input("Enter a Gender :")
        self.total = int(input("Enter a Total :"))
        self.per = float(input("Enter a Percentage :"))
 
    def showData(self):
        print("Id :",self.id)
        print("Name :", self.name)
        print("Gender :", self.gender)
        print("City :", self.total)
        print("Salary :", self.per)
 
s = Student()# Create an instance of the Student class
s.setData()# Set data for the instance
s.showData()# Display data for the instance

#----------------------------------------#
Question:
Write a python program to implement Getters and Setters in a class
Hints: 

Explication:This Python program defines a Student class that encapsulates student details such as name, total, and percentage. It demonstrates the use of setter and getter methods to set and retrieve these attributes. Here's an explanation of the program:

    class Student:: This is the class definition for the Student class.
    def __init__(self):: This is the constructor method for the Student class. It initializes three instance variables: name, total, and per with default values.
    self.name = "", self.total = "", self.per = 0: These lines initialize the name as an empty string, total as an empty string, and per as 0.
    def setName(self, name):: This is a setter method for setting the student's name.
    self.name = name: The name attribute is updated with the value passed to the setName method.
    def getName(self):: This is a getter method for retrieving the student's name.
    return self.name: The name attribute is returned when the getName method is called.
    Similar setter and getter methods are defined for the total and per attributes.
    name = input("Enter a Name :"): The program prompts the user to enter a name, and the input is stored in the name variable.
    total = int(input("Enter a Total :")) : The program prompts the user to enter a total, and the input is converted to an integer and stored in the total variable.
    per = float(input("Enter a Percentage :")): The program prompts the user to enter a percentage, and the input is converted to a float and stored in the per variable.
    s = Student(): An instance of the Student class is created, representing a student.
    s.setName(name), s.setTotal(total), s.setPercentage(per): Setter methods are used to set the student's name, total, and percentage based on the user's input.
    n = s.getName(), t = s.getTotal(), p = s.getPercentage(): Getter methods are used to retrieve the student's name, total, and percentage.
    print("\nDisplaying Student Details"): A message is printed to indicate that student details will be displayed.
    print("Name :", n), print("Total :", t), print("Percentage :", p): The student's name, total, and percentage are displayed to the console using the values retrieved from the getter methods.

This program demonstrates the use of object-oriented principles, encapsulation, and the setter and getter methods to manage and retrieve student details. It allows the user to input student information and then displays the details of the student.

Solution:
class Student:
    def __init__(self): #Constructor
        self.name = ""
        self.total = ""
        self.per = 0
 
    def setName(self,name):
        self.name = name
    def getName(self):
        return self.name
 
    def setTotal(self,total):
        self.total = total
    def getTotal(self):
        return self.total
 
    def setPercentage(self,per):
        self.per = per
    def getPercentage(self):
        return self.per
 
# Get user input for name, total, and percentage
name = input("Enter a Name :")
total = int(input("Enter a Total :"))
per = float(input("Enter a Percentage :"))
 
s = Student()
 
#Set the attributes using setter methods
s.setName(name)
s.setTotal(total)
s.setPercentage(per)
 
# Get the attributes using getter methods
n = s.getName()
t = s.getTotal()
p = s.getPercentage()
 
print("\nDisplaying Student Details")
print("Name :", n)
print("Total :", t)
print("Percentage :", p)

#----------------------------------------#
Question:
Write a python program to Implement Abstraction using Abstract class
Hints: 

Explication:
This Python program demonstrates the use of abstract classes and method overriding in object-oriented programming. It defines an abstract base class Vehicle and two concrete subclasses Bike and Car. The Vehicle class contains two abstract methods, accelerate and park, which are overridden by the child classes to provide specific implementations for different types of vehicles. Here's an explanation of the program:

    class Vehicle:: This is the abstract base class Vehicle. It contains two abstract methods, accelerate and park, which are defined but have no implementation (indicated by the pass statement). Abstract methods are methods that are declared in the base class but do not have a specific implementation, and they must be overridden by the child classes.
    class Bike(Vehicle):: This is the Bike class, which inherits from the Vehicle class. It overrides the accelerate and park methods to provide specific behavior for a bike.
    class Car(Vehicle):: This is the Car class, which also inherits from the Vehicle class. It overrides the accelerate and park methods to provide specific behavior for a car.
    def accelerate(self, name):: In the Bike and Car classes, the accelerate method is implemented to accept a name parameter and print a message specific to the type of vehicle, indicating that it is accelerating.
    def park(self, name):: In the Bike and Car classes, the park method is implemented to accept a name parameter and print a message specific to the type of vehicle, indicating that it is parking.
    c = Car(): An instance of the Car class is created and assigned to the variable c.
    c.accelerate("Car"): The accelerate method is called on the c object, passing "Car" as the name parameter. It prints a message indicating that the car is accelerating.
    c.park("Car"): The park method is called on the c object, passing "Car" as the name parameter. It prints a message indicating that the car is parking.
    b = Bike(): An instance of the Bike class is created and assigned to the variable b.
    b.accelerate("Bike"): The accelerate method is called on the b object, passing "Bike" as the name parameter. It prints a message indicating that the bike is accelerating.
    b.park("Bike"): The park method is called on the b object, passing "Bike" as the name parameter. It prints a message indicating that the bike is parking.

In this program, the use of an abstract base class (Vehicle) ensures that all subclasses (Bike and Car) provide specific implementations for the accelerate and park methods. This allows you to create different instances of vehicles (bike and car) and call their specific methods to demonstrate the behavior of each type of vehicle.

Solution:
#Abstract Class
class Vehicle:
    def acclerate(self,name):
        pass
    def park(self,name):
        pass
 
class Bike(Vehicle):
    def acclerate(self, name):
        print(name,"is accelrating @ 60kmph")
    def park(self, name):
        print(name,"is parked at two wheeler parking")
 
class Car(Vehicle):
    def acclerate(self, name):
        print(name,"is accelrating @ 90kmph")
    def park(self, name):
        print(name,"is parked at four wheeler parking")
 
 
c = Car()
c.acclerate("Car")
c.park("Car")
 
b=Bike()
b.acclerate("Bike")
b.park("Bike")

#----------------------------------------#
Question:
Write a python program to Implement Interface using class
Hints: 

Explication:
This Python program defines two classes, Circle and Rectangle, that inherit from a common base class Shape. The program calculates the areas of circles and rectangles based on user input. Here's an explanation of the program:

    Importing the math module: The program starts by importing the math module to access mathematical functions like pi and pow.
    class Shape: This is the base class, which can be considered an interface in this context. It defines three methods: input, process, and output. These methods are placeholders for specific implementations in the derived classes but are not implemented here.
    class Circle(Shape): This is the Circle class, which inherits from the Shape class. It represents a circle and is responsible for calculating its area.
        __init__(self, rad=0.0): The constructor initializes the Circle object with a default radius of 0.0. It also initializes an area variable to 0.0.
        setdata(self): This method prompts the user to enter the radius of the circle and sets it in the radius attribute.
        circle_area(self): This method calculates the area of the circle using the formula π * radius^2 and stores the result in the area attribute.
        getdata(self): This method prints the calculated area to the console.
    class Rectangle(Shape): This is the Rectangle class, which inherits from the Shape class. It represents a rectangle and calculates its area.
        __init__(self, len=0, bre=0): The constructor initializes the Rectangle object with default length and breadth values of 0. It also initializes an area attribute to 0.
        setdata(self): This method prompts the user to enter the length and breadth of the rectangle and sets them in the respective attributes.
        rect_area(self): This method calculates the area of the rectangle by multiplying the length and breadth and stores the result in the area attribute.
        getdata(self): This method prints the calculated area to the console.
    Creating instances of Circle and Rectangle:
        c = Circle(): Creates an instance of the Circle class.
        c.setdata(): Prompts the user to enter the radius and sets it.
        c.circle_area(): Calculates the circle's area.
        c.getdata(): Displays the area of the circle.
        r = Rectangle(): Creates an instance of the Rectangle class.
        r.setdata(): Prompts the user to enter the length and breadth and sets them.
        r.rect_area(): Calculates the rectangle's area.
        r.getdata(): Displays the area of the rectangle.

In summary, this program demonstrates how classes can inherit from a common base class (or interface), and each derived class provides its own implementations for specific methods. It calculates and displays the areas of circles and rectangles based on user input.
Solution:
import math
class Shape: #Interface
    def input(self):pass
    def process(self):pass
    def output(self):pass
 
class Circle(Shape):
    def __init__(self,rad=0.0):
        self.radius = rad
        self.area = 0.0
 
    def setdata(self):
        self.radius = float(input("Enter radius :"))
 
    def circle_area(self):
        self.area = math.pi*math.pow(self.radius,2)
 
    def getdata(self):
        print("Circle Area :",self.area)
 
class Rectangle(Shape):
    def __init__(self,len=0,bre=0):
        self.len = len
        self.bre = bre
        self.area = 0
 
    def setdata(self):
        self.len = int(input("Enter Length :"))
        self.bre = int(input("Enter Breadth :"))
 
    def rect_area(self):
        self.area = self.len*self.bre
 
    def getdata(self):
        print("Rectangle Area :",self.area)
 
c = Circle()
c.setdata()
c.circle_area()
c.getdata()
 
r = Rectangle()
r.setdata()
r.rect_area()
r.getdata()

#----------------------------------------#
Question:
Write a program to single inheritance in Python
Hints: 

Explication:
This Python program demonstrates inheritance in object-oriented programming. It defines two classes, Details and Student, where the Student class inherits from the Details class. Here's an explanation of the program:

    class Details:: This is the Details class, which serves as the parent class.
        __init__(self): The constructor method initializes three instance variables: name, total, and per. All are initially set to 0 or an empty string.
        setData(self, name, total, per): This method allows you to set values for the name, total, and per instance variables.
        showData(self): This method prints the values of name, total, and per.
    class Student(Details):: The Student class is a child class that inherits from the Details class. This means it inherits the attributes and methods of the parent class.
        __init__(self): The constructor method of the Student class initializes an additional instance variable, Grade, which is initially set to an empty string.
        setStudent(self, name, total, per, grade): This method allows you to set values for name, total, per, and the new grade instance variable. It calls the setData method from the parent class to set the common attributes.
        showStudent(self): This method first calls the showData method from the parent class to display the details inherited from Details. It then prints the grade attribute.
    e = Student(): An instance of the Student class is created and assigned to the variable e.
    e.setStudent("Kim", 430, 86.00, 'B') : The setStudent method is called on the e object to set the student's details, including the name, total, percentage, and grade.
    e.showStudent(): The showStudent method is called to display the student's details, including the name, total, percentage, and grade.

When you run the program, it creates an instance of the Student class, sets the student's details using the setStudent method, and then displays these details using the showStudent method. This program showcases the concept of inheritance, where the Student class inherits attributes and methods from the Details class and extends them with its own attributes and methods.

Solution:
class Details:
    def __init__(self):
        self.name = ""
        self.total = 0
        self.per = 0
 
    def setData(self,name,total,per):
        self.name = name
        self.total = total
        self.per = per
 
    def showData(self):
        print("Name :", self.name)
        print("Total :", self.total)
        print("Percentage :", self.per)
 
class Student(Details): #Inheritance
    def __init__(self):
        self.Grade = ""
 
    def setStudent(self,name,total,per,grade):
        self.setData(name,total,per)
        self.grade = grade
 
    def showStudent(self):
        self.showData()
        print("Grade :", self.grade)
 
 
e=Student()
e.setStudent("Kim",430,86.00,'B')
e.showStudent()

#----------------------------------------#
Question:
Write a program to inheritance with two child (derived) classes in Python

Hints: 

Explication:
This Python program defines three classes: Details, Student, and Staff. These classes are used to collect and display information about students and staff members. Here's an explanation of the program:

    class Details:: This is the base class, which contains common attributes and methods that both Student and Staff classes inherit.
        __init__(self) : The constructor initializes the idn, name, and gender attributes to default values.
        setDetails(self): This method allows you to set the details of a person, including the ID number, name, and gender. It collects this information from the user via input.
        showDetails(self): This method displays the details of a person, including the ID, name, and gender.
    class Student(Details):: This is a subclass of the Details class, specifically designed to hold information about students.
        __init__(self): The constructor initializes the total and per attributes to default values. It also calls the constructor of the parent class (Details) using super().
        setStudent(self): This method collects additional information related to students, such as the total marks and percentage, using input from the user. It also calls the setDetails method from the parent class to collect common details.
        showStudent(self): This method displays all the details of a student, including the common details (ID, name, and gender) from the Details class and the specific details (total marks and percentage) from the Student class.
    class Staff(Details):: This is another subclass of the Details class, designed to hold information about staff members.
        __init__(self): The constructor initializes the depart and salary attributes to default values and calls the constructor of the parent class (Details) using super().
        setStaff(self): This method collects additional information related to staff, such as the department and salary, using input from the user. It also calls the setDetails method from the parent class to collect common details.
        showStaff(self): This method displays all the details of a staff member, including the common details (ID, name, and gender) from the Details class and the specific details (department and salary) from the Staff class.
    The program starts by creating instances of the Student and Staff classes to collect and display information for a student and a staff member. It prompts the user for input to set the details for each and then displays the information.

This program demonstrates the use of class inheritance, where the Student and Staff classes inherit common attributes and methods from the Details class. It showcases how you can collect and display specific information for different types of objects (students and staff) while reusing and customizing common functionality provided by the parent class.

Solution:
class Details:
    def __init__(self):
        self.idn = 0
        self.name = ""
        self.gender = ""
 
    def setDetails(self):
        self.idn = input("Enter the ID Number : ")
        self.name = input("Enter the Name : ")
        self.gender = input("Enter the Gender : ")
 
    def showDetails(self):
        print("ID : ",self.idn)
        print("Name : ",self.name)
        print("Gender : ",self.gender)
 
class Student(Details):
    def __init__(self):
        self.total = 0
        self.per = 0
 
    def setStudent(self):
        self.setDetails()
        self.total = int(input("Enter the Total Mark : "))
        self.per = float(input("Enter the Percentage : "))
 
    def showStudent(self):
        self.showDetails()
        print("Total : ",self.total)
        print("Percentage : ",self.per)
 
class Staff(Details):
    def __init__(self):
        self.depart = ""
        self.salary = ""
 
    def setStaff(self):
        self.setDetails()
        self.depart = input("Enter the Department : ")
        self.salary = float(input("Enter the Salary : "))
 
    def showStaff(self):
        self.showDetails()
        print("Department : ",self.depart)
        print("Salary : ",self.salary)
 
print("Student Details : ")
stu = Student()
stu.setStudent()
stu.showStudent()
 
print("\nStaff Details : ")
stf = Staff()
stf.setStaff()
stf.showStaff()

#----------------------------------------#
Question:
Write a program to multiple inheritance in Python

Hints: 

Explication:
This Python program demonstrates the concept of multiple inheritance by creating a child class, Student, that inherits from two parent classes, PersonalInfo and AcademicInfo. The program collects personal and academic information from the user and then displays the combined student details, including both personal and academic information. Here's an explanation of the program:

    class PersonalInfo: This is the parent class for personal information. It contains an __init__ constructor that initializes attributes like idn, name, gender, address, and contact. It also includes a display_personal_info method to display the personal information.
    class AcademicInfo: This is the parent class for academic information. It contains an __init__ constructor that initializes attributes like stream and year. It also includes a display_academic_info method to display the academic information.
    class Student(PersonalInfo, AcademicInfo) : This is the child class that inherits from both PersonalInfo and AcademicInfo. It overrides the __init__ constructor to call the constructors of both parent classes. It also includes a display_student_details method to display both personal and academic information.
    In the main part of the program, the user is prompted to enter personal and academic information using the input function.
    An instance of the Student class, named student, is created by providing the collected information as arguments to the constructor.
    Finally, the display_student_details method is called on the student object to display all the student's details.

When you run this program, it collects and displays a student's personal and academic information by inheriting and using the methods and attributes from both the PersonalInfo and AcademicInfo parent classes. This demonstrates multiple inheritance, where a child class can inherit from multiple parent classes to reuse their attributes and methods.

Solution:
class PersonalInfo:	# parent classe
    def __init__(self, idn, name, gender, address, contact):
        self.idn = idn
        self.name = name
        self.gender = gender
        self.address = address
        self.contact = contact
 
    def display_personal_info(self):
        print("Id :   ", self.idn)
        print("Name : ", self.name)
        print("Gender : ", self.gender)
        print("Address : ", self.address)
        print("Contact : ", self.contact)
 
class AcademicInfo:	# parent classe
    def __init__(self, stream, year):
        self.stream = stream
        self.year = year
 
    def display_academic_info(self):
        print("Stream : ", self.stream)
        print("Year :   ", self.year)
 
class Student(PersonalInfo, AcademicInfo):	#child class inheriting from both parent classes
    def __init__(self, idn, name, gender, address, contact, stream, year):
        # Call constructors of parent classes
        PersonalInfo.__init__(self, idn, name, gender, address, contact)
        AcademicInfo.__init__(self, stream, year)
 
    def display_student_details(self):
        self.display_personal_info()
        self.display_academic_info()
 
idn = input("Enter the ID : ")
name = input("Enter the Name : ")
gender = input("Enter the Gender : ")
address = input("Enter the Address : ")
contact = input("Enter the Contact : ")
stream = input("Enter the Stream : ")
year = input("Enter the Year : ")
 
# Create a Student instance
student = Student(idn, name, gender, address, contact, stream, year)
 
# Display student details
student.display_student_details()

#----------------------------------------#
Question:
Write a python program to check prime number using object oriented approach

Hints: 

Explication:
This Python program defines a class PrimeChecker that can be used to check whether a given number is prime or not. Here's an explanation of how the program works:

    The PrimeChecker class is defined, which takes an integer num as a parameter when an instance of the class is created.
    The __init__ method is the constructor for the class and initializes the instance variable self.num with the value passed to it.
    The is_prime method is used to determine whether the number stored in self.num is prime or not. It follows these steps:
        If the number is less than or equal to 1, it returns False, as prime numbers are defined as positive integers greater than 1.
        If the number is equal to 2, it returns True, as 2 is the only even prime number.
        If the number is even (i.e., divisible by 2), it returns False since prime numbers (other than 2) are always odd.
        It then checks for divisibility of the number from 3 up to the square root of the number. It does this in a loop with a step of 2 to check only odd numbers, as even numbers greater than 2 cannot be prime. If it finds any divisor in this range, it returns False, indicating that the number is not prime.
        If none of the above conditions are met, it returns True, indicating that the number is prime.
    The program then takes user input for a number by using input() and converts it to an integer using int(). This number is stored in the num variable.
    An instance of the PrimeChecker class is created with the user's input, and it is assigned to the checker variable.
    The is_prime method of the checker instance is called. If the method returns True, it means that the number is prime, and a message stating that the number is prime is printed. If the method returns False, it means the number is not prime, and a corresponding message is printed.

Solution:
class PrimeChecker:
    def __init__(self, num):
        self.num = num
 
    def is_prime(self):
        if self.num <= 1:
            return False
        if self.num == 2:
            return True
        if self.num % 2 == 0:
            return False
 
        # Check for divisibility from 3 to the square root of the number
        for i in range(3, int(self.num**0.5) + 1, 2):
            if self.num % i == 0:
                return False
 
        return True
 
num = int(input("Enter a Number : "))
 
checker = PrimeChecker(num)# Create an instance of PrimeChecker
 
if checker.is_prime():
    print(f"{num} is a Prime Number")
else:
    print(f"{num} is not a Prime Number")

#----------------------------------------#
Question:
Write a python program to count number of objects created

Hints: 

Explication:
This Python program defines a class called Student and demonstrates the use of class variables, object creation, and instance methods. Here's an explanation of the program:

    class Student:: This line defines a class named Student.
    count = 0: This is a class variable named count that is used to keep track of the number of Student objects created. It is initialized to 0.
    def __init__(self, name, age):: This is the constructor method of the Student class. It is used to initialize the attributes of a Student object. self is a reference to the instance of the class being created, and name and age are the attributes that are set for each object.
    self.name = name and self.age = age: These lines set the name and age attributes of the Student object to the values passed as arguments.
    Student.count += 1: This line increments the class variable count by 1 each time a new Student object is created. This is done to keep track of how many Student objects have been created.
    def GetDetails(self):: This is an instance method of the Student class, which is used to print the name and age of a student.
    print("Name :", self.name) and print("Age :", self.age): These lines are used to print the name and age of a Student object when the GetDetails method is called.
    Four instances of the Student class are created:
        s1 = Student("Sam Kumar", 21) : A Student object is created with the name "Sam Kumar" and age 21.
        s2 = Student("Tiya", 20): Another Student object is created with the name "Tiya" and age 20.
        s3 = Student("Sathish", 19): Yet another Student object is created with the name "Sathish" and age 19.
        s3 = Student("Deepika", 21): An additional Student object is created with the name "Deepika" and age 21. Note that this line reassigns the variable s3, overwriting the previous object created with that variable.
    print("Number of Objects : ", Student.count) : This line prints the total number of Student objects created by accessing the count class variable. It will reflect the count of objects created, which in this case is 3 since the variable s3 was reassigned.

Solution:
class Student:
	# Class variable to keep track of the number of objects created
	count = 0
 
	def __init__(self,name,age):
		self.name = name
		self.age = age
		Student.count += 1 # Increment the count when an object is created
 
	def GetDetails(self):
		print("Name :",self.name)
		print("Age :",self.age)
 
# Create instances of MyClass
s1 = Student("Sam Kumar",21)
s2 = Student("Tiya",20)
s3 = Student("Sathish",19)
s3 = Student("Deepika",21)
 
# Print the number of objects created
print("Number of Objects : ", Student.count)

#----------------------------------------#
Question:
Write a python program to check Armstrong number using object oriented approach

Hints: 

Explication:
This Python program defines a class called ArmstrongChecker that checks whether a given number is an Armstrong number. Here's a step-by-step explanation of how it works:

    The ArmstrongChecker class is defined with a constructor __init__, which takes one argument, num, representing the number to be checked.
    Inside the constructor, self.num is assigned the value of the num argument, which stores the number to be checked for being an Armstrong number.
    The class has a method called is_armstrong(). This method checks if the number stored in self.num is an Armstrong number and returns a Boolean value (True or False).
    Inside the is_armstrong method: a. num_str is calculated by converting the number to a string. This is done to count the number of digits in the original number.
        num_digits is calculated as the length of num_str, which gives the number of digits in the original number.
        digit_sum is calculated using a generator expression. It calculates the sum of each digit raised to the power of num_digits. For example, if num is 153, digit_sum would be calculated as (1^3 + 5^3 + 3^3), which is 153.
        Finally, the method returns True if digit_sum is equal to the original number self.num, indicating that the number is an Armstrong number. Otherwise, it returns False.
    The program then takes user input to enter a number using int(input("Enter a Number : ")) and stores it in the variable num.
    An instance of the ArmstrongChecker class is created with the provided number num as an argument, and the instance is stored in the variable checker.
    The program then checks if the number is an Armstrong number by calling the is_armstrong() method of the checker object.
    If the number is an Armstrong number (i.e., the method returns True), it prints a message indicating that the number is an Armstrong number. Otherwise, it prints a message indicating that the number is not an Armstrong number.

The program checks whether a given number is an Armstrong number using the Armstrong number definition (a number is an Armstrong number if the sum of its digits raised to the power of the number of digits is equal to the original number). It does so by encapsulating the logic in a class called ArmstrongChecker.

Solution:
class ArmstrongChecker:
    def __init__(self, num):
        self.num = num
 
    def is_armstrong(self):        
        num_str = str(self.num)	# Convert the number to a string to count the digits        
        num_digits = len(num_str)	# Calculate the number of digits
        digit_sum = sum(int(digit) ** num_digits for digit in num_str)	# Calculate the sum of the nth powers of its digits        
        return digit_sum == self.num	# Check if the sum is equal to the original number
 
num = int(input("Enter a Number : "))
 
checker = ArmstrongChecker(num)
 
if checker.is_armstrong():
    print(f"{num} is an Armstrong Number")
else:
    print(f"{num} is not an Armstrong Number")

#----------------------------------------#
Question:
Write a python program to Multilevel inheritance

Hints: 

Explication:
This Python program defines a class hierarchy with multilevel inheritance in Python. Here's a breakdown of the classes and their relationships:

    Person (Base class): This class has a constructor __init__ that initializes the name and age attributes. It also has a display_info method that prints the name and age.
    Student (Intermediate class): This class inherits from Person and adds a new attribute student_id. It has its constructor, which takes the name, age, and student_id as parameters. The constructor of the Student class calls the constructor of the Person class using super() to set the name and age. It also has a display_student_info method, which calls the display_info method from the Person class and adds the student_id information.
    GraduateStudent (Derived class): This class inherits from Student and adds a new attribute research_topic. It has its constructor, which takes the name, age, student_id, and research_topic as parameters. The constructor of the GraduateStudent class calls the constructor of the Student class using super() to set the name, age, and student_id. It also has a display_graduate_info method, which calls the display_student_info method from the Student class and adds the research_topic information.

You create an instance of the GraduateStudent class with the name "Alice," age 25, student ID "STU001," and a research topic of "Machine Learning." Then, you call the display_graduate_info method on the graduate_student object, which prints out all the information from the base Person class, the Student class, and the GraduateStudent class, including the research topic.

Solution:
class Person:	# Base class
    def __init__(self, name, age):
        self.name = name
        self.age = age
 
    def display_info(self):
        print("Name : ",self.name)
        print("Age : ",self.age)
 
class Student(Person):	# Intermediate class inheriting from Person
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id
 
    def display_student_info(self):
        super().display_info()
        print("Student ID : ",self.student_id)
 
 
class GraduateStudent(Student):	 # Derived class inheriting from Student
    def __init__(self, name, age, student_id, research_topic):
        super().__init__(name, age, student_id)
        self.research_topic = research_topic
 
    def display_graduate_info(self):
        super().display_student_info()
        print("Research Topic : ",self.research_topic)
 
# Create an instance of GraduateStudent
graduate_student = GraduateStudent("Alice", 25, "STU001", "Machine Learning")
 
# Display information using the multilevel inheritance
graduate_student.display_graduate_info()

#----------------------------------------#
Question:
Write a python program to check Palindrome number using object oriented approach

Hints: 

Explication:
The Python program, PalindromeChecker, is designed to check whether a given number is a palindrome. Here's an explanation of how the program works:

    class PalindromeChecker: This is a class that defines a palindrome checker. It has two methods:
        __init__(self, num): This is the constructor method that initializes the object with a number num.
        is_palindrome(self): This method checks if the number is a palindrome. It does this by first converting the number to a string (num_str). Then, it reverses the string using slicing (reversed_str = num_str[::-1] ) and checks if the reversed string is equal to the original string. If they are equal, it returns True, indicating that the number is a palindrome; otherwise, it returns False.
    num = int(input("Enter a Number : ")): This line of code prompts the user to enter a number, and it converts the user's input to an integer, which is stored in the num variable.
    checker = PalindromeChecker(num): This line creates an instance of the PalindromeChecker class with the number entered by the user. The num value is passed as an argument to the constructor, initializing the num attribute of the checker object.
    if checker.is_palindrome():: This conditional statement checks whether the is_palindrome method of the checker object returns True. If it does, it means the entered number is a palindrome, and it prints a message indicating that the number is a palindrome. Otherwise, it prints a message indicating that the number is not a palindrome.
    The program then either prints "{num} is a Palindrome Number" or "{num} is not a Palindrome Number" based on the result of the is_palindrome method.

Here's how the program works:

    The user is prompted to enter a number.
    The program creates an instance of the PalindromeChecker class with the entered number.
    It checks whether the entered number is a palindrome using the is_palindrome method.
    Depending on the result, it prints a message indicating whether the number is a palindrome or not.

This program demonstrates the concept of using a class to encapsulate functionality for checking if a number is a palindrome, making the code more organized and reusable.

Solution:
class PalindromeChecker:
    def __init__(self, num):
        self.num = num
 
    def is_palindrome(self):
        num_str = str(self.num)
        reversed_str = num_str[::-1]  # Reverse the string        
        return num_str == reversed_str	# Check if the reversed string is equal to the original string
 
 
num = int(input("Enter a Number : "))
 
checker = PalindromeChecker(num)
 
if checker.is_palindrome():
    print(f"{num} is a Palindrome Number")
else:
    print(f"{num} is not a Palindrome Number")

#----------------------------------------#
Question:
Write a program to Student height record program for a school in Python

Hints: 

Explication:
The Python code defines a class called SchoolHeightRecords that allows you to manage height records of students. Here's a breakdown of the code:

    The SchoolHeightRecords class is defined with the following methods:
        __init__: Initializes an empty dictionary called student_records to store student names and their corresponding heights.
        add_student: Adds a new student's height to the student_records dictionary.
        remove_student: Removes a student's record from the student_records dictionary by providing the student's name.
        find_student_height: Retrieves the height of a student by providing their name. If the student is not found, it returns None.
        display_records: Displays all the student height records stored in the dictionary.
    An instance of the SchoolHeightRecords class is created with the variable school_records.
    A menu is displayed to the user with the following options:
        1. Add Student Height
        2. Remove Student Height
        3. Find Student Height
        4. Display All Records
        5. Quit
    The program enters a loop where the user is prompted to enter their choice.
    Depending on the user's choice, the corresponding method of the SchoolHeightRecords instance is called to perform the desired operation. The user can add, remove, find, or display student height records, or quit the program.
    If the user provides an invalid choice, they are notified with the "Invalid choice" message and prompted to try again.

The code allows you to interactively manage student height records, and it will continue running until the user chooses to quit (option 5).

One note is that the heights are stored as strings in the student_records dictionary. If you need to perform numerical operations with the heights, you should convert them to integers or floats before using them in calculations.

Solution:
class SchoolHeightRecords:
    def __init__(self):
        self.student_records = {}
 
    def add_student(self, student_name, height):
        self.student_records[student_name] = height
 
    def remove_student(self, student_name):
        if student_name in self.student_records:
            del self.student_records[student_name]
            print(f"{student_name} Records Remove Success")
        else:
            print(f"{student_name} Not Found in Records")
 
    def find_student_height(self, student_name):
        if student_name in self.student_records:
            return self.student_records[student_name]
        else:
            return None
 
    def display_records(self):
        print("Student Height Records:")
        for student, height in self.student_records.items():
            print(f"{student} : {height} cm")
 
 
school_records = SchoolHeightRecords()
 
print("1. Add Student Height")
print("2. Remove Student Height")
print("3. Find Student Height")
print("4. Display All Records")
print("5. Quit")
 
while True:
 
    choice = int(input("\nEnter your Choice : "))
 
    if choice == 1:
        student_name = input("Enter Student Name : ")
        height = input("Enter Student Height (in cm) : ")
        school_records.add_student(student_name.upper(), height)
        print(f"{student_name}'s Height Added to Records.")
    elif choice == 2:
        student_name = input("Enter Student Name to Remove : ")
        school_records.remove_student(student_name.upper())
    elif choice == 3:
        student_name = input("Enter Student Name to find Height : ")
        height = school_records.find_student_height(student_name.upper())
        if height is not None:
            print(f"{student_name}'s Height : {height} cm")
        else:
            print(f"{student_name} Not Found in Records")
    elif choice == 4:
        school_records.display_records()
    elif choice == 5:
        break
    else:
        print("Invalid choice. Please try again")

#----------------------------------------#
Question:
Write a python program to manage a phone store (mobile shop) record using class

Hints: 

Explication:
The Python code defines two classes: Phone and PhoneStore, allowing you to manage a phone inventory for a store. Here's a breakdown of the code:

    The Phone class represents individual phones. Each phone has attributes for its brand, model, and price. The __init__ method initializes these attributes when a new phone object is created.
    The PhoneStore class represents a store's inventory of phones. It has the following methods:
        __init__: Initializes an empty list called inventory to store phone objects.
        add_phone: Adds a phone object to the inventory list.
        remove_phone: Removes a phone from the inventory based on its brand and model. If the phone is found and removed, a success message is printed; otherwise, a "not found" message is printed.
        find_phone: Searches for a phone in the inventory based on its brand and model. If found, it returns the phone object; otherwise, it returns None.
        display_inventory: Displays the current phone inventory, including brand, model, and price.
    An instance of the PhoneStore class is created with the variable phone_store.
    A menu is displayed to the user with the following options:
        1. Add Phone to Inventory
        2. Remove Phone from Inventory
        3. Find Phone in Inventory
        4. Display Inventory
        5. Quit
    The program enters a loop where the user is prompted to enter their choice (as a string).
    Depending on the user's choice, the corresponding method of the PhoneStore instance is called to perform the desired operation. The user can add, remove, find, or display phone inventory, or quit the program.
    If the user provides an invalid choice, they are notified with the "Invalid choice" message and prompted to try again.

The code converts brand and model inputs to uppercase using the .capitalize() method before storing them in phone objects and when searching the inventory. This ensures that case-insensitive matching is used when adding, removing, or finding phones.

The code allows you to interactively manage the phone inventory for a store and will continue running until the user chooses to quit (option 5).

Solution:
class Phone:
    def __init__(self, brand, model, price):
        self.brand = brand
        self.model = model
        self.price = price
 
class PhoneStore:
    def __init__(self):
        self.inventory = []
 
    def add_phone(self, phone):
        self.inventory.append(phone)
 
    def remove_phone(self, brand, model):
        for phone in self.inventory:
            if phone.brand == brand and phone.model == model:
                self.inventory.remove(phone)
                print(f"Removed {brand} {model} from inventory.")
                return
        print(f"{brand} {model} not found in inventory.")
 
    def find_phone(self, brand, model):
        for phone in self.inventory:
            if phone.brand == brand and phone.model == model:
                return phone
        return None
 
    def display_inventory(self):
        print("Phone Store Inventory :")
        for phone in self.inventory:
            print(f"Brand : {phone.brand}, Model : {phone.model}, Price : ${phone.price:.2f}")
 
 
phone_store = PhoneStore()
 
print("1. Add Phone to Inventory")
print("2. Remove Phone from Inventory")
print("3. Find Phone in Inventory")
print("4. Display Inventory")
print("5. Quit")
 
while True:
    choice = input("\nEnter your Choice : ")
 
    if choice == "1":
        brand = input("Enter Phone Brand : ")
        model = input("Enter Phone Model : ")
        price = float(input("Enter Phone Price : "))
        phone = Phone(brand.capitalize(), model.capitalize(), price)
        phone_store.add_phone(phone)
        print(f"Added {brand} {model} to inventory.")
    elif choice == "2":
        brand = input("Enter Phone Brand to Remove : ")
        model = input("Enter Phone Model to Remove : ")
        phone_store.remove_phone(brand.capitalize(), model.capitalize())
    elif choice == "3":
        brand = input("Enter Phone Brand to Find : ")
        model = input("Enter Phone Model to Find : ")
        found_phone = phone_store.find_phone(brand.capitalize(), model.capitalize())
        if found_phone:
            print(f"Found {brand} {model} in inventory. Price : ${found_phone.price:.2f}")
        else:
            print(f"{brand} {model} not found in inventory.")
    elif choice == "4":
        phone_store.display_inventory()
    elif choice == "5":
        break
    else:
        print("Invalid choice. Please try again.")

#----------------------------------------#
Question:
Write a python program to add two distances using class and object concepts

Hints: 

Explication:
This Python program defines a Distance class that represents a distance using kilometers, meters, and centimeters. The class provides methods to add two distances and to display a distance in a human-readable format. Here's an explanation of the program:

    class Distance: This is the main class representing a distance. It has the following methods:
        __init__(self, km=0, m=0, cm=0): The constructor initializes the object with optional values for kilometers (default is 0), meters (default is 0), and centimeters (default is 0).
        add(self, other_distance): This method takes another Distance object as a parameter, adds the corresponding components (kilometers, meters, and centimeters), and returns a new Distance object.
        display(self): This method returns a formatted string representation of the distance.
    The program then prompts the user to enter two distances: one for distance1 and one for distance2. The user is asked to input the distance in kilometers, meters, and centimeters for each.
    The Distance objects distance1 and distance2 are created with the user-provided values.
    The add method is called on distance1, passing distance2 as the parameter. This results in a new Distance object result_distance that represents the sum of the two input distances.
    The program displays the result by calling the display method on result_distance, which provides the sum of both distances in a human-readable format.

When you run this program, it will allow you to input two distances and then calculate and display the sum of those distances. The program takes care of adjusting units when necessary, ensuring that the result is displayed correctly in terms of kilometers, meters, and centimeters.

Solution:
class Distance:
    def __init__(self, km=0, m=0, cm=0):
        self.km = km
        self.m = m
        self.cm = cm
 
    def add(self, other_distance):
        total_km = self.km + other_distance.km
        total_m = self.m + other_distance.m
        total_cm = self.cm + other_distance.cm
 
        # Adjust units if necessary
        if total_cm >= 100:
            total_m += total_cm // 100
            total_cm %= 100
        if total_m >= 1000:
            total_km += total_m // 1000
            total_m %= 1000
 
        return Distance(total_km, total_m, total_cm)
 
    def display(self):
       return f"{self.km} KM {self.m} M {self.cm} CM"
 
print("Enter First Distance")
km1 = int(input("Enter Kilometers : "))
m1 = int(input("Enter Meters : "))
cm1 = int(input("Enter Centimeters : "))
distance1 = Distance(km1, m1, cm1)
 
print("\nEnter Second Distance")
km2 = int(input("Enter Kilometers : "))
m2 = int(input("Enter Meters : "))
cm2 = int(input("Enter Centimeters : "))
distance2 = Distance(km2, m2, cm2)
 
# Add the distances
result_distance = distance1.add(distance2)
 
# Display the result
print("Sum of both Distances is :",result_distance.display())

#----------------------------------------#
Question:
Write a python program to find the elder person of two persons using class & object

Hints: 

Explication:
This Python program defines a Person class and a function find_elder to find the elder person among two given individuals based on their ages. Here's an explanation of the program:

    class Person: This is the Person class with a constructor __init__ that initializes two attributes, name and age. It represents a person with a name and age.
    def find_elder(person1, person2): This function takes two Person objects, person1 and person2, as parameters. It compares their ages and returns the elder person. If both persons have the same age, it returns None.
    The program creates two Person objects, person1 and person2, representing two individuals with their respective names and ages.
    The find_elder function is called with these two Person objects, and the result is stored in the elder variable.
    The program then checks whether elder is None. If it's None, it means both persons have the same age, so it prints "Both persons are of the same age." Otherwise, it prints the name and age of the elder person.

When you run this program, it will determine which of the two people is older based on their ages and print the corresponding message. If both persons have the same age, it will indicate that both are of the same age. This program demonstrates how to define a class, create objects, and compare their attributes to make decisions based on the object's state.

Solution:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
 
def find_elder(person1, person2):
    if person1.age > person2.age:
        return person1
    elif person2.age > person1.age:
        return person2
    else:
        return None
 
# Create two Person objects
person1 = Person("Sathish", 27)
person2 = Person("Pooja", 25)
 
# Find the elder person
elder = find_elder(person1, person2)
 
if elder is None:
    print("Both persons are of the same age")
else:
    print(f"Elder Person \nName : {elder.name} \nAge : {elder.age}")

#----------------------------------------#
Question:
Write a python program to bank management system

Hints: 

Explication:
This Python program simulates a simple bank management system using a Bank class. It allows users to create accounts, deposit money, withdraw money, check balances, and exit the program. Here's an explanation of the program:

    class Bank: This is the main class representing the bank. It has the following methods:
        __init__(self): The constructor initializes an empty accounts dictionary to store account information.
        create_account(self, account_number, account_holder, initial_balance): This method creates a new account and stores it in the accounts dictionary. It checks for account number duplication and negative initial balances.
        deposit(self, account_number, amount): This method allows deposits into an existing account, updating the account balance.
        withdraw(self, account_number, amount): This method allows withdrawals from an existing account, updating the account balance. It also checks for sufficient balance and non-negative withdrawal amounts.
        check_balance(self, account_number): This method checks the balance of an existing account and returns the account holder's name and balance as a formatted string.
    The program creates a Bank object named bank.
    The program presents a menu to the user with the following options: create account, deposit money, withdraw money, check balance, and exit.
    In a loop, the program reads the user's choice and performs the selected operation:
        For "Create Account," it collects account details and calls the create_account method.
        For "Deposit Money," it collects the account number and deposit amount and calls the deposit method.
        For "Withdraw Money," it collects the account number and withdrawal amount and calls the withdraw method.
        For "Check Balance," it collects the account number and calls the check_balance method.
        For "Exit," it exits the program.
    The program ensures input validation and provides appropriate feedback to the user.

When you run this program, it allows you to simulate a basic bank management system by creating accounts, depositing money, withdrawing money, and checking balances. It uses the Bank class to manage accounts and account operations.

Solution:
class Bank:
    def __init__(self):
        self.accounts = {}
 
    def create_account(self, account_number, account_holder, initial_balance):
        if account_number in self.accounts:
            return "Account already exists"
        if initial_balance < 0:
            return "Initial balance must be non-negative"
 
        self.accounts[account_number] = {
            'account_holder': account_holder,
            'balance': initial_balance
        }
        return "Account created successfully"
 
    def deposit(self, account_number, amount):
        if account_number not in self.accounts:
            return "Account does not exist"
        if amount <= 0:
            return "Amount to deposit must be positive"
 
        self.accounts[account_number]['balance'] += amount
        return "Deposited " + str(amount) + " successfully. New balance : " + str(self.accounts[account_number]['balance'])
 
    def withdraw(self, account_number, amount):
        if account_number not in self.accounts:
            return "Account does not exist"
        if amount <= 0:
            return "Amount to withdraw must be positive"
 
        if self.accounts[account_number]['balance'] < amount:
            return "Insufficient balance."
 
        self.accounts[account_number]['balance'] -= amount
        return "Withdrew " + str(amount) + " successfully. New balance : " + str(self.accounts[account_number]['balance'])
 
    def check_balance(self, account_number):
        if account_number not in self.accounts:
            return "Account does not exist"
 
        return "Account Holder : " + self.accounts[account_number]['account_holder'] + "\nBalance : " + str(self.accounts[account_number]['balance'])
 
bank = Bank()	# Create a Bank object
 
print("\n****** Bank Management System ******")
print("\n1. Create Account")
print("2. Deposit Money")
print("3. Withdraw Money")
print("4. Check Balance")
print("5. Exit")
 
while True:
 
    choice = input("\nEnter your Choice (1 to 5): ")
 
    if choice == '1':
        account_number = input("Enter Account Number : ")
        account_holder = input("Enter Account Holder's Name : ")
        initial_balance = float(input("Enter Initial Balance : "))
        result = bank.create_account(account_number, account_holder, initial_balance)
        print(result)
 
    elif choice == '2':
        account_number = input("Enter Account Number : ")
        amount = float(input("Enter Amount to Deposit : "))
        result = bank.deposit(account_number, amount)
        print(result)
 
    elif choice == '3':
        account_number = input("Enter Account Number : ")
        amount = float(input("Enter Amount to Withdraw : "))
        result = bank.withdraw(account_number, amount)
        print(result)
 
    elif choice == '4':
        account_number = input("Enter Account Number : ")
        result = bank.check_balance(account_number)
        print(result)
 
    elif choice == '5':
        print("Exiting the program.")
        break
 
    else:
        print("Invalid Choice. Please Try Again !!!")

#----------------------------------------#
Question:
Write a python program to get student details as input and print the result after updating the marks

Hints: 

Explication:
The Python program for a simple student management system. It allows you to input student details, update student marks, and print student details. Here's a breakdown of how the code works:

    class Student: This defines a class named Student, which represents the student management system.
    __init__(self): The constructor initializes an empty dictionary called student_details as an instance variable.
    @property input_student_details(self): This is a property method that allows you to input student details. It prompts the user to enter the roll number, student name, and marks. The details are stored in the student_details dictionary under the roll number key.
    update_student_marks(self): This method allows you to update a student's marks. It prompts the user to enter the roll number of the student to update and then the new marks. If the student is found in the student_details dictionary, their marks are updated.
    print_student_details(self): This method allows you to print the details of a specific student. It prompts the user to enter the roll number of the student, and if the student is found, their roll number, name, and marks are printed.
    The program creates an instance of the Student class called obj.
    The code enters a while loop that displays a menu with four options: input student details, update student marks, print student details, and exit.
    The user is prompted to enter their choice (1 to 4), and based on the choice, one of the methods of the obj instance is called.
    If the user chooses option 4, the program exits the loop and ends.
    If the user enters an invalid choice, an error message is displayed.


Solution:
class Student:
	def __init__(self):
		self.student_details = {}
 
	@property
	def input_student_details(self):	# input student details
		roll_number = input("Enter Roll Number : ")
		name = input("Enter Student Name : ")
		marks = float(input("Enter Marks : "))
		self.student_details[roll_number] = {'name': name, 'marks': marks}
		print("Marks Added successfully")
 
	def update_student_marks(self):	  # update student marks
		roll_number = input("Enter Roll Number of the Student to Update Marks : ")
		if roll_number in self.student_details:
			new_marks = float(input("Enter New Marks : "))
			self.student_details[roll_number]['marks'] = new_marks
			print("Marks updated successfully")
		else:
			print("Student not found")
 
	def print_student_details(self):	# print student details
		roll_number = input("Enter Roll Number of the student to view details : ")
		if roll_number in self.student_details:
			student = self.student_details[roll_number]
			print("Roll Number :", roll_number)
			print("Student Name :", student['name'])
			print("Marks :", student['marks'])
		else:
			print("Student not found")
 
obj = Student()
 
while True:
    print("\n ********* Student Management System *********  ")
    print("\n1. Input Student Details")
    print("2. Update Student Marks")
    print("3. Print Student Details")
    print("4. Exit")
 
    choice = input("\nEnter your Choice (1 to 4): ")
 
    if choice == '1':
        obj.input_student_details
    elif choice == '2':
        obj.update_student_marks()
    elif choice == '3':
        obj.print_student_details()
    elif choice == '4':
        print("Exiting the program")
        break
    else:
        print("Invalid Choice. Please Try Again !!!")

#----------------------------------------#
Question:
Write a python program to Arrays of Objects

Hints: 

Explication:
The Python program defines a Student class and creates a list (students) to store instances of the Student class. It also demonstrates how to access and modify attributes of a student. Here's a breakdown of the code:

    class Student: This defines a class called Student, representing a student with attributes like roll_number, name, and marks.
    __init__(self, roll_number, name, marks): The constructor method initializes a Student object with the provided roll_number, name, and marks.
    __str__(self): This special method returns a string representation of the Student object, displaying the roll number, name, and marks.
    students = []: This creates an empty list to store Student objects.
    Three students are created and added to the students list using the append method. Each student has a unique roll number, name, and marks.
    A for loop iterates over the list of students and prints the details of each student using the __str__ method.
    It then demonstrates how to access and modify the attributes of a specific student. In this case, it selects the first student from the list, changes the name and marks, and prints the updated details.

Solution:
class Student:
    def __init__(self, roll_number, name, marks):
        self.roll_number = roll_number
        self.name = name
        self.marks = marks
 
    def __str__(self):
        return f"Roll Number : {self.roll_number}\nStudent Name : {self.name}\nMarks : {self.marks}"
 
students = [] # Create an array (list) of Student objects
 
students.append(Student(101, "Mithra", 85.5)) # Add students to the array
students.append(Student(102, "Akhil", 78.0))
students.append(Student(103, "Sathish", 92.5))
 
for student in students: # print individual student details
    print(student,"\n")
 
# Access and modify attributes of a student
student = students[0]
print("Before Update : ",student)
student.name = "Pooja"
student.marks = 90.0
print("\nAfter Update : ",student)

#----------------------------------------#
Question:
Write a python program to Searching of objects from an array of objects using ID

Hints: 

Explication:
The program defines a Student class, creates a list of Student objects, and allows you to search for a student by their ID. Here's a breakdown of the code:

    class Student: This class represents a student with attributes such as student_id, name, and per (percentage).
    __init__(self, student_id, name, per): The constructor initializes a Student object with the provided student_id, name, and per.
    __str__(self): This special method returns a string representation of the Student object, displaying the student's ID, name, and percentage.
    An array (list) of Student objects is created and initialized with student data.
    search_student_by_id(student_id): This function searches for a student by their ID. It iterates through the students list and returns the first matching student object with the specified student_id, or None if no match is found.
    The code prints all student IDs in the list using a for loop.
    The user is prompted to enter a student ID to search for.
    The search_student_by_id function is called with the user-provided ID, and if a student with that ID is found, it's printed along with a "Student Found" message. If no matching student is found, a "Student Not Found" message is displayed.

Solution:
class Student:
    def __init__(self, student_id, name, per):
        self.student_id = student_id
        self.name = name
        self.per = per
 
    def __str__(self):
        return "Student ID : " + str(self.student_id) + "\nStudent Name : " + self.name + "\nPercentage : " + str(self.per)
 
# Create an array (list) of Student objects
students = [
	    Student(101, "Mithra", 85.5),
	    Student(102, "Akhil", 78.0),
	    Student(103, "Tiya", 92.5),
	    Student(104, "Ramesh", 84.5),
	    Student(105, "Sam Kumar", 65.5)
	   ]
 
def search_student_by_id(student_id):	# search for a student by ID
    for student in students:
        if student.student_id == student_id:
            return student
    return None
 
# Print all student IDs
print("*** Student IDs ***")
for student in students:
    print(student.student_id)
 
search_id = int(input("\nEnter Student ID to Search : "))
 
found_student = search_student_by_id(search_id) # Search for the student by ID
 
if found_student:
    print("Student Found")
    print(found_student)
else:
    print("Student Not Found")

#----------------------------------------#
Question:
Write a python program to Constructor Initialization

Hints: 

Explication:
The program defines a Student class and creates three instances of the class, each representing a different student. It then displays the details of each student using the display_details method. Here's a breakdown of the code:

    class Student: This class defines a student with attributes such as roll_number, name, and percent (percentage).
    __init__(self, roll_number, name, percent) : The constructor initializes a Student object with the provided roll_number, name, and percent.
    display_details(self): This method is used to print the details of a student, including their roll number, name, and percentage.
    Three instances of the Student class (s1, s2, and s3) are created and initialized with different data for each student.
    The code then displays the details of each student by calling the display_details method for each instance.

Here's what the code does:

    It creates three student objects with different details.
    It prints the details of each student using the display_details method, showing their roll number, name, and percentage.

Solution:
class Student:
    def __init__(self, roll_number, name, percent):
        self.roll_number = roll_number
        self.name = name
        self.percent = percent
 
    def display_details(self):
        print("Roll Number :", self.roll_number)
        print("Name :", self.name)
        print("Percentage :", self.percent)
 
# Creating objects of the Student class with constructor initialization
s1 = Student(501, "Kim", 85.5)
s2 = Student(502, "Bob", 78.0)
s3 = Student(503, "Tin", 90.3)
 
print("Student 1 Details :")
s1.display_details()
 
print("\nStudent 2 Details :")
s2.display_details()
 
print("\nStudent 3 Details :")
s3.display_details()

#----------------------------------------#
Question:
Write a python program to Parameterized Constructor and Destructor

Hints: 

Explication:
The program defines a Student class with a constructor and a destructor. It creates three instances of the class, displays their details, and then explicitly deletes these instances to demonstrate the destructor's functionality. Here's a breakdown of the code:

    class Student: This class defines a student with attributes such as roll_number, name, and per (percentage).
    __init__(self, roll_number, name, per): The constructor initializes a Student object with the provided roll_number, name, and per.
    display_details(self): This method is used to print the details of a student, including their roll number, name, and percentage.
    __del__(self): This special method is the destructor. It is automatically called when an instance of the class is deleted. In this case, it prints a message indicating the roll number of the student being deleted.
    Three instances of the Student class (s1, s2, and s3) are created and initialized with different data for each student.
    The code displays the details of each student by calling the display_details method for each instance.
    The instances are explicitly deleted using the del statement, which triggers the __del__ destructor method.

Here's what the code does:

    It creates three student objects with different details.
    It prints the details of each student using the display_details method.
    It explicitly deletes each student object, which triggers the destructor and prints a message indicating that the student is being deleted.

Solution:
class Student:
	def __init__(self, roll_number, name, per):
		self.roll_number = roll_number
		self.name = name
		self.per = per
 
	def display_details(self):
		print("Roll Number :", self.roll_number)
		print("Name :", self.name)
		print("Percentage :",self.per)
 
	def __del__(self):
		print("Deleting student with Roll Number", self.roll_number)
 
# Creating objects of the Student class with a parameterized constructor
s1 = Student(501, "Kim", 85.5)
s2 = Student(502, "Bob", 78.0)
s3 = Student(503, "Tin", 90.3)
 
print("Student 1 Details :")
s1.display_details()
 
print("\nStudent 2 Details :")
s2.display_details()
 
print("\nStudent 3 Details :")
s3.display_details()
 
# Deleting student objects (calling the destructor)
del s1
del s2
del s3

#----------------------------------------#
Question:
Write a python program to add objects '+' using operator

Hints: 

Explication:
The python program defines a ComplexNumber class that represents complex numbers. It allows you to create complex number objects, display them as strings, and perform addition of two complex numbers using the + operator. Here's a breakdown of the code:

    class ComplexNumber: This class represents a complex number with attributes real and imag, which represent the real and imaginary parts, respectively.
    __init__(self, real, imag): The constructor initializes a ComplexNumber object with the provided real and imaginary parts.
    __str__(self): This special method returns a string representation of the complex number in the format "a + bi" where 'a' is the real part, 'b' is the imaginary part, and 'i' denotes the imaginary unit.
    __add__(self, other): This special method overloads the + operator, allowing you to add two complex numbers. It adds the real and imaginary parts separately and returns a new ComplexNumber object representing the sum.
    Two complex number objects, complex1 and complex2, are created with different real and imaginary parts.
    The code uses the + operator to add complex1 and complex2, resulting in a new ComplexNumber object called result.
    The print statement displays the result of the addition, which is the sum of the complex numbers.

Here's what the code does:

    It creates two complex number objects with different real and imaginary parts.
    It adds these complex numbers using the + operator, which calls the __add__ method.
    It prints the result of the addition.

Solution:
class ComplexNumber:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag
 
    def __str__(self):
        return str(self.real) + " + " + str(self.imag) + "i"
 
    def __add__(self, other):        
        real_part = self.real + other.real	# Add the real and imaginary parts separately
        imag_part = self.imag + other.imag
        return ComplexNumber(real_part, imag_part)
 
# Create two complex number objects
complex1 = ComplexNumber(3, 2)
complex2 = ComplexNumber(5, 3)
 
# Add the complex numbers using the + operator
result = complex1 + complex2
 
print("Addition :",result)

#----------------------------------------#
Question:
Write a python program to comparison between two objects using the '>' operator

Hints: 

Explication:
The python program defines a Number class that represents a number. It allows you to create Number objects, display them as strings, and perform a greater-than comparison using the > operator. Here's a breakdown of the code:

    class Number: This class represents a number with an attribute value.
    __init__(self, value): The constructor initializes a Number object with the provided value.
    __str__(self): This special method returns a string representation of the number.
    __gt__(self, other): This special method overloads the > (greater-than) operator, allowing you to compare two Number objects. It checks whether the value of the current object is greater than the value of the other object.
    Two Number objects, number1 and number2, are created with different values.
    The code compares number1 and number2 using the > operator in an expression and stores the result in the variable res.
    Depending on the result, the code prints a message indicating whether number1 is greater than number2.

Here's what the code does:

    It creates two Number objects with different values.
    It compares the two numbers using the > operator.
    It prints a message based on the result of the comparison.


Solution:
class Number:
    def __init__(self, value):
        self.value = value
 
    def __str__(self):
        return str(self.value)
 
    def __gt__(self, other):
        return self.value > other.value
 
# Create two Number objects
number1 = Number(5)
number2 = Number(3)
 
# Compare the two numbers using the > operator in an expression
res = number1 > number2
 
if res:
    print(number1, "is greater than", number2)
else:
    print(number1, "is not greater than", number2)

#----------------------------------------#
Question:
Write a python program to pass objects as arguments and return objects from function

Hints: 

Explication:
The python program defines a MyClass class and a function process_object. The function takes an object of MyClass as an argument, modifies the object by doubling its value, and returns the modified object. Here's a breakdown of the code:

    class MyClass: This class represents an object with an attribute value.
    __init__(self, value): The constructor initializes a MyClass object with the provided value.
    def process_object(obj): This function takes an object obj as an argument, doubles the value attribute of the object, and then returns the modified object.
    An instance of MyClass is created, and my_obj is initialized with a value of 10.
    The process_object function is called with my_obj as an argument. It modifies my_obj by doubling its value attribute, and the modified object is returned and assigned to result_obj.
    The code prints the value attribute of both the original object (my_obj) and the modified object (result_obj).

Here's what the code does:

    It creates an object of MyClass with an initial value of 10.
    It calls the process_object function, which modifies the object by doubling its value.
    It prints the value attribute of both the original and modified objects.


Solution:
class MyClass:
	def __init__(self, value):
		self.value = value
 
def process_object(obj):    
	obj.value *= 2	# Modify the object or perform some operations
	return obj	 # Return the modified object
 
my_obj = MyClass(10)	# Create an object of MyClass
 
result_obj = process_object(my_obj) # Call the function and pass the object as an argument
 
print("Original Object :",my_obj.value)
print("Modified Object :",result_obj.value)

#----------------------------------------#
Question:
Write a python program to illustrate the working of decorators

Hints: 

Explication:
The use of a decorator in Python. A decorator is a function that wraps another function to add functionality to it. In this code, you have defined a decorator function my_decorator, which wraps the msg function. Here's a breakdown of the code:

    def my_decorator(func): This is the decorator function. It takes a function func as an argument and defines an inner function called wrapper. The wrapper function adds some behavior before and after calling func.
    def wrapper(): This is the inner function within the decorator. It adds behavior before and after calling the original function func.
    Inside the wrapper function, there are print statements to indicate that something is happening before and after the original function is called.
    return wrapper: The decorator function returns the wrapper function.
    @my_decorator: This is a decorator syntax, indicating that the msg function is decorated with my_decorator. It means that when you call msg, it will be wrapped by the wrapper function defined in my_decorator.
    def msg(): This is the function to be decorated. It simply prints "Hello world!".
    When you call msg(), it is actually calling the decorated function. The my_decorator wraps msg, so it prints the additional messages before and after "Hello world!" is printed.

The msg function is decorated with my_decorator, so when you call msg(), it prints "Something is happening before the function is called," then "Hello world!", and finally "Something is happening after the function is called." This demonstrates how decorators can add behavior to functions without modifying their source code.

Solution:
# Decorator function
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called")
        func()
        print("Something is happening after the function is called")
    return wrapper
 
# Function to be decorated
@my_decorator
def msg():
    print("Hello world !")
 
# Call the decorated function
msg()

#----------------------------------------#
Question:
Write a python program to illustrate the working of abstract method

Hints: 

Explication:
The use of abstract base classes and inheritance in Python. Here's a breakdown of the code:

    from abc import ABC, abstractmethod: This line imports the ABC (Abstract Base Class) class and the abstractmethod decorator from the abc module. The ABC class is used to create abstract base classes, and the abstractmethod decorator is used to declare abstract methods within those classes.
    class Shape(ABC): This defines an abstract base class Shape that inherits from ABC. It has an abstract method area.
    @abstractmethod: This decorator is used to declare the area method as an abstract method. Abstract methods must be implemented by any concrete subclass of the Shape class.
    class Circle(Shape): This defines a subclass Circle of the Shape class. It implements the area method to calculate the area of a circle based on the radius.
    class Rectangle(Shape): This defines another subclass Rectangle of the Shape class. It implements the area method to calculate the area of a rectangle based on its length and width.
    Instances of the Circle and Rectangle classes are created by prompting the user to enter the required dimensions.
    The area method is called on the Circle and Rectangle objects to calculate and print the areas of the circle and rectangle, respectively.

Here's what the code does:

    It defines an abstract base class Shape with an abstract area method.
    It creates two concrete subclasses, Circle and Rectangle, which inherit from Shape and implement the area method.
    It prompts the user to enter the dimensions of a circle and a rectangle.
    It calculates and prints the areas of the circle and rectangle using the respective area methods.


Solution:
from abc import ABC, abstractmethod
 
class Shape(ABC):#Abstract base class
    @abstractmethod
    def area(self):
        pass
 
class Circle(Shape):# Create a subclass of Shape
    def __init__(self):
        self.radius = float(input("Enter the Radius :"))
 
    def area(self):
        return 3.1415 * self.radius * self.radius
 
class Rectangle(Shape):# Create a subclass of Shape
    def __init__(self):
        self.length = float(input("Enter the Length :"))
        self.width = float(input("Enter the Width :"))
 
    def area(self):
        return self.length * self.width
 
 
# Create instances of the subclasses
cir = Circle()
rect = Rectangle()
 
# Call the area method on the objects
print("Area of Circle :", cir.area())
print("Area of Rectangle :", rect.area())

#----------------------------------------#
Question:
Write a python program to convert hours into days

Hints: 

Explication:
The python program defines a HoursToDaysConverter class, which is used to convert a number of hours into days. Here's a breakdown of the code:

    class HoursToDaysConverter: This class represents a converter for converting hours into days. It has an __init__ method to initialize the hours attribute and a convert_to_days method to perform the conversion.
    In the try block, the code attempts to get the number of hours from the user using the input function. It converts the user input to a float and assigns it to the hours_input variable. If the user enters an invalid input (not a number), a ValueError exception is raised, and an error message is printed.
    If the user enters a valid number of hours, an instance of the HoursToDaysConverter class is created using the hours_input, and the convert_to_days method is called to perform the conversion.
    The result, which is the number of days, is stored in the days_result variable.
    Finally, the code prints the original number of hours entered by the user and the equivalent number of days based on the conversion.

Here's what the code does:

    It takes a user input for the number of hours and attempts to convert it to a float.
    If the input is valid, it converts the number of hours to days using the HoursToDaysConverter class.
    It then displays the original number of hours and the equivalent number of days.


Solution:
class HoursToDaysConverter:
    def __init__(self, hours):
        self.hours = hours
 
    def convert_to_days(self):
        days = self.hours / 24
        return days
try:
    hours_input = float(input("Enter the Number of Hours : "))# Get the number of hours from the user
except ValueError:
    print("Invalid input. Please enter a valid number of hours.")
else:    
    obj = HoursToDaysConverter(hours_input) # Create an instance of the HoursToDaysConverter class
    days_result = obj.convert_to_days() #Call the Convert hours to days method   
    print(hours_input, "hours is equal to", days_result, "days.") # Display the result

#----------------------------------------#
Question:
Write a python program to search objects from an array of objects using filter() method

Hints: 

Explication:
The python program defines a Person class and a list of Person objects. It then uses the filter() function to filter people in the list who are older than 25 years. Here's a breakdown of the code:

    class Person: This class defines a Person with attributes for name and age.
    The code creates a list of Person objects, people, with different names and ages.
    def is_older_than_25(person): This function defines a filtering criterion. It returns True if the person's age is greater than 25; otherwise, it returns False.
    filter(is_older_than_25, people): The filter() function takes the is_older_than_25 function and the list of people, and it returns an iterable containing only the Person objects for which the is_older_than_25 function returns True.
    filtered_people_list = list(filtered_people): This line converts the filtered iterable to a list. While this conversion is optional, it's done here to easily loop through the filtered results multiple times.
    The code then loops through the filtered list and prints the name and age of people older than 25.

Here's what the code does:

    It defines a class Person to represent people with their names and ages.
    It creates a list of Person objects.
    It uses the filter() function to filter and retrieve people older than 25.
    It converts the filtered result into a list (optional).
    It displays the names and ages of people older than 25.


Solution:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
 
# Create an array of Person objects
people = [
    Person("Kim", 21),
    Person("Sam", 30),
    Person("Charlie", 29),
    Person("Bob", 25),
    Person("Tiya", 27),
]
 
# Define a function to filter people older than a certain age
def is_older_than_25(person):
    return person.age > 25
 
# Use the filter() method to search for people older than 25
filtered_people = filter(is_older_than_25, people)
 
# Convert the filtered result to a list (optional)
filtered_people_list = list(filtered_people)
 
# Display the filtered results without f-strings
print("People older than 25 :")
for person in filtered_people_list:
    print("Name :", person.name)
    print("Age :", person.age)
